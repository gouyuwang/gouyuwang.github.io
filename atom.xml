<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>e攻城狮</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ya2.top/"/>
  <updated>2022-09-01T10:00:53.995Z</updated>
  <id>https://ya2.top/</id>
  
  <author>
    <name>Mr.Gou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Navicat Premium 16无限试用方法</title>
    <link href="https://ya2.top/articles/Navicat-Premium-16%E6%97%A0%E9%99%90%E8%AF%95%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://ya2.top/articles/Navicat-Premium-16无限试用方法/</id>
    <published>2022-08-23T14:57:50.000Z</published>
    <updated>2022-09-01T10:00:53.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前往官网下载【Navicat-Premium-16】"><a href="#1-前往官网下载【Navicat-Premium-16】" class="headerlink" title="1.前往官网下载【Navicat Premium 16】"></a>1.前往官网下载【Navicat Premium 16】</h2><p><a href="http://www.navicat.com.cn/products" target="_blank" rel="noopener">http://www.navicat.com.cn/products</a></p><h2 id="2-创建清理试用信息bat"><a href="#2-创建清理试用信息bat" class="headerlink" title="2.创建清理试用信息bat"></a>2.创建清理试用信息bat</h2><p>Navicat Premium 16Crack.bat</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Delete HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPremium\Registration[version and language]</span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%i</span> <span class="keyword">in</span> ('"REG QUERY "HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPremium" /s | <span class="built_in">findstr</span> /L Registration"') <span class="keyword">do</span> (</span><br><span class="line">    reg delete <span class="variable">%%i</span> /va /f</span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Delete Info folder under HKEY_CURRENT_USER\Software\Classes\CLSID</span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%i</span> <span class="keyword">in</span> ('"REG QUERY "HKEY_CURRENT_USER\Software\Classes\CLSID" /s | <span class="built_in">findstr</span> /E Info"') <span class="keyword">do</span> (</span><br><span class="line">    reg delete <span class="variable">%%i</span> /va /f</span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Finish</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>在每次试用到期时，执行清理，或者添加至定时程序中，每日自动清理相当于无限试用</p><h2 id="3-说明"><a href="#3-说明" class="headerlink" title="3.说明"></a>3.说明</h2><p><font style="color:red;font-size:1.5rem;">本项目自始至终都是免费使用，如果有你发现有人盗取牟利，请拒绝并不遗余力地在一切平台举报投诉他！</font></p><hr><blockquote><p>本项目只做个人学习研究之用，不得用于商业用途！<br>若资金允许，请点击<a href="http://www.navicat.com.cn/store/navicat-premium-plan" target="_blank" rel="noopener">链接</a>购买正版，谢谢合作！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-前往官网下载【Navicat-Premium-16】&quot;&gt;&lt;a href=&quot;#1-前往官网下载【Navicat-Premium-16】&quot; class=&quot;headerlink&quot; title=&quot;1.前往官网下载【Navicat Premium 16】&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>APP代理检测对抗</title>
    <link href="https://ya2.top/articles/APP%E4%BB%A3%E7%90%86%E6%A3%80%E6%B5%8B%E5%AF%B9%E6%8A%97/"/>
    <id>https://ya2.top/articles/APP代理检测对抗/</id>
    <published>2022-06-02T11:00:20.000Z</published>
    <updated>2022-07-27T16:11:59.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>本文将从网络通信原理浅析在android中出现的一些代理转发检测，这些功能会使我们测试app时出现<strong>抓不到包</strong>或者<strong>应用闪退</strong>等情况，针对这种场景，我搭建了测试环境，并对其场景展开分析与实施应对方案。</p><h2 id="2-OSI-7层网络模型"><a href="#2-OSI-7层网络模型" class="headerlink" title="2.OSI 7层网络模型"></a>2.OSI 7层网络模型</h2><p>网络通信嘛，首先得知道什么是OSI 7层模型。下面是百度的解释：</p><blockquote><p>为了使不同计算机厂家生产的计算机能够相互通信，以便在更大的范围内建立计算机网络，国际标准化组织（ISO）在1978年提出了“开放系统互联参考模型”，即著名的OSI/RM模型（Open System Interconnection/Reference Model）。</p><p>它将计算机网络体系结构的通信协议划分为七层，自下而上依次为：</p><p><a href="https://baike.baidu.com/item/物理层" target="_blank" rel="noopener">物理层</a>（Physics Layer）、<a href="https://baike.baidu.com/item/数据链路层" target="_blank" rel="noopener">数据链路层</a>（Data Link Layer）、<a href="https://baike.baidu.com/item/网络层/4329439" target="_blank" rel="noopener">网络层</a>（Network Layer）、<a href="https://baike.baidu.com/item/传输层" target="_blank" rel="noopener">传输层</a>（Transport Layer）、<a href="https://baike.baidu.com/item/会话层" target="_blank" rel="noopener">会话层</a>（Session Layer）、<a href="https://baike.baidu.com/item/表示层" target="_blank" rel="noopener">表示层</a>（Presentation Layer）、<a href="https://baike.baidu.com/item/应用层/16412033" target="_blank" rel="noopener">应用层</a>（Application Layer）</p></blockquote><p>使用网络数据的传输离不开网络协议七层模型，通过理解每一层协议的分工，也就能对网络故障逐一排查，这样的思维逻辑在安卓应用中也同样适用。</p><p><strong>OSI 7层模型</strong>各层功能及对应的协议、设备如下表所示：</p><table><thead><tr><th align="left">OSI对应的层</th><th align="left">功能</th><th align="left">TCP/IP对应的协议</th><th align="left">设备</th></tr></thead><tbody><tr><td align="left">应用层</td><td align="left">文件传输，电子邮件，文件服务，虚拟终端</td><td align="left">TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet</td><td align="left">/</td></tr><tr><td align="left">表示层</td><td align="left">数据格式化，代码转换，数据加密</td><td align="left">/</td><td align="left">/</td></tr><tr><td align="left">会话层</td><td align="left">解除或建立与别的接点的联系</td><td align="left">/</td><td align="left">/</td></tr><tr><td align="left">传输层</td><td align="left">提供端对端的接口</td><td align="left">TCP，UDP</td><td align="left">四层交换机和四层路由</td></tr><tr><td align="left">网络层</td><td align="left">为数据包选择路由</td><td align="left">IP，ICMP，RIP，OSPF，BGP，IGMP</td><td align="left">三层交换机和路由</td></tr><tr><td align="left">数据链路层</td><td align="left">传输有地址的帧以及错误检测功能</td><td align="left">ARP，RARP，MTU，SLIP，CSLIP，PPP</td><td align="left">网桥、交换机、网卡</td></tr><tr><td align="left">物理层</td><td align="left">以二进制数据形式在物理媒体上传输数据</td><td align="left">ISO2110，IEEE802，IEEE802.2</td><td align="left">中继器、集线器、双绞线</td></tr></tbody></table><p>知识点：HTTPS协议是<code>HTTP+SSL</code></p><p>根据上表可知，SSL做数据加密是在表示层，也就是说，HTTPS实际上是建立在SSL之上的HTTP协议，而普通的HTTP协议是建立在TCP协议之上的。所以，当HTTPS访问URL时，由于URL在网络传送过程中最后是处于HTTP协议数据报头中，而HTTP协议位于SSL的上层，所以凡是HTTP协议所负责传输的数据就全部被加密了；但是IP地址并没加密，因为处理IP地址的协议（网络层）位于处理SSL协议（表示层）的下方。</p><p>额，说了这么多，就是要告诉你一个重要的关键点：数据的封装是<code>自下而上</code>的 ！在网络数据处理方面，如果是上层做了检测处理，则需要在同层或下层进行逻辑绕过，这就是攻与防的关键了，偷家（底层）才是硬道理。</p><p>接下来，我们再理解一下代理与VPN。</p><h2 id="3-代理与VPN"><a href="#3-代理与VPN" class="headerlink" title="3.代理与VPN"></a>3.代理与VPN</h2><h3 id="3-1、代理"><a href="#3-1、代理" class="headerlink" title="3.1、代理"></a>3.1、代理</h3><p><strong>代理（proxy）</strong> 也称网络代理，是一种特殊的网络服务，允许一个终端（一般为客户端）通过这个服务与另外一个终端（一般为服务器）进行非直接的连接。</p><p>一个<code>完整的代理请求过程</code>为：客户端首先根据代理服务器所使用的<strong>代理协议</strong>，与<strong>代理服务器</strong>创建连接，接着按照协议请求对目标服务器创建连接、或者获得目标服务器的指定资源。</p><h3 id="3-2、VPN"><a href="#3-2、VPN" class="headerlink" title="3.2、VPN"></a>3.2、VPN</h3><p><strong>VPN</strong>（virtual private network）（<strong>虚拟专用网络</strong> ）是常用于连接中、大型企业或团体间私人网络的通讯方法。它利用<strong>隧道协议（Tunneling Protocol）</strong>来达到发送端认证、消息保密与准确性等功能。</p><h3 id="3-3、代理和VPN的区别"><a href="#3-3、代理和VPN的区别" class="headerlink" title="3.3、代理和VPN的区别"></a>3.3、代理和VPN的区别</h3><p>从各自的定义，我们就能看出VPN的特点是采取<strong>隧道协议</strong>进行数据传输和保护；而代理使用的则是对应的<strong>代理协议</strong>。</p><p>下面是VPN和代理的常用协议：</p><table><thead><tr><th align="left"></th><th align="left">协议名称</th></tr></thead><tbody><tr><td align="left">VPN</td><td align="left">OpvenVPN、IPsec、IKEv2、PPTP、L2TP、WireGuard等</td></tr><tr><td align="left">代理</td><td align="left">HTTP、HTTPS、SOCKS、FTP、RTSP等</td></tr></tbody></table><p>VPN 协议大多是作用在 OSI 的第二层和第三层之间，所以使用 VPN 时，几乎能转发所有的流量。</p><p>而代理协议多作用在应用层，最高层。</p><h2 id="4-安卓代理检测"><a href="#4-安卓代理检测" class="headerlink" title="4.安卓代理检测"></a>4.安卓代理检测</h2><p>知道了代理与VPN的作用后，在APP中，如果开发人员在代码中添加了一些网络层的检测机制，而这些机制恰恰又是针对工作层协议进行的检测，那么只要分析出工作在IOS的哪一层，抢先一步在下层做出应对，那APP在上层无论怎么检测，都没有用。下面将对测试场景进行详细分析。</p><p>抓包的步骤：</p><p>1.在客户端（手机）中设置代理服务器的地址</p><p>2.开启代理服务器（burp）的代理功能</p><p>如果在客户端对代理服务进行过滤，禁止客户端通过代理服务器进行访问Internet，添加如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);</span><br></pre></td></tr></table></figure><p>官方对于<strong>Proxy.NO_PROXY</strong>的描述如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> * A proxy setting that represents a &#123;<span class="meta">@code</span> DIRECT&#125; connection,</span><br><span class="line"> * basically telling the protocol handler not to use any proxying.</span><br><span class="line"> * Used, <span class="keyword">for</span> instance, to create sockets bypassing any other global</span><br><span class="line"> * <span class="function">proxy <span class="title">settings</span> <span class="params">(like SOCKS)</span>:</span></span><br><span class="line"><span class="function"> * &lt;P&gt;</span></span><br><span class="line"><span class="function"> * </span>&#123;<span class="meta">@code</span> Socket s = <span class="keyword">new</span> Socket(Proxy.NO_PROXY);&#125;</span><br><span class="line"> *</span><br><span class="line"> */<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Proxy NO_PROXY = <span class="keyword">new</span> Proxy();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates the proxy that represents a &#123;@code DIRECT&#125; connection.private Proxy() &#123;</span></span><br><span class="line">    type = Type.DIRECT;</span><br><span class="line">    sa = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>NO_PROXY</strong>实际上就是type属性为<strong>DIRECT</strong>的一个Proxy对象，这个type有三种：</p><ul><li>DIRECT</li><li>HTTP</li><li>SOCKS</li></ul><p>所以，Proxy.NO_PROXY的意思是connection的请求是<strong>直连</strong>。</p><p>此时若通过系统进行代理，app对外请求会失效，也就是视觉上看到的卡死状态，就是不让走系统代理。</p><p>安卓手机上设置<strong>系统代理</strong>即是在【设置】-【WLAN】-【修改网络】手动设置代理。</p><p><strong>针对不走系统代理的情况有如下两种应对：</strong></p><p>1、使用基于<code>VPN</code>模式的<code>Postern</code></p><p>2、使用基于<code>iptables</code>的<code>ProxyDroid</code></p><p>对此，我做出了如下一些测试：</p><h3 id="4-1、使用系统代理"><a href="#4-1、使用系统代理" class="headerlink" title="4.1、使用系统代理"></a>4.1、使用系统代理</h3><p>APP关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequestWithHttpURLConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            HttpURLConnection connection = <span class="keyword">null</span>;</span><br><span class="line">            BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                URL url = <span class="keyword">new</span> URL(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">                connection = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);</span><br><span class="line">                connection.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">                InputStream in = connection.getInputStream();</span><br><span class="line"></span><br><span class="line">                reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">                StringBuilder response = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                String line;</span><br><span class="line">                <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    response.append(line);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                showResponse(response.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        reader.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    connection.disconnect();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对<strong>Proxy.NO_PROXY</strong>，先测试一下，系统代理是否真的不能抓包。</p><p>如下图先设置系统代理，burp监听8888，此时打开APP，点击发送请求无任何反应，burp中也抓不到包，说明系统代理被禁了。</p><p><img src="/articles/APP代理检测对抗/20220512144301.png" alt></p><p><img src="/articles/APP代理检测对抗/20220512162425.png" alt></p><h3 id="4-2、使用Postern代理"><a href="#4-2、使用Postern代理" class="headerlink" title="4.2、使用Postern代理"></a>4.2、使用Postern代理</h3><p>用过这款软件的都知道，当开启代理服务后状态栏会有个<code>钥匙</code>的标志，这可能也是基于VPN模式工作的特征</p><p><img src="/articles/APP代理检测对抗/20220512162635.png" alt></p><p>同样的APP，点击请求，此时成功绕过了Proxy.NO_PROXY检测！也说明了VPN协议在HTTP协议的下层。</p><p><img src="/articles/APP代理检测对抗/20220512163122.png" alt></p><h2 id="5-安卓VPN检测"><a href="#5-安卓VPN检测" class="headerlink" title="5.安卓VPN检测"></a>5.安卓VPN检测</h2><p>VPN也是代理的一种，但是由于通讯协议的差异，所以检测代码也不一样。</p><p>当客户端运行<code>VPN虚拟隧道协议</code>时，会在当前节点<code>创建</code>基于eth之上的<code>tun0</code>接口或<code>ppp0</code>接口，所以一旦出现带有明显特征的网络接口名称，就可以认定是使用了VPN协议进行通信。</p><p>下面这段代码的检测方式：出现特征<strong>tun0</strong>或者<strong>ppp0</strong>则退出应用，也就是我们看到的闪退效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">isDeviceInVPN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Enumeration&lt;NetworkInterface&gt; networkInterfaces = NetworkInterface.getNetworkInterfaces();</span><br><span class="line">        <span class="keyword">while</span> (networkInterfaces.hasMoreElements()) &#123;</span><br><span class="line">            String name = networkInterfaces.nextElement().getName();</span><br><span class="line">            <span class="keyword">if</span> (name.equals(<span class="string">"tun0"</span>) || name.equals(<span class="string">"ppp0"</span>)) &#123;</span><br><span class="line">                stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在点击监听中放置isDeviceInVPN()功能，点击即触发，如果检测到了使用了VPN则直接退出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (view.getId() == R.id.send_request)&#123;</span><br><span class="line">        isDeviceInVPN();</span><br><span class="line">        sendRequestWithHttpURLConnection();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1、使用ProxyDroid代理"><a href="#5-1、使用ProxyDroid代理" class="headerlink" title="5.1、使用ProxyDroid代理"></a>5.1、使用ProxyDroid代理</h3><p>当前场景：APP同时开启了代理检测以及VPN检测</p><p>这时使用<strong>iptables</strong>进行数据转发的软件 <strong>ProxyDroid</strong> 进行测试，配置如下图所示：</p><p><img src="/articles/APP代理检测对抗/20220512164343.png" alt></p><p>开启之后，系统状态栏不会出现钥匙的形状，这时再次进行抓包测试。</p><p><img src="/articles/APP代理检测对抗/20220512164629.png" alt></p><p>burp成功获取到了请求，至此代理与VPN的应对方法均已实现。所以，<strong>iptables</strong> 竟然能从OSI的 2、3层下面走吗，下面我们继续分析。</p><h2 id="6-iptables原理"><a href="#6-iptables原理" class="headerlink" title="6.iptables原理"></a>6.iptables原理</h2><p>我们都知道安卓使用的是linux内核，而linux内核提供的防火墙工具是<strong>Netfilter/Iptables</strong>。</p><p><strong>Netfilter</strong>是由linux内核集成的IP数据包过滤系统，其工作在内核内部，而<strong>Iptables</strong>则是让用户定义规则集的表结构。</p><p>也就是，<strong>iptables</strong>是一个命令行工具，位于用户空间，它真正操作的框架实现在<strong>内核</strong>当中。</p><blockquote><p>Netfilter是一个数据包处理模块，它具有<code>网络地址转换</code>、<code>数据包内容修改</code>、<code>数据包过滤</code>等功能。 要使netfilter能够工作，就需要将所有的规则读入内存中。netfilter自己维护一个内存块，在此内存块中有4个表：filter表、NAT表、mangle表和raw表。在每个表中有相应的链，链中存放的是一条条的规则，规则就是过滤防火的语句或者其他功能的语句。也就是说表是链的容器，链是规则的容器。实际上，每个链都只是一个hook函数（钩子函数）而已。</p></blockquote><p><strong>Iptables</strong>主要工作在OSI七层的2.3.4层，好像也没比VPN的工作协议低，反而还有高的，但是测试结果证明，是我想错了，iptables不是由于协议低，而是没有出现<strong>tun0</strong>或者<strong>ppp0</strong>这两个关键的网卡特征，所以成功绕过了VPN的检测。</p><p>基于iptables这个流量转发，我还发现了一个新的名词，叫做“<code>透明代理</code>”，iptables的转发模式就是这种。</p><p>由此，延伸了一个新的代理模式，通过burp进行“透明代理”，网上的教程错综复杂，亲测使用过程如下。</p><h2 id="7-透明代理"><a href="#7-透明代理" class="headerlink" title="7.透明代理"></a>7.透明代理</h2><ul><li>原理：透明代理技术可以让客户端<code>感觉不到代理的存在</code>，用户不需要在浏览器中设置任何代理，只需设置缺省网关即可。在访问外部网络时，客户端的数据包被发送到缺省网关，通过缺省网关的路由，最终到达代理服务器，最后代理服务器运行代理进程，数据实际被重定向到代理服务器的代理端口，即由本地代理服务器向外请求所需数据然后拷贝给客户端。</li></ul><p>接下来我将尝试：结合安卓端的透明代理技术与burp存在的invisible模式</p><h3 id="7-1、使用Burp透明代理"><a href="#7-1、使用Burp透明代理" class="headerlink" title="7.1、使用Burp透明代理"></a>7.1、使用Burp透明代理</h3><p><strong>（1）安卓端设置</strong></p><p>首先在设备上手动进行设置：将所以请求80、443端口的tcp流量进行nat转发到192.168.50.177（burp的监听地址）的对应端口上</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">iptables -t nat -A OUTPUT -p tcp --dport 80 -j DNAT --to  192.168.50.177:80</span><br><span class="line">iptables -t nat -A OUTPUT -p tcp --dport 443 -j DNAT --to  192.168.50.177:443</span><br></pre></td></tr></table></figure><p>查看当前规则是否成功添加</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -L</span><br></pre></td></tr></table></figure><p><img src="/articles/APP代理检测对抗/20220512174024.png" alt></p><p><strong>（2）代理服务器端设置</strong></p><p>添加80和443的端口监听</p><p>在【Binding】中设置端口，选中 【All interfaces】</p><p><img src="/articles/APP代理检测对抗/20220511155619.png" alt></p><p>并对【Request handing】做出如下设置</p><p><img src="/articles/APP代理检测对抗/20220511155224.png" alt></p><p><img src="/articles/APP代理检测对抗/20220511155347.png" alt></p><blockquote><p><strong>Redirect to port</strong> - 如果配置了这个选项，Burp会在每次请求转发到指定的端口，而不必受限于浏览器所请求的目标。</p><p><strong>Force use of SSL</strong> - 如果配置了这个选项，Burp会使用HTTPS在所有向外的连接，即使传入的请求中使用普通的HTTP。您可以使用此选项，在与SSL相关的响应修改选项结合，开展sslstrip般的攻击使用Burp，其中，强制执行HTTPS的应用程序可以降级为普通的HTTP的受害用户的流量在不知不觉中通过BurpProxy代理。</p></blockquote><p>设置之后，Proxy状态如下</p><p><img src="/articles/APP代理检测对抗/20220511155443.png" alt></p><p>此时burp就可对转发到这里的80和443端口的流量进行<strong>透明代理</strong></p><blockquote><p>注意：如果出现443端口被占用，查找进程kill掉即可。</p><p><img src="/articles/APP代理检测对抗/image-20220511154711616.png" alt></p><p><img src="/articles/APP代理检测对抗/image-20220511154455104.png" alt></p><p>以管理员身份运行 cmd 执行如下代码</p><p><img src="/articles/APP代理检测对抗/image-20220511154419965.png" alt></p></blockquote><p>经过测试，burp成功抓取到了请求包。</p><p><strong>这里不禁思考，如果是基于iptables进行的数据转发，那么刚才的ProxyDroid是否也内置了一些路由规则呢？</strong></p><p>查看一下开启ProxyDroid时iptables当下的规则</p><p><img src="/articles/APP代理检测对抗/20220512175635.png" alt></p><p>从图中可以看到共有六条策略，其中最后两条就是我们刚才手动添加的，但并没有看到burp监听的8888端口，8123、8124一定是软件内置的代理转发端口，想要知道具体原理还需要详细分析ProxyDroid的源码。</p><p><strong>血泪避坑</strong>：网上出现了很多教程，最关键的iptables规则写法不一，导致多次测试结果并不成功，如果将安卓终端的80和443端口同时转发到burp上监听的唯一一个端口则会出现连接错误。根据burp官方文档说明为每个端口号设置监听器会更加稳定，也就是要设置两个代理监听。</p><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h2><p>根据不同的代码检测，也会有不同的应对方法，所以，遇到APP出现抓包闪退等问题，先逆向，查看源码，在通信处仔细进行分析，再针对检测代码进行绕过，才是正解。本文提到的并不是固定的处理方法，如果文章有叙述不当，尽请矫正。</p><h2 id="9-参考链接"><a href="#9-参考链接" class="headerlink" title="9.参考链接"></a>9.参考链接</h2><p><a href="https://portswigger.net/burp/documentation/desktop/tools/proxy/options/invisible" target="_blank" rel="noopener">burp invisible官方文档</a></p><p><a href="https://mp.weixin.qq.com/s/u4WwEGFADvRIYFudrMDsRQ" target="_blank" rel="noopener">代理与VPN</a></p><p><a href="https://cloud.tencent.com/developer/article/1619659" target="_blank" rel="noopener">iptables的内核原理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;本文将从网络通信原理浅析在android中出现的一些代理转发检测，这些功能会使我们测试app时出现&lt;strong&gt;抓不到包&lt;
      
    
    </summary>
    
      <category term="安全研究" scheme="https://ya2.top/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>MYSQL事务隔离级别</title>
    <link href="https://ya2.top/articles/MYSQL%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>https://ya2.top/articles/MYSQL事务隔离级别/</id>
    <published>2021-11-29T11:15:00.000Z</published>
    <updated>2022-07-27T16:11:34.033Z</updated>
    
    <content type="html"><![CDATA[<p>事务的隔离级别分为：未提交读(READ UNCOMMITTED)、已提交读(READ COMMITTED)、可重复读(REPEATABLE READ)、串行化(SERIALIZABLE)。</p><blockquote><p>mysql数据库，当且仅当引擎是InnoDB，才支持事务</p></blockquote><ul><li>未提交读 (READ UNCOMMITTED)</li></ul><p>A事务已执行，但未提交；B事务查询到A事务的更新后数据；A事务回滚；—出现脏数据（脏读）</p><ul><li>已提交读 (READ COMMITTED)</li></ul><p>A事务执行更新；B事务查询；A事务又执行更新；B事务再次查询时，前后两次数据不一致；—不可重复读，可以解决脏读</p><ul><li>可重复读 (REPEATABLE READ)</li></ul><p>A事务无论执行多少次，只要不提交，B事务查询值都不变；B事务仅查询B事务开始时那一瞬间的数据快照；—mysql默认的，可以解决脏读 和 不可重复读</p><ul><li>串行化 (SERIALIZABLE)</li></ul><p>不允许读写并发操作，写执行时，读必须等待。—相当于锁表，可以解决 脏读 不可重复读 和 虚读</p><h3 id="查看隔离级别"><a href="#查看隔离级别" class="headerlink" title="查看隔离级别"></a>查看隔离级别</h3><p>全局事务级别： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @@GLOBAL.tx_isolation  或 <span class="keyword">SELECT</span> @@GLOBAL.transaction_isolation</span><br></pre></td></tr></table></figure><p>会话事务级别： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @@SESSION.tx_isolation 或 <span class="keyword">SELECT</span> @@SESSION.transaction_isolation</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%iso%'</span>;</span><br></pre></td></tr></table></figure><h3 id="设置隔离级别"><a href="#设置隔离级别" class="headerlink" title="设置隔离级别"></a>设置隔离级别</h3><p>临时有效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> [<span class="keyword">SESSION</span> | <span class="keyword">GLOBAL</span>] <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> &#123;<span class="keyword">READ</span> UNCOMMITTED | <span class="keyword">READ</span> COMMITTED | REPEATABLE <span class="keyword">READ</span> | <span class="keyword">SERIALIZABLE</span>&#125;</span><br></pre></td></tr></table></figure><p>持久有效</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">transaction-isolation</span> = REPEATABLE-READ</span><br><span class="line"><span class="attr">transaction-read-only</span> = <span class="literal">OFF</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;事务的隔离级别分为：未提交读(READ UNCOMMITTED)、已提交读(READ COMMITTED)、可重复读(REPEATABLE READ)、串行化(SERIALIZABLE)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mysql数据库，当且仅当引擎是InnoDB
      
    
    </summary>
    
      <category term="数据库" scheme="https://ya2.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建Socks5代理</title>
    <link href="https://ya2.top/articles/%E6%90%AD%E5%BB%BASocks5%E4%BB%A3%E7%90%86/"/>
    <id>https://ya2.top/articles/搭建Socks5代理/</id>
    <published>2021-06-05T15:29:32.000Z</published>
    <updated>2022-07-27T16:11:36.204Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做<a href="https://app.ya2.top/model/?from=article" target="_blank" rel="noopener">3D模型下载</a>时发现本地可以运行的代码放到服务器就跑不动了，抓包发现是服务器端无法访问三方接口，所以想到使用代理访问，同时记录下整个代理搭建过程。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li>下载： <a href="http://sourceforge.net/projects/ss5/files/" target="_blank" rel="noopener">http://sourceforge.net/projects/ss5/files/</a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf ss5-3.8.9-8.tar.gz</span><br><span class="line">cd ss5-3.8.9-8</span><br><span class="line">./configure //默认是1080端口，如果想改端口的话，./configure --with-defaultport=10900</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li></ul><p>默认安装目录在：/etc/opt/ss5</p><p>若出现报错：</p><blockquote><p>configure: error: <strong>* Some of the headers weren’t found *</strong></p></blockquote><p>则 需要安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install pam-devel</span><br></pre></td></tr></table></figure><p>如果出现报错：</p><blockquote><p>SS5OpenLdap.c:29:18: fatal error: ldap.h: No such file or directory</p></blockquote><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openldap-devel</span><br></pre></td></tr></table></figure><ul><li>修改配置</li></ul><p>/etc/opt/ss5/ss5.conf内容全部删除，仅添加内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auth 0.0.0.0/0 - u</span><br><span class="line">permit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -</span><br></pre></td></tr></table></figure><ul><li>添加账户</li></ul><p>/etc/opt/ss5/ss5.passwd中添加用户名与密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss5 pass</span><br></pre></td></tr></table></figure><ul><li>启动socks5</li></ul><p>默认情况ss5文件没有执行权限，如果觉得使用sh来启动麻烦，那么按如下方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x /etc/rc.d/init.d/ss5</span><br><span class="line">chkconfig --add ss5 //可选</span><br><span class="line">chkconfig ss5 on //可选</span><br><span class="line">service ss5 start</span><br></pre></td></tr></table></figure><p>注意：如果你服务器开了防火墙不要忘了关掉，或者iptables里做下策略</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>通用规则: curl -x [schema]://[user]:[pass]@[host]:[post] [URI] (-v 查询执行过程)</p><ul><li>crul 版本 &gt;= 7.21.7 时使用命令:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -x socks5h://localhost:10800 http://www.google.com/</span><br></pre></td></tr></table></figure><ul><li>crul 版本 &gt;= 7.18.0 时使用命令:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --socks5-hostname localhost:10800 http://www.google.com/</span><br></pre></td></tr></table></figure><p>许多工具在内部使用libcurl，或者在安装程序脚本中使用curl命令。如果很难修改命令行本身，可以使用环境变量设置代理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env ALL_PROXY=socks5h://localhost:10800 PROGRAM [OPTION]...</span><br></pre></td></tr></table></figure><p>如果你想覆盖系统代理设置，你可能还需要设置两个额外的变量:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env http_proxy=socks5h://localhost:10800 HTTPS_PROXY=socks5h://localhost:10800 ALL_PROXY=socks5h://localhost:10800 PROGRAM [OPTION]...</span><br></pre></td></tr></table></figure><p>注意: <code>http_proxy</code>是<strong>小</strong>写的，其他两个是<strong>大</strong>写的。</p><p>在代码中使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">http_post</span><span class="params">($sUrl, $aData, $aHeader = null, $proxy = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $sUrl);</span><br><span class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">false</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class="keyword">false</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_TIMEOUT, <span class="number">10</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_USERAGENT, $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]);</span><br><span class="line"><span class="keyword">if</span> ($proxy) &#123;</span><br><span class="line">curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5); <span class="comment">// Sockes5代理</span></span><br><span class="line">curl_setopt($ch, CURLOPT_PROXY, HOST);    <span class="comment">// HOST：代理服务器</span></span><br><span class="line">curl_setopt($ch, CURLOPT_PROXYPORT, PORT);   <span class="comment">// PORT: 代理端口</span></span><br><span class="line">curl_setopt($ch, CURLOPT_PROXYUSERPWD, <span class="string">'USER:PASS'</span>);   <span class="comment">// USER: 账号  PASS:密码 (注意账号密码之间有一个 ':' )</span></span><br><span class="line">&#125;</span><br><span class="line">!is_null($aHeader) &amp;&amp; curl_setopt($ch, CURLOPT_HTTPHEADER, $aHeader);</span><br><span class="line">curl_setopt($ch, CURLOPT_POST, <span class="keyword">true</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_POSTFIELDS, $aData);</span><br><span class="line">$sResult = curl_exec($ch);</span><br><span class="line"><span class="keyword">if</span> ($sError = curl_error($ch)) &#123;</span><br><span class="line">response(curl_errno($ch), $sError);</span><br><span class="line">&#125;</span><br><span class="line">curl_close($ch);</span><br><span class="line"><span class="keyword">return</span> $sResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做&lt;a href=&quot;https://app.ya2.top/model/?from=article&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;3D模型下载&lt;/a&gt;时发现本地可以运行的代码放到服务器就跑不动了，抓包发现是服务器端无法访问三方接口，所
      
    
    </summary>
    
      <category term="服务器运维" scheme="https://ya2.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>vmware文件夹共享</title>
    <link href="https://ya2.top/articles/vmware%E6%96%87%E4%BB%B6%E5%A4%B9%E5%85%B1%E4%BA%AB/"/>
    <id>https://ya2.top/articles/vmware文件夹共享/</id>
    <published>2021-02-20T15:17:39.000Z</published>
    <updated>2022-07-27T16:11:56.499Z</updated>
    
    <content type="html"><![CDATA[<p>1.虚拟机设置 -&gt; 选项 -&gt; 共享文件夹 -&gt; 总是启用 -&gt; 选择宿主机要映射的目录</p><blockquote><p>注意，虚拟机如果没有安装vmware-tools， 文件夹共享 将不可点击，需要先安装vmware-tools后才可以选择启用文件共享。<a href="https://docs.vmware.com/cn/VMware-Workstation-Player-for-Windows/16.0/com.vmware.player.win.using.doc/GUID-08BB9465-D40A-4E16-9E15-8C016CC8166F.html" target="_blank" rel="noopener">安装方法</a></p></blockquote><p><img src="/articles/vmware文件夹共享/%E5%BC%80%E5%90%AF%E6%96%87%E4%BB%B6%E5%A4%B9%E5%85%B1%E4%BA%AB.png" alt></p><p>接下来切换到linux</p><ol start="2"><li>安装vm-tools</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y open-vm-tools open-vm-tools-desktop</span><br></pre></td></tr></table></figure><p>安装完后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmware-hgfsclient</span><br></pre></td></tr></table></figure><p>我们先创建一个文件夹，再映射vmware共享文件夹到这个目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/</span><br><span class="line">vmhgfs-fuse .host:/ /data/ -o allow_other -o nonempty</span><br></pre></td></tr></table></figure><p>其中 /data/vm/ 就是linux和主机共享的目录，vm就是我们第一步文件共享时的建立的名称</p><p>这时候我们就可以像正常linux下文件一样去操作 /data/vm 下的文件</p><p><img src="/articles/vmware文件夹共享/%E6%95%88%E6%9E%9C.png" alt></p><ol start="3"><li>重启失效问题</li></ol><p>linux重启后会导致挂载失效，需要重新挂载 所以我们写到开机自启脚本里</p><p>给执行权限 centos7 默认 /etc/rc.d/rc.local 无执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><p>打开/etc/rc.d/rc.local 在最下面加入挂载命令</p><p>自动挂载vmware宿主机的共享文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmhgfs-fuse .host:/ /data/ -o allow_other -o nonempty</span><br></pre></td></tr></table></figure><ol start="4"><li>将目录软连到web目录 (可选)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /data/vm/ /data/wwwroot</span><br></pre></td></tr></table></figure><p>然后创建站点，解析hosts</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.虚拟机设置 -&amp;gt; 选项 -&amp;gt; 共享文件夹 -&amp;gt; 总是启用 -&amp;gt; 选择宿主机要映射的目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，虚拟机如果没有安装vmware-tools， 文件夹共享 将不可点击，需要先安装vmware-tools后才可以
      
    
    </summary>
    
      <category term="服务器运维" scheme="https://ya2.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>Laravel 启动流程</title>
    <link href="https://ya2.top/articles/Laravel%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>https://ya2.top/articles/Laravel启动流程/</id>
    <published>2021-02-03T13:54:46.000Z</published>
    <updated>2022-11-02T14:04:52.229Z</updated>
    
    <content type="html"><![CDATA[<style> .posts-expand .post-body img {    margin: 0 auto !important;}</style><h2 id="0-Laravel生命周期"><a href="#0-Laravel生命周期" class="headerlink" title="0. Laravel生命周期"></a>0. Laravel生命周期</h2><p>说明Laravel生命周期前，先简单回忆一下PHP的生命周期。</p><p>当我们请求一个PHP文件时，PHP为了完成这次请求，会发生5个阶段的生命周期切换。</p><p><img src="/articles/Laravel启动流程/PHP%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="PHP生命周期"></p><p><strong>MINIT：</strong> 模块初始化，即调用 php.ini 中指明的扩展的初始化函数进行初始化工作，如 mysql 扩展。<br><strong>RINIT：</strong> 请求初始化，即初始化为执行本次脚本所需要的变量名称和变量值内容的符号表，如 $_SESSION变量。<br><strong>HANDLE：</strong> 执行该PHP脚本。<br><strong>RSHUTDOWN：</strong> 请求处理完成(Request Shutdown),按顺序调用各个模块的 RSHUTDOWN 方法，对每个变量调用 unset函数，如 unset $_SESSION 变量。<br><strong>MSHUTDOWN：</strong> 关闭模块(Module Shutdown),PHP调用每个扩展的 MSHUTDOWN 方法，这是各个模块最后一次释放内存的机会, 这意味着没有下一个请求了。</p><p><code>小结： PHP是一种脚本语言，所有的变量只会在这一次请求中生效，下次请求之时已被重置，而不像Java静态变量拥有全局作用。</code></p><p>Laravel 的生命周期从public\index.php开始，从public\index.php结束。具体来讲可以分成4个步骤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 文件载入composer生成的自动加载设置，包括所有你 composer require的依赖。</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2. 生成容器Container，Application实例，并向容器注册核心组件（HttpKernel，ConsoleKernel ，ExceptionHandler）</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">$app = <span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3.处理请求，生成并发送响应（毫不夸张的说，你99%的代码都运行在这个小小的handle 方法里面）</span></span><br><span class="line"><span class="comment"> **/</span> </span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line">$response-&gt;send();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 4.请求结束，进行回调（还记得可终止中间件吗？没错，就是在这里回调的）</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">$kernel-&gt;terminate($request, $response);</span><br></pre></td></tr></table></figure><p>过程如下：</p><p><img src="/articles/Laravel启动流程/Laravel%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="Laravel生命周期"></p><h2 id="1-程序启动准备"><a href="#1-程序启动准备" class="headerlink" title="1. 程序启动准备"></a>1. 程序启动准备</h2><p>程序入口在 index.php 中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line">$app = <span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;<span class="comment"># 获取服务容器实例</span></span><br><span class="line"></span><br><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$response-&gt;send();</span><br><span class="line"></span><br><span class="line">$kernel-&gt;terminate($request, $response);</span><br></pre></td></tr></table></figure><p><strong>创建服务容器实例</strong></p><p>服务容器的创建在 <code>bootstrap\app.php</code> 中进行.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$app = <span class="keyword">new</span> Illuminate\Foundation\Application(</span><br><span class="line">    realpath(<span class="keyword">__DIR__</span>.<span class="string">'/../'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="1-1-容器基础配置"><a href="#1-1-容器基础配置" class="headerlink" title="1.1 容器基础配置"></a>1.1 容器基础配置</h3><p>容器 <code>Application</code> 的构造函数:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($basePath = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($basePath) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setBasePath($basePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerBaseBindings();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerBaseServiceProviders();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerCoreContainerAliases();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数 主要完成以下基本配置:</p><ul><li>目录路径(绑定到容器中, 并提供类方法获取子目录)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setBasePath</span><span class="params">($basePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;basePath = rtrim($basePath, <span class="string">'\/'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;bindPathsInContainer();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bindPathsInContainer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path'</span>, <span class="keyword">$this</span>-&gt;path());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.base'</span>, <span class="keyword">$this</span>-&gt;basePath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.lang'</span>, <span class="keyword">$this</span>-&gt;langPath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.config'</span>, <span class="keyword">$this</span>-&gt;configPath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.public'</span>, <span class="keyword">$this</span>-&gt;publicPath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.storage'</span>, <span class="keyword">$this</span>-&gt;storagePath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.database'</span>, <span class="keyword">$this</span>-&gt;databasePath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.resources'</span>, <span class="keyword">$this</span>-&gt;resourcePath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.bootstrap'</span>, <span class="keyword">$this</span>-&gt;bootstrapPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>绑定容器自身</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerBaseBindings</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>::setInstance(<span class="keyword">$this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'app'</span>, <span class="keyword">$this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(Container::class, <span class="keyword">$this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(PackageManifest::class, <span class="keyword">new</span> PackageManifest(</span><br><span class="line">        <span class="keyword">new</span> Filesystem, <span class="keyword">$this</span>-&gt;basePath(), <span class="keyword">$this</span>-&gt;getCachedPackagesPath()</span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基础服务注册( Event, Log, Route)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerBaseServiceProviders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> EventServiceProvider(<span class="keyword">$this</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> LogServiceProvider(<span class="keyword">$this</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> RoutingServiceProvider(<span class="keyword">$this</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>别名注册</li></ul><p>多个接口名 对应一个简短别名, 后续在注册服务时只需绑定到别名上即可 (而不必绑定到具体接口名)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerCoreContainerAliases</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ([</span><br><span class="line">        <span class="string">'app'</span>                  =&gt; [\Illuminate\Foundation\Application::class, \Illuminate\Contracts\Container\Container::class, \Illuminate\Contracts\Foundation\Application::class,  \Psr\Container\ContainerInterface::class],</span><br><span class="line">        <span class="string">'auth'</span>                 =&gt; [\Illuminate\Auth\AuthManager::class, \Illuminate\Contracts\Auth\Factory::class],</span><br><span class="line">        <span class="string">'auth.driver'</span>          =&gt; [\Illuminate\Contracts\Auth\Guard::class],</span><br><span class="line">        <span class="string">'blade.compiler'</span>       =&gt; [\Illuminate\View\Compilers\BladeCompiler::class],</span><br><span class="line">        <span class="string">'cache'</span>                =&gt; [\Illuminate\Cache\CacheManager::class, \Illuminate\Contracts\Cache\Factory::class],</span><br><span class="line">        <span class="string">'cache.store'</span>          =&gt; [\Illuminate\Cache\Repository::class, \Illuminate\Contracts\Cache\Repository::class],</span><br><span class="line">        <span class="string">'config'</span>               =&gt; [\Illuminate\Config\Repository::class, \Illuminate\Contracts\Config\Repository::class],</span><br><span class="line">        <span class="string">'cookie'</span>               =&gt; [\Illuminate\Cookie\CookieJar::class, \Illuminate\Contracts\Cookie\Factory::class, \Illuminate\Contracts\Cookie\QueueingFactory::class],</span><br><span class="line">        <span class="string">'encrypter'</span>            =&gt; [\Illuminate\Encryption\Encrypter::class, \Illuminate\Contracts\Encryption\Encrypter::class],</span><br><span class="line">        <span class="string">'db'</span>                   =&gt; [\Illuminate\Database\DatabaseManager::class],</span><br><span class="line">        <span class="string">'db.connection'</span>        =&gt; [\Illuminate\Database\Connection::class, \Illuminate\Database\ConnectionInterface::class],</span><br><span class="line">        <span class="string">'events'</span>               =&gt; [\Illuminate\Events\Dispatcher::class, \Illuminate\Contracts\Events\Dispatcher::class],</span><br><span class="line">        <span class="string">'files'</span>                =&gt; [\Illuminate\Filesystem\Filesystem::class],</span><br><span class="line">        <span class="string">'filesystem'</span>           =&gt; [\Illuminate\Filesystem\FilesystemManager::class, \Illuminate\Contracts\Filesystem\Factory::class],</span><br><span class="line">        <span class="string">'filesystem.disk'</span>      =&gt; [\Illuminate\Contracts\Filesystem\Filesystem::class],</span><br><span class="line">        <span class="string">'filesystem.cloud'</span>     =&gt; [\Illuminate\Contracts\Filesystem\Cloud::class],</span><br><span class="line">        <span class="string">'hash'</span>                 =&gt; [\Illuminate\Contracts\Hashing\Hasher::class],</span><br><span class="line">        <span class="string">'translator'</span>           =&gt; [\Illuminate\Translation\Translator::class, \Illuminate\Contracts\Translation\Translator::class],</span><br><span class="line">        <span class="string">'log'</span>                  =&gt; [\Illuminate\Log\Writer::class, \Illuminate\Contracts\Logging\Log::class, \Psr\Log\LoggerInterface::class],</span><br><span class="line">        <span class="string">'mailer'</span>               =&gt; [\Illuminate\Mail\Mailer::class, \Illuminate\Contracts\Mail\Mailer::class, \Illuminate\Contracts\Mail\MailQueue::class],</span><br><span class="line">        <span class="string">'auth.password'</span>        =&gt; [\Illuminate\Auth\Passwords\PasswordBrokerManager::class, \Illuminate\Contracts\Auth\PasswordBrokerFactory::class],</span><br><span class="line">        <span class="string">'auth.password.broker'</span> =&gt; [\Illuminate\Auth\Passwords\PasswordBroker::class, \Illuminate\Contracts\Auth\PasswordBroker::class],</span><br><span class="line">        <span class="string">'queue'</span>                =&gt; [\Illuminate\Queue\QueueManager::class, \Illuminate\Contracts\Queue\Factory::class, \Illuminate\Contracts\Queue\Monitor::class],</span><br><span class="line">        <span class="string">'queue.connection'</span>     =&gt; [\Illuminate\Contracts\Queue\Queue::class],</span><br><span class="line">        <span class="string">'queue.failer'</span>         =&gt; [\Illuminate\Queue\Failed\FailedJobProviderInterface::class],</span><br><span class="line">        <span class="string">'redirect'</span>             =&gt; [\Illuminate\Routing\Redirector::class],</span><br><span class="line">        <span class="string">'redis'</span>                =&gt; [\Illuminate\Redis\RedisManager::class, \Illuminate\Contracts\Redis\Factory::class],</span><br><span class="line">        <span class="string">'request'</span>              =&gt; [\Illuminate\Http\Request::class, \Symfony\Component\HttpFoundation\Request::class],</span><br><span class="line">        <span class="string">'router'</span>               =&gt; [\Illuminate\Routing\Router::class, \Illuminate\Contracts\Routing\Registrar::class, \Illuminate\Contracts\Routing\BindingRegistrar::class],</span><br><span class="line">        <span class="string">'session'</span>              =&gt; [\Illuminate\Session\SessionManager::class],</span><br><span class="line">        <span class="string">'session.store'</span>        =&gt; [\Illuminate\Session\Store::class, \Illuminate\Contracts\Session\Session::class],</span><br><span class="line">        <span class="string">'url'</span>                  =&gt; [\Illuminate\Routing\UrlGenerator::class, \Illuminate\Contracts\Routing\UrlGenerator::class],</span><br><span class="line">        <span class="string">'validator'</span>            =&gt; [\Illuminate\Validation\Factory::class, \Illuminate\Contracts\Validation\Factory::class],</span><br><span class="line">        <span class="string">'view'</span>                 =&gt; [\Illuminate\View\Factory::class, \Illuminate\Contracts\View\Factory::class],</span><br><span class="line">    ] <span class="keyword">as</span> $key =&gt; $aliases) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($aliases <span class="keyword">as</span> $alias) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;alias($key, $alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-核心类绑定"><a href="#1-2-核心类绑定" class="headerlink" title="1.2 核心类绑定"></a>1.2 核心类绑定</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Http\Kernel::class,</span><br><span class="line">    App\Http\Kernel::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Console\Kernel::class,</span><br><span class="line">    App\Console\Kernel::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Debug\ExceptionHandler::class,</span><br><span class="line">    App\Exceptions\Handler::class</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>绑定重要接口:</strong></p><ul><li>Http 核心类</li><li>命令行 核心类</li><li>异常处理类</li></ul><h3 id="1-3-实例化Http核心类"><a href="#1-3-实例化Http核心类" class="headerlink" title="1.3 实例化Http核心类"></a>1.3 实例化Http核心类</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br></pre></td></tr></table></figure><p>Http 核心类的构造函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Application $app, Router $router)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app = $app;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;router = $router;</span><br><span class="line"></span><br><span class="line">    $router-&gt;middlewarePriority = <span class="keyword">$this</span>-&gt;middlewarePriority;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;middlewareGroups <span class="keyword">as</span> $key =&gt; $middleware) &#123;</span><br><span class="line">        $router-&gt;middlewareGroup($key, $middleware);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;routeMiddleware <span class="keyword">as</span> $key =&gt; $middleware) &#123;</span><br><span class="line">        $router-&gt;aliasMiddleware($key, $middleware);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述过程主要做的事是将中间件赋值给路由</p><ul><li>中间件顺序优先级列表</li><li>中间件组</li><li>中间件别名</li></ul><p><strong>核心类</strong> <code>app/Http/Kernel.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">Kernel</span> <span class="title">as</span> <span class="title">HttpKernel</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kernel</span> <span class="keyword">extends</span> <span class="title">HttpKernel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 全局中间件，最先调用</span></span><br><span class="line">    <span class="keyword">protected</span> $middleware = [</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测是否应用是否进入『维护模式』</span></span><br><span class="line">        <span class="comment">// 见：https://d.laravel-china.org/docs/5.5/configuration#maintenance-mode</span></span><br><span class="line">        \Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测请求的数据是否过大</span></span><br><span class="line">        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对提交的请求参数进行 PHP 函数 `trim()` 处理</span></span><br><span class="line">        \App\Http\Middleware\TrimStrings::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将提交请求参数中空子串转换为 null</span></span><br><span class="line">        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修正代理服务器后的服务器参数</span></span><br><span class="line">        \App\Http\Middleware\TrustProxies::class,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义中间件组</span></span><br><span class="line">    <span class="keyword">protected</span> $middlewareGroups = [</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Web 中间件组，应用于 routes/web.php 路由文件</span></span><br><span class="line">        <span class="string">'web'</span> =&gt; [</span><br><span class="line">            <span class="comment">// Cookie 加密解密</span></span><br><span class="line">            \App\Http\Middleware\EncryptCookies::class,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将 Cookie 添加到响应中</span></span><br><span class="line">            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启会话</span></span><br><span class="line">            \Illuminate\Session\Middleware\StartSession::class,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 认证用户，此中间件以后 Auth 类才能生效</span></span><br><span class="line">            <span class="comment">// 见：https://d.laravel-china.org/docs/5.5/authentication</span></span><br><span class="line">            \Illuminate\Session\Middleware\AuthenticateSession::class,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将系统的错误数据注入到视图变量 $errors 中</span></span><br><span class="line">            \Illuminate\View\Middleware\ShareErrorsFromSession::class,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检验 CSRF ，防止跨站请求伪造的安全威胁</span></span><br><span class="line">            <span class="comment">// 见：https://d.laravel-china.org/docs/5.5/csrf</span></span><br><span class="line">            \App\Http\Middleware\VerifyCsrfToken::class,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理路由绑定</span></span><br><span class="line">            <span class="comment">// 见：https://d.laravel-china.org/docs/5.5/routing#route-model-binding</span></span><br><span class="line">            \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// API 中间件组，应用于 routes/api.php 路由文件</span></span><br><span class="line">        <span class="string">'api'</span> =&gt; [</span><br><span class="line">            <span class="comment">// 使用别名来调用中间件</span></span><br><span class="line">            <span class="comment">// 请见：https://d.laravel-china.org/docs/5.5/middleware#为路由分配中间件</span></span><br><span class="line">            <span class="string">'throttle:60,1'</span>,</span><br><span class="line">            <span class="string">'bindings'</span>,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中间件别名设置，允许你使用别名调用中间件，例如上面的 api 中间件组调用</span></span><br><span class="line">    <span class="keyword">protected</span> $routeMiddleware = [</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只有登录用户才能访问，我们在控制器的构造方法中大量使用</span></span><br><span class="line">        <span class="string">'auth'</span> =&gt; \Illuminate\Auth\Middleware\Authenticate::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HTTP Basic Auth 认证</span></span><br><span class="line">        <span class="string">'auth.basic'</span> =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理路由绑定</span></span><br><span class="line">        <span class="comment">// 见：https://d.laravel-china.org/docs/5.5/routing#route-model-binding</span></span><br><span class="line">        <span class="string">'bindings'</span> =&gt; \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户授权功能</span></span><br><span class="line">        <span class="string">'can'</span> =&gt; \Illuminate\Auth\Middleware\Authorize::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只有游客才能访问，在 register 和 login 请求中使用，只有未登录用户才能访问这些页面</span></span><br><span class="line">        <span class="string">'guest'</span> =&gt; \App\Http\Middleware\RedirectIfAuthenticated::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问节流，类似于 『1 分钟只能请求 10 次』的需求，一般在 API 中使用</span></span><br><span class="line">        <span class="string">'throttle'</span> =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-请求实例化"><a href="#2-请求实例化" class="headerlink" title="2. 请求实例化"></a>2. 请求实例化</h2><blockquote><p>以处理 Http 请求为例</p></blockquote><p><code>index.php</code> 入口文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>请求是通过 <code>Illuminate\Http\Request::capture()</code> 实例化的, 主要是将请求信息以对象形式表现出来</p><h2 id="3-请求处理"><a href="#3-请求处理" class="headerlink" title="3.请求处理"></a>3.请求处理</h2><p><strong>入口文件:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>$kernel-&gt;handle(...)</code> <strong>处理请求过程</strong></p><p><code>Illuminate\Foundation\Http\Kernel</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $request-&gt;enableHttpMethodParameterOverride();</span><br><span class="line"></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;sendRequestThroughRouter($request);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;reportException($e);</span><br><span class="line"></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;renderException($request, $e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable $e) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;reportException($e = <span class="keyword">new</span> FatalThrowableError($e));</span><br><span class="line"></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;renderException($request, $e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app[<span class="string">'events'</span>]-&gt;dispatch(</span><br><span class="line">        <span class="keyword">new</span> Events\RequestHandled($request, $response)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">sendRequestThroughRouter</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</span><br><span class="line"></span><br><span class="line">    Facade::clearResolvedInstance(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;bootstrap();<span class="comment"># 核心类初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;app))</span><br><span class="line">        -&gt;send($request)</span><br><span class="line">        -&gt;through(<span class="keyword">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class="keyword">$this</span>-&gt;middleware)</span><br><span class="line">        -&gt;then(<span class="keyword">$this</span>-&gt;dispatchToRouter());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRouter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;router-&gt;dispatch($request);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际处理请求逻辑主要在 <code>sendRequestThroughRouter</code> 方法中, 它主要做了:</p><ul><li><p>核心类的初始化</p></li><li><p>经由中间件过滤后将请求最终交由 <code>Router</code> 处理</p></li></ul><blockquote><p>对于 Http 请求处理, 中间件包括:<br>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $middleware = [</span><br><span class="line"></span><br><span class="line">   \Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,</span><br><span class="line"></span><br><span class="line">   \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,</span><br><span class="line"></span><br><span class="line">    \App\Http\Middleware\TrimStrings::class,</span><br><span class="line"></span><br><span class="line">    \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,</span><br><span class="line"></span><br><span class="line">   \App\Http\Middleware\TrustProxies::class,</span><br><span class="line"></span><br><span class="line">];</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>该中间件数组定义在 Http 核心类中, 同时在核心类的构造函数中传递给 Router 类</p></blockquote><h3 id="3-1-请求处理环境初始化"><a href="#3-1-请求处理环境初始化" class="headerlink" title="3.1 请求处理环境初始化"></a>3.1 请求处理环境初始化</h3><p><strong>核心类的初始化</strong> <code>bootstrap()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $bootstrappers = [</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\LoadEnvironmentVariables::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\LoadConfiguration::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\HandleExceptions::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\RegisterFacades::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\RegisterProviders::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\BootProviders::class,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;app-&gt;hasBeenBootstrapped()) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;bootstrapWith(<span class="keyword">$this</span>-&gt;bootstrappers());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrappers</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;bootstrappers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务容器 <code>Application</code> 类中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrapWith</span><span class="params">(array $bootstrappers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;hasBeenBootstrapped = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($bootstrappers <span class="keyword">as</span> $bootstrapper) &#123;</span><br><span class="line">        <span class="keyword">$this</span>[<span class="string">'events'</span>]-&gt;fire(<span class="string">'bootstrapping: '</span>.$bootstrapper, [<span class="keyword">$this</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;make($bootstrapper)-&gt;bootstrap(<span class="keyword">$this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>[<span class="string">'events'</span>]-&gt;fire(<span class="string">'bootstrapped: '</span>.$bootstrapper, [<span class="keyword">$this</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该步骤主要是主要是对核心类中定义的 <code>$bootstrappers</code> 数组元素(引导类)初始化.</p><blockquote><p>bootstrap 过程具体是在服务容器来中进行, 由核心类调用并传入待初始化的类</p></blockquote><p>Http 核心类默认包含以下 6 个启动服务:</p><ul><li>环境监测  <code>\Illuminate\Foundation\Bootstrap\LoadEnvironmentVariables::class</code></li></ul><p>从 <code>.env</code> 文件中解析环境变量到 <code>getevn()</code>, <code>$_ENV</code>, <code>$_SERVER</code>, 依赖 <code>vlucas/phpdotenv</code> 扩展包</p><ul><li>配置加载 <code>\Illuminate\Foundation\Bootstrap\LoadConfiguration::class</code></li></ul><p>载入 <code>config</code> 目录下所有 php 配置文件, 并将生成的配置存储类绑定到服务容器 <code>$app[&#39;config&#39;]</code></p><p>同时配置时区及 多字节格式(utf8)</p><ul><li>异常处理 <code>\Illuminate\Foundation\Bootstrap\HandleExceptions::class</code></li></ul><p>报告所有错误 <code>error_report(E_ALL)</code></p><p>提供对未捕获的异常, 错误的全局处理 <code>set_error_handler</code>, <code>set_exception_handler</code>, <code>register_shutdown_function</code></p><ul><li>外观注册 <code>\Illuminate\Foundation\Bootstrap\RegisterFacades::class</code></li></ul><p>从 <code>app.aliases</code> 中读取外观配置数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'aliases'</span> =&gt; [</span><br><span class="line"></span><br><span class="line">        <span class="string">'App'</span> =&gt; Illuminate\Support\Facades\App::class,</span><br><span class="line">        <span class="string">'Artisan'</span> =&gt; Illuminate\Support\Facades\Artisan::class,</span><br><span class="line">        <span class="string">'Auth'</span> =&gt; Illuminate\Support\Facades\Auth::class,</span><br><span class="line">        <span class="string">'Blade'</span> =&gt; Illuminate\Support\Facades\Blade::class,</span><br><span class="line">        <span class="string">'Broadcast'</span> =&gt; Illuminate\Support\Facades\Broadcast::class,</span><br><span class="line">        <span class="string">'Bus'</span> =&gt; Illuminate\Support\Facades\Bus::class,</span><br><span class="line">        <span class="string">'Cache'</span> =&gt; Illuminate\Support\Facades\Cache::class,</span><br><span class="line">        <span class="string">'Config'</span> =&gt; Illuminate\Support\Facades\Config::class,</span><br><span class="line">        <span class="string">'Cookie'</span> =&gt; Illuminate\Support\Facades\Cookie::class,</span><br><span class="line">        <span class="string">'Crypt'</span> =&gt; Illuminate\Support\Facades\Crypt::class,</span><br><span class="line">        <span class="string">'DB'</span> =&gt; Illuminate\Support\Facades\DB::class,</span><br><span class="line">        <span class="string">'Eloquent'</span> =&gt; Illuminate\Database\Eloquent\Model::class,</span><br><span class="line">        <span class="string">'Event'</span> =&gt; Illuminate\Support\Facades\Event::class,</span><br><span class="line">        <span class="string">'File'</span> =&gt; Illuminate\Support\Facades\File::class,</span><br><span class="line">        <span class="string">'Gate'</span> =&gt; Illuminate\Support\Facades\Gate::class,</span><br><span class="line">        <span class="string">'Hash'</span> =&gt; Illuminate\Support\Facades\Hash::class,</span><br><span class="line">        <span class="string">'Lang'</span> =&gt; Illuminate\Support\Facades\Lang::class,</span><br><span class="line">        <span class="string">'Log'</span> =&gt; Illuminate\Support\Facades\Log::class,</span><br><span class="line">        <span class="string">'Mail'</span> =&gt; Illuminate\Support\Facades\Mail::class,</span><br><span class="line">        <span class="string">'Notification'</span> =&gt; Illuminate\Support\Facades\Notification::class,</span><br><span class="line">        <span class="string">'Password'</span> =&gt; Illuminate\Support\Facades\Password::class,</span><br><span class="line">        <span class="string">'Queue'</span> =&gt; Illuminate\Support\Facades\Queue::class,</span><br><span class="line">        <span class="string">'Redirect'</span> =&gt; Illuminate\Support\Facades\Redirect::class,</span><br><span class="line">        <span class="string">'Redis'</span> =&gt; Illuminate\Support\Facades\Redis::class,</span><br><span class="line">        <span class="string">'Request'</span> =&gt; Illuminate\Support\Facades\Request::class,</span><br><span class="line">        <span class="string">'Response'</span> =&gt; Illuminate\Support\Facades\Response::class,</span><br><span class="line">        <span class="string">'Route'</span> =&gt; Illuminate\Support\Facades\Route::class,</span><br><span class="line">        <span class="string">'Schema'</span> =&gt; Illuminate\Support\Facades\Schema::class,</span><br><span class="line">        <span class="string">'Session'</span> =&gt; Illuminate\Support\Facades\Session::class,</span><br><span class="line">        <span class="string">'Storage'</span> =&gt; Illuminate\Support\Facades\Storage::class,</span><br><span class="line">        <span class="string">'URL'</span> =&gt; Illuminate\Support\Facades\URL::class,</span><br><span class="line">        <span class="string">'Validator'</span> =&gt; Illuminate\Support\Facades\Validator::class,</span><br><span class="line">        <span class="string">'View'</span> =&gt; Illuminate\Support\Facades\View::class,</span><br><span class="line"></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>使用 <code>spl_autoload_register(...)</code> 处理类加载, 配合 <code>class_alias()</code> 提供类的别名调用</p><p>Facade<code>外观类基类依赖</code>__callStatic` 调用方法( 使用服务容器实例化对应类)</p><ul><li>服务提供者注册 <code>\Illuminate\Foundation\Bootstrap\RegisterProviders::class</code></li></ul><p>从 <code>app.providers</code> 中读取所有服务提供者</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Laravel Framework Service Providers...</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Illuminate\Auth\AuthServiceProvider::class,</span><br><span class="line">        Illuminate\Broadcasting\BroadcastServiceProvider::class,</span><br><span class="line">        Illuminate\Bus\BusServiceProvider::class,</span><br><span class="line">        Illuminate\Cache\CacheServiceProvider::class,</span><br><span class="line">        Illuminate\Foundation\Providers\ConsoleSupportServiceProvider::class,</span><br><span class="line">        Illuminate\Cookie\CookieServiceProvider::class,</span><br><span class="line">        Illuminate\Database\DatabaseServiceProvider::class,</span><br><span class="line">        Illuminate\Encryption\EncryptionServiceProvider::class,</span><br><span class="line">        Illuminate\Filesystem\FilesystemServiceProvider::class,</span><br><span class="line">        Illuminate\Foundation\Providers\FoundationServiceProvider::class,</span><br><span class="line">        Illuminate\Hashing\HashServiceProvider::class,</span><br><span class="line">        Illuminate\Mail\MailServiceProvider::class,</span><br><span class="line">        Illuminate\Notifications\NotificationServiceProvider::class,</span><br><span class="line">        Illuminate\Pagination\PaginationServiceProvider::class,</span><br><span class="line">        Illuminate\Pipeline\PipelineServiceProvider::class,</span><br><span class="line">        Illuminate\Queue\QueueServiceProvider::class,</span><br><span class="line">        Illuminate\Redis\RedisServiceProvider::class,</span><br><span class="line">        Illuminate\Auth\Passwords\PasswordResetServiceProvider::class,</span><br><span class="line">        Illuminate\Session\SessionServiceProvider::class,</span><br><span class="line">        Illuminate\Translation\TranslationServiceProvider::class,</span><br><span class="line">        Illuminate\Validation\ValidationServiceProvider::class,</span><br><span class="line">        Illuminate\View\ViewServiceProvider::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Package Service Providers...</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Application Service Providers...</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        App\Providers\AppServiceProvider::class,</span><br><span class="line">        App\Providers\AuthServiceProvider::class,</span><br><span class="line">        <span class="comment">// App\Providers\BroadcastServiceProvider::class,</span></span><br><span class="line">        App\Providers\EventServiceProvider::class,</span><br><span class="line">        App\Providers\RouteServiceProvider::class,<span class="comment"># 路由表生成</span></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>服务提供者经过解析后分为 3 种类型的服务提供者:</p><pre><code>- eager 类型</code></pre><p>马上调用 <code>register</code> 注册</p><pre><code>- deferred 类型</code></pre><p>记录下来, 当服务容器解析对应服务时, 才注册对应的服务提供者</p><pre><code>- when 类型</code></pre><p>记录下来, 当对应 event 触发时在注册对应服务提供者</p><ul><li>启动提供者 <code>\Illuminate\Foundation\Bootstrap\BootProviders::class</code></li></ul><p>调用服务容器的 <code>boot()</code> 方法, 依次调用在服务容器中 <code>register</code> 的所有服务提供者的 <code>boot()</code> 方法</p><h3 id="3-2-路由处理请求"><a href="#3-2-路由处理请求" class="headerlink" title="3.2 路由处理请求"></a>3.2 路由处理请求</h3><p>在内核处理请求, 将请求实例通过中间件处理后, 将请求的处理交给路由 Router 进行控制器的分发.</p><blockquote><p>Http Kernel</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRouter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;router-&gt;dispatch($request);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由表存储结构说明</p><p><code>Illuminate\Routing\Route</code> 存储单条路由</p><p><code>Illuminate\Routing\RouteCollection</code> 保存所有 <code>Route</code> 实例, 形成路由表</p><p><code>Illuminate\Routing\Router</code> 类实例持有 <code>RouteCollection</code> 路由表实例.</p><p>即, 一个 <code>Router</code> 持有一个 <code>RouteCollection</code>, 而 <code>RouteCollection</code> 拥有 N 个 <code>Route</code></p><p>在 <code>Router</code> 中对请求的处理同样经过一系列的 <strong>路由中间件</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由处理请求的入库</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRoute</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;runRoute($request, <span class="keyword">$this</span>-&gt;findRoute($request));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据请求的 url 和 method 查找对应的 route</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">findRoute</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;current = $route = <span class="keyword">$this</span>-&gt;routes-&gt;match($request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;container-&gt;instance(Route::class, $route);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $route;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据对应的请求和路由条目, 返回相应的 $response</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">runRoute</span><span class="params">(Request $request, Route $route)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $request-&gt;setRouteResolver(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($route)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $route;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;events-&gt;dispatch(<span class="keyword">new</span> Events\RouteMatched($route, $request));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prepareResponse($request,</span><br><span class="line">                                  <span class="keyword">$this</span>-&gt;runRouteWithinStack($route, $request)</span><br><span class="line">                                 );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求经过路由中间件过滤后, 交由 route 的 run() 方法处理</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">runRouteWithinStack</span><span class="params">(Route $route, Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $shouldSkipMiddleware = <span class="keyword">$this</span>-&gt;container-&gt;bound(<span class="string">'middleware.disable'</span>) &amp;&amp;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;container-&gt;make(<span class="string">'middleware.disable'</span>) === <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    $middleware = $shouldSkipMiddleware ? [] : <span class="keyword">$this</span>-&gt;gatherRouteMiddleware($route);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;container))</span><br><span class="line">        -&gt;send($request)</span><br><span class="line">        -&gt;through($middleware)</span><br><span class="line">        -&gt;then(<span class="function"><span class="keyword">function</span> <span class="params">($request)</span> <span class="title">use</span> <span class="params">($route)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prepareResponse(</span><br><span class="line">                $request, $route-&gt;run()</span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>route</code> 的 <code>run()</code> 方法最终将请求转给 <code>Illuminate\Routing\ControllerDispatcher::dispatch</code> 处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">(Route $route, $controller, $method)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $parameters = <span class="keyword">$this</span>-&gt;resolveClassMethodDependencies(</span><br><span class="line">    $route-&gt;parametersWithoutNulls(), $controller, $method</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method_exists($controller, <span class="string">'callAction'</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> $controller-&gt;callAction($method, $parameters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $controller-&gt;&#123;$method&#125;(...array_values($parameters));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下的事情就是 Controller控制器 的事了.</p><h3 id="3-3-处理返回的-Response"><a href="#3-3-处理返回的-Response" class="headerlink" title="3.3 处理返回的 Response"></a>3.3 处理返回的 Response</h3><p>在 <code>Router</code> 中有一个方法, 用于对返回的 <code>$response</code> 进行处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prepareResponse</span><span class="params">($request, $response)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::toResponse($request, $response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> \Illuminate\Http\Response|\Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">toResponse</span><span class="params">($request, $response)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($response <span class="keyword">instanceof</span> Responsable) &#123;</span><br><span class="line">        $response = $response-&gt;toResponse($request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($response <span class="keyword">instanceof</span> PsrResponseInterface) &#123;</span><br><span class="line">        $response = (<span class="keyword">new</span> HttpFoundationFactory)-&gt;createResponse($response);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (! $response <span class="keyword">instanceof</span> SymfonyResponse &amp;&amp;</span><br><span class="line">              ($response <span class="keyword">instanceof</span> Arrayable ||</span><br><span class="line">               $response <span class="keyword">instanceof</span> Jsonable ||</span><br><span class="line">               $response <span class="keyword">instanceof</span> ArrayObject ||</span><br><span class="line">               $response <span class="keyword">instanceof</span> JsonSerializable ||</span><br><span class="line">               is_array($response))) &#123;</span><br><span class="line">        $response = <span class="keyword">new</span> JsonResponse($response);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (! $response <span class="keyword">instanceof</span> SymfonyResponse) &#123;</span><br><span class="line">        $response = <span class="keyword">new</span> Response($response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($response-&gt;getStatusCode() === Response::HTTP_NOT_MODIFIED) &#123;</span><br><span class="line">        $response-&gt;setNotModified();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $response-&gt;prepare($request);<span class="comment"># 最后的处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述过程中, 在返回 <code>$response</code> 之前进行了最后的处理 <code>$response-&gt;prepare($request)</code></p><p>该过程是在 <code>Symfony\Component\HttpFoundation\Response::prepare()</code> 中进行</p><blockquote><p>对响应的封装是通过 <code>Illuminate\Http\Response</code> 类完成, 该类底层是 Symfony 框架的 Response 类</p></blockquote><blockquote><p>即, Symfony\Component\HttpFoundation\Response</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prepare</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $headers = <span class="keyword">$this</span>-&gt;headers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isInformational() || <span class="keyword">$this</span>-&gt;isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setContent(<span class="keyword">null</span>);</span><br><span class="line">        $headers-&gt;remove(<span class="string">'Content-Type'</span>);</span><br><span class="line">        $headers-&gt;remove(<span class="string">'Content-Length'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Content-type based on the Request</span></span><br><span class="line">        <span class="keyword">if</span> (!$headers-&gt;has(<span class="string">'Content-Type'</span>)) &#123;</span><br><span class="line">            $format = $request-&gt;getRequestFormat();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> !== $format &amp;&amp; $mimeType = $request-&gt;getMimeType($format)) &#123;</span><br><span class="line">                $headers-&gt;set(<span class="string">'Content-Type'</span>, $mimeType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fix Content-Type</span></span><br><span class="line">        $charset = <span class="keyword">$this</span>-&gt;charset ?: <span class="string">'UTF-8'</span>;</span><br><span class="line">        <span class="keyword">if</span> (!$headers-&gt;has(<span class="string">'Content-Type'</span>)) &#123;</span><br><span class="line">            $headers-&gt;set(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset='</span>.$charset);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="number">0</span> === stripos($headers-&gt;get(<span class="string">'Content-Type'</span>), <span class="string">'text/'</span>) &amp;&amp; <span class="keyword">false</span> === stripos($headers-&gt;get(<span class="string">'Content-Type'</span>), <span class="string">'charset'</span>)) &#123;</span><br><span class="line">            <span class="comment">// add the charset</span></span><br><span class="line">            $headers-&gt;set(<span class="string">'Content-Type'</span>, $headers-&gt;get(<span class="string">'Content-Type'</span>).<span class="string">'; charset='</span>.$charset);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fix Content-Length</span></span><br><span class="line">        <span class="keyword">if</span> ($headers-&gt;has(<span class="string">'Transfer-Encoding'</span>)) &#123;</span><br><span class="line">            $headers-&gt;remove(<span class="string">'Content-Length'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($request-&gt;isMethod(<span class="string">'HEAD'</span>)) &#123;</span><br><span class="line">            <span class="comment">// cf. RFC2616 14.13</span></span><br><span class="line">            $length = $headers-&gt;get(<span class="string">'Content-Length'</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;setContent(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> ($length) &#123;</span><br><span class="line">                $headers-&gt;set(<span class="string">'Content-Length'</span>, $length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fix protocol</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'HTTP/1.0'</span> != $request-&gt;server-&gt;get(<span class="string">'SERVER_PROTOCOL'</span>)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setProtocolVersion(<span class="string">'1.1'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if we need to send extra expire info headers</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'1.0'</span> == <span class="keyword">$this</span>-&gt;getProtocolVersion() &amp;&amp; <span class="keyword">false</span> !== strpos(<span class="keyword">$this</span>-&gt;headers-&gt;get(<span class="string">'Cache-Control'</span>), <span class="string">'no-cache'</span>)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;headers-&gt;set(<span class="string">'pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;headers-&gt;set(<span class="string">'expires'</span>, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;ensureIEOverSSLCompatibility($request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-响应发送和程序终止"><a href="#4-响应发送和程序终止" class="headerlink" title="4. 响应发送和程序终止"></a>4. 响应发送和程序终止</h2><h3 id="4-1-响应的发送"><a href="#4-1-响应的发送" class="headerlink" title="4.1 响应的发送"></a>4.1 响应的发送</h3><p>在 <code>index.php</code> 入口文件的最后是将响应返回给客户端</p><blockquote><p>$response-&gt;send();</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Symfony\Component\HttpFoundation\Response</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;sendHeaders();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;sendContent();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (function_exists(<span class="string">'fastcgi_finish_request'</span>)) &#123;</span><br><span class="line">        fastcgi_finish_request();</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (!\in_array(PHP_SAPI, <span class="keyword">array</span>(<span class="string">'cli'</span>, <span class="string">'phpdbg'</span>), <span class="keyword">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">static</span>::closeOutputBuffers(<span class="number">0</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendHeaders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// headers have already been sent by the developer</span></span><br><span class="line">    <span class="keyword">if</span> (headers_sent()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// headers</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;headers-&gt;allPreserveCase() <span class="keyword">as</span> $name =&gt; $values) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($values <span class="keyword">as</span> $value) &#123;</span><br><span class="line">            header($name.<span class="string">': '</span>.$value, <span class="keyword">false</span>, <span class="keyword">$this</span>-&gt;statusCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// status</span></span><br><span class="line">    header(sprintf(<span class="string">'HTTP/%s %s %s'</span>, <span class="keyword">$this</span>-&gt;version, <span class="keyword">$this</span>-&gt;statusCode, <span class="keyword">$this</span>-&gt;statusText), <span class="keyword">true</span>, <span class="keyword">$this</span>-&gt;statusCode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendContent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-请求中止"><a href="#4-2-请求中止" class="headerlink" title="4.2 请求中止"></a>4.2 请求中止</h3><p>在 <code>index.php</code> 入口文件的最后:</p><blockquote><p>\$kernel-&gt;terminate( \$request, \$response );</p></blockquote><p>依旧以 Http Kernel 为例:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">terminate</span><span class="params">($request, $response)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;terminateMiddleware($request, $response);<span class="comment"># 中间件中止处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;terminate();<span class="comment"># 服务容器的中止处理函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">terminateMiddleware</span><span class="params">($request, $response)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $middlewares = <span class="keyword">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : array_merge(</span><br><span class="line">        <span class="keyword">$this</span>-&gt;gatherRouteMiddleware($request),</span><br><span class="line">        <span class="keyword">$this</span>-&gt;middleware</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($middlewares <span class="keyword">as</span> $middleware) &#123;</span><br><span class="line">        <span class="keyword">if</span> (! is_string($middleware)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">list</span>($name) = <span class="keyword">$this</span>-&gt;parseMiddleware($middleware);</span><br><span class="line"></span><br><span class="line">        $instance = <span class="keyword">$this</span>-&gt;app-&gt;make($name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method_exists($instance, <span class="string">'terminate'</span>)) &#123;</span><br><span class="line">            $instance-&gt;terminate($request, $response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处的中间件指的是定义在 Kernel 中的 <code>$middleware</code> 中间件数组列表, 不包含 路由中间件.</p><blockquote><p>Laravel 5.1 注: 默认只有会话中间件包含 terminate() 函数</p></blockquote><p><code>Application</code> 服务容器的中止处理函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">terminate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;terminatingCallbacks <span class="keyword">as</span> $terminating) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call($terminating);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style&gt; 
.posts-expand .post-body img {
    margin: 0 auto !important;
}
&lt;/style&gt;

&lt;h2 id=&quot;0-Laravel生命周期&quot;&gt;&lt;a href=&quot;#0-Laravel生命周期&quot; class=&quot;he
      
    
    </summary>
    
      <category term="PHP" scheme="https://ya2.top/categories/PHP/"/>
    
    
      <category term="Laravel" scheme="https://ya2.top/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>HTTP_AUTHORIZATION</title>
    <link href="https://ya2.top/articles/HTTP-AUTHORIZATION/"/>
    <id>https://ya2.top/articles/HTTP-AUTHORIZATION/</id>
    <published>2021-01-25T11:31:47.000Z</published>
    <updated>2022-07-27T16:13:34.227Z</updated>
    
    <content type="html"><![CDATA[<p>做接口认证的时候，我们常会采用<code>Http BearerAuth</code>认证方式，即请求时在Header带上Authorization参数：</p><blockquote><p>Authorization: Bearer your_token</p></blockquote><p>我们都知道php的自定义头信息都可以使用<code>$SERVER[&#39;HTTP*&#39;]</code>来获取, 如 “Cookie: BAIDUID=B86A8A0FF:”, 获取的时候，我们可以使用<code>$_SERVER[&#39;HTTP_COOKIE&#39;]</code>来获取。</p><p>但<code>Authorization</code>是个例外，在<code>Apache服务器</code>下会出现<code>$_SERVER[&#39;HTTP_AUTHORIZATION&#39;]</code> 获取不到值的问题.</p><p>解决方法如下: </p><ul><li>如果已经开启<code>rewrite_module</code>模块，需要在<code>httpd-vhosts.conf</code>模块下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName test.com</span><br><span class="line">    DocumentRoot <span class="string">"/data/www/"</span></span><br><span class="line">    &lt;Directory  <span class="string">"/data/www/"</span>&gt;</span><br><span class="line">        <span class="comment"># Laravel配置</span></span><br><span class="line">        Options Indexes FollowSymLinks</span><br><span class="line">AllowOverride All</span><br><span class="line">Order Deny,Allow</span><br><span class="line">Require all granted</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteRule ^ index.php [L]</span><br><span class="line"><span class="comment"># HTTP 基础认证需要添加下面两行</span></span><br><span class="line">RewriteCond %&#123;HTTP:Authorization&#125; ^(.+)$</span><br><span class="line">RewriteRule .* - [E=HTTP_AUTHORIZATION:%&#123;HTTP:Authorization&#125;]</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><ul><li>如果没有开启<code>rewrite_module</code>模块，需要在入口处添加<code>.htaccess</code>文件，内容如下:</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Options +FollowSymlinks -Multiviews</span><br><span class="line">RewriteEngine On</span><br><span class="line"><span class="comment">#Authorization Headers</span></span><br><span class="line">RewriteCond %&#123;HTTP:Authorization&#125; ^(.+)$</span><br><span class="line">RewriteRule .* - [E=HTTP_AUTHORIZATION:%&#123;HTTP:Authorization&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做接口认证的时候，我们常会采用&lt;code&gt;Http BearerAuth&lt;/code&gt;认证方式，即请求时在Header带上Authorization参数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Authorization: Bearer your_token&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="PHP" scheme="https://ya2.top/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次spl_autoload_register踩坑</title>
    <link href="https://ya2.top/articles/%E8%AE%B0%E4%B8%80%E6%AC%A1spl-autoload-register%E8%B8%A9%E5%9D%91/"/>
    <id>https://ya2.top/articles/记一次spl-autoload-register踩坑/</id>
    <published>2020-11-16T10:16:15.000Z</published>
    <updated>2022-07-27T16:13:35.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>定义： spl_autoload_register – 注册给定的函数作为 <a href="https://www.php.net/manual/zh/function.autoload" target="_blank" rel="noopener">__autoload</a> 的实现 <a href="https://www.php.net/manual/zh/function.spl-autoload-register.php" target="_blank" rel="noopener">【官方文档】</a></p></blockquote><p>简单说就是当我们使用未引用的类时会触发这个函数执行，例如：</p><p><img src="/articles/记一次spl-autoload-register踩坑/demo.png" alt="示例1"></p><p>根据这个特性，我们可以实现自动的类加载功能，例如:</p><p><img src="/articles/记一次spl-autoload-register踩坑/demo2.png" alt="示例2"></p><p>一切看起来都是如此美好，但是问题来了，在测试中我发现如下问题：</p><p><img src="/articles/记一次spl-autoload-register踩坑/demo3.png" alt="坑"></p><p>虽然成功加载了目标类，但是spl_autoload_register被触发了两次，外部实例化类的地方只有一处，显然这是不正常的（红框内的类按照处理逻辑是不应该被加载的）。</p><p>经查发现出问题的函数是 <a href="https://www.php.net/manual/zh/function.class-exists" target="_blank" rel="noopener">class_exists</a>：</p><p><img src="/articles/记一次spl-autoload-register踩坑/class_exists.png" alt="class_exists"></p><p>它的第二个参数 <code>autoload</code> 默认是 <code>true</code>, 这就导致如果指定的类 <code>$class_name</code> 不存在就会触发<a href="https://www.php.net/manual/zh/function.autoload" target="_blank" rel="noopener">__autoload</a>, 而spl_autoload_register是<a href="https://www.php.net/manual/zh/function.autoload" target="_blank" rel="noopener">__autoload</a>的实现,所以spl_autoload_register就被触发了。</p><p>解决方法也简单，就是在指定参数autoload为false即可：</p><p><img src="/articles/记一次spl-autoload-register踩坑/demo4.png" alt="示例3"></p><p><em>注意此处的Demo是放在test目录下面的，和上面示例12Demo放同级目录不同</em></p><p>类似的常用方法还有： <code>class_alias</code>, <code>trait_exists</code>,<code>interface_exists</code> 等。</p><p>细心的大佬可能会发现在官方文档里面已经有人提出这个问题了：</p><p><img src="/articles/记一次spl-autoload-register踩坑/wiki.png" alt></p><p>明人不说暗话，这个坑出现在我项目 <a href="https://app.ya2.top/qzone/?from=article" target="_blank" rel="noopener">QQ空间自动导出</a> 里，项目不大所以没有使用三方框架，自己写了一个简单的类自动加载，替代繁琐的require过程。 项目测试运行正常，但是调试的时候发现，接口调用的同时自动模型构建代码被触发执行了，原因是class_exists触发了自动加载，导致substr截取的所有字符串都当做了类来处理，结果碰巧有一个字符串就是我的自动代码构建类，这就很有意思了。</p><p>来个简单安全Case：</p><p><img src="/articles/记一次spl-autoload-register踩坑/payload.png" alt="payload"></p><p>nice~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;定义： spl_autoload_register – 注册给定的函数作为 &lt;a href=&quot;https://www.php.net/manual/zh/function.autoload&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
      <category term="PHP" scheme="https://ya2.top/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>Chrome扩展开发</title>
    <link href="https://ya2.top/articles/Chrome%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    <id>https://ya2.top/articles/Chrome扩展开发/</id>
    <published>2020-10-26T17:10:17.000Z</published>
    <updated>2022-07-27T16:11:48.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作者发现很多PC页面都没有做移动端转发的功能，有时候想在移动端阅读都要先在电脑上登录微信或者QQ转发到手机上面，一次两次还好，多了就觉得很不方便了，尤其是开发调试的时候。于是作者想到了开发一款浏览器插件简化一下上面的操作。</p><p>先上一下折腾出的成果 <a href="https://github.com/gouyuwang/chrome-qrcode" target="_blank" rel="noopener">Github传送门</a>:<br><img src="/articles/Chrome扩展开发/demo.png" alt> </p><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><p>浏览器插件是一种小型的用于定制浏览器体验的程序。通过插件，我们可以定制js爬虫、屏蔽网页广告，网页实时查词，修改http请求头，等等，能做的东西很多。只要你会HTML，JavaScript，CSS就可以动手开发浏览器插件了。 </p><p>1、创建<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json" target="_blank" rel="noopener">manifest.json</a>。任何插件都必须要有这个文件，用来描述插件的元数据，插件的配置信息。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"Qrcode"</span>,</span><br><span class="line">    <span class="attr">"description"</span>:<span class="string">"Url Qrcode Extension"</span>,</span><br><span class="line">    "version":"1.0",// 版本version在打包完插件的时候，判断插件是否需要更新</span><br><span class="line">    "manifest_version":2, </span><br><span class="line">  "description":"当前页面的二维码",</span><br><span class="line">    "browser_action":&#123;// 浏览器右上角的图标</span><br><span class="line">        "default_popup":"popup.html", // 弹出后运行的页面，相当于index.html</span><br><span class="line">        "default_icon":"icon.png",</span><br><span class="line">"default_title":"生成页面二维码"</span><br><span class="line">    &#125;,</span><br><span class="line">"icons":&#123; </span><br><span class="line">"16":"icon.png",</span><br><span class="line">"48":"icon.png",</span><br><span class="line">"128":"icon.png"</span><br><span class="line">    &#125;,</span><br><span class="line">    "commands":&#123;</span><br><span class="line">        "_execute_browser_action":&#123;</span><br><span class="line">            "suggested_key":&#123; // 快捷键</span><br><span class="line">                "default":"Ctrl+Shift+F",</span><br><span class="line">                "mac":"MacCtrl+Shift+F"</span><br><span class="line">            &#125;,</span><br><span class="line">            "description":"Opens popup.html"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">"permissions": [ // 授权</span><br><span class="line">        "background", </span><br><span class="line">        <span class="string">"tabs"</span></span><br><span class="line">    ], </span><br><span class="line">    "background":&#123; // 后台运行</span><br><span class="line">        "script":[</span><br><span class="line">             "js/background.js" // 当前项目没有用到，因为不存在久驻后台的需求</span><br><span class="line">         ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编写业务</p><p><img src="/articles/Chrome扩展开发/dir.png" alt="目录结构"></p><p>里面内容比较简单，生成二维码和分享均用的三方插件。值得注意的是，html里面不能和js混写，这里涉及到一个权限问题。</p><p><img src="/articles/Chrome扩展开发/jserror.png" alt="JS Error"></p><p>3、运行调试</p><ul><li>进入浏览器扩展管理</li></ul><p><img src="/articles/Chrome扩展开发/dev.png" alt></p><ul><li>开发者模式打开，然后点击 “加载已解压的扩展程序” 将创建的插件目录导入进去，如果你只有crx文件，直接右键以压缩文件方式解压就可以看到全部代码。</li></ul><p><img src="/articles/Chrome扩展开发/opendev.png" alt></p><ul><li>成功后可以看到下面的画面</li></ul><p><img src="/articles/Chrome扩展开发/success.png" alt></p><p>调试的跟普通网页调试差不多，右键点击弹出的扩展，点“审查元素”即可打开插件的开发工具，如图</p><p><img src="/articles/Chrome扩展开发/debug.png" alt></p><p>4、打包发布</p><p><img src="/articles/Chrome扩展开发/prod.png" alt> </p><p>打包后会生成.crx文件，将生成的.crx项目文件直接拖入浏览器，也可以在扩展程序里面添加，Google对这个审核还是比较严格的，禁止未上架的插件拖曳使用，但是可以以开发者模式安装。 亲测360浏览器是可以直接拖曳的使用的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>浏览器插件开发，具有很高的实用性，值得我们去学习和了解。本文是作者记录第一次学习制作插件开发的过程，内容只是作者所用到的部分，未能面面俱到，敬请谅解。 </p><p>欢迎一起讨论与留言。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions" target="_blank" rel="noopener">Browser Extensions</a></li><li><a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="noopener">360浏览器应用开放平台</a></li></ul><style>.posts-expand .post-body img{margin:0 auto; max-height:100vh;}</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;作者发现很多PC页面都没有做移动端转发的功能，有时候想在移动端阅读都要先在电脑上登录微信或者QQ转发到手机上面，一次两次还好，多了就觉得很不
      
    
    </summary>
    
      <category term="前端开发" scheme="https://ya2.top/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>SSL双向认证</title>
    <link href="https://ya2.top/articles/SSL%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81/"/>
    <id>https://ya2.top/articles/SSL双向认证/</id>
    <published>2020-09-04T17:10:42.000Z</published>
    <updated>2022-07-27T16:12:55.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有朋友最近遇到客户需求：他们出于安全考虑只能是从某一台电脑才能访问应用。以下是我所想到的几种实现方案思考：</p><ul><li><p>IP地址。 你所用的IP都是运营商自动随机分配的，基本上都是处在变化中的，要想固定IP，你需要支付高昂的网络费用购买专网服务保证IP不发生变化，且需要保证局域网内就你使用这个对外的IP地址。</p></li><li><p>客户端软件。提供配套的客户端软件与web应用实现通信，配合MAC地址唯一性，验证客户身份。web端QQ自动登录就是这么发现你本地登录了哪些QQ的，更多可以看我这篇文章<a href="/articles/QQ如何实现跨端通信的/">QQ如何实现跨端通信的</a>了解原理。</p></li><li><p>SSL双向认证。生成客户证书，只让持有证书的客户访问。安装证书和安装桌面客户端是一样的考验客户的电脑操作水平。</p></li></ul><p>当然，肯定还有其他更好的方案，欢迎大佬留言指点一二。  </p><p>本篇文章主要是记录一下我是如何实现SSL双向认证这个方案的。<em>ip方案没啥好说的，保证IP唯一即可。客户端软件方案我在<a href="/articles/QQ如何实现跨端通信的/">QQ如何实现跨端通信的</a>这篇文章有DEMO。</em></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li><p>SSL单向认证</p><p><img src="/articles/SSL双向认证/SSL%E5%8D%95%E5%90%91%E8%AE%A4%E8%AF%81.png" alt="SSL单向认证"></p></li></ul><ul><li><p>①客户端的浏览器向服务器传送客户端SSL协议的版本号，加密算法的种类，产生的随机数，以及其他服务器和客户端之间通讯所需要的各种信息。</p></li><li><p>②服务器向客户端传送SSL协议的版本号，加密算法的种类，随机数以及其他相关信息，同时服务器还将向客户端传送自己的证书。</p></li><li><p>③客户利用服务器传过来的信息验证服务器的合法性，服务器的合法性包括：证书是否过期，发行服务器证书的CA是否可靠，发行者证书的公钥能否正确解开服务器证书的”发行者的数字签名”，服务器证书上的域名是否和服务器的实际域名相匹配。如果合法性验证没有通过，通讯将断开;如果合法性验证通过，将继续进行第四步。</p></li><li><p>④用户端随机产生一个用于后面通讯的”对称密码”，然后用服务器的公钥(服务器的公钥从步骤②中的服务器的证书中获得)对其加密，然后将加密后的”预主密码”传给服务器。</p></li><li><p>⑤如果服务器要求客户的身份认证(在握手过程中为可选)，用户可以建立一个随机数然后对其进行数据签名，将这个含有签名的随机数和客户自己的证书以及加密过的”预主密码”一起传给服务器。</p></li><li><p>⑥如果服务器要求客户的身份认证，服务器必须检验客户证书和签名随机数的合法性，具体的合法性验证过程包括：客户的证书使用日期是否有效，为客户提供证书的CA是否可靠，发行CA 的公钥能否正确解开客户证书的发行CA的数字签名，检查客户的证书是否在证书废止列表(CRL)中。检验如果没有通过，通讯立刻中断;如果验证通过，服务器将用自己的私钥解开加密的”预主密码 “，然后执行一系列步骤来产生主通讯密码(客户端也将通过同样的方法产生相同的主通讯密码)。</p></li><li><p>⑦服务器和客户端用相同的主密码即”通话密码”，一个对称密钥用于SSL协议的安全数据通讯的加解密通讯。同时在SSL通讯过程中还要完成数据通讯的完整性，防止数据通讯中的任何变化。</p></li><li><p>⑧客户端向服务器端发出信息，指明后面的数据通讯将使用的步骤⑦中的主密码为对称密钥，同时通知服务器客户端的握手过程结束。</p></li><li><p>⑨服务器向客户端发出信息，指明后面的数据通讯将使用的步骤⑦中的主密码为对称密钥，同时通知客户端服务器端的握手过程结束。</p></li><li><p>⑩-SSL的握手部分结束，SSL安全通道的数据通讯开始，客户和服务器开始使用相同的对称密钥进行数据通讯，同时进行通讯完整性的检验。 </p></li><li><p>SSL双向认证</p></li></ul><p><img src="/articles/SSL双向认证/SSL%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81.png" alt="SSL双向认证"></p><p>① 浏览器发送一个连接请求给安全服务器。</p><p>② 服务器将自己的证书，以及同证书相关的信息发送给客户浏览器。</p><p>③ 客户浏览器检查服务器送过来的证书是否是由自己信赖的CA中心（如沃通CA）所签发的。如果是，就继续执行协议;如果不是，客户浏览器就给客户一个警告消息：警告客户这个证书不是可以信赖的，询问客户是否需要继续。</p><p>④ 接着客户浏览器比较证书里的消息，例如域名和公钥，与服务器刚刚发送的相关消息是否一致，如果是一致的，客户浏览器认可这个服务器的合法身份。</p><p>⑤ 服务器要求客户发送客户自己的证书。收到后，服务器验证客户的证书，如果没有通过验证，拒绝连接;如果通过验证，服务器获得用户的公钥。</p><p>⑥ 客户浏览器告诉服务器自己所能够支持的通讯对称密码方案。</p><p>⑦ 服务器从客户发送过来的密码方案中，选择一种加密程度最高的密码方案，用客户的公钥加过密后通知浏览器。</p><p>⑧ 浏览器针对这个密码方案，选择一个通话密钥，接着用服务器的公钥加过密后发送给服务器。</p><p>⑨ 服务器接收到浏览器送过来的消息，用自己的私钥解密，获得通话密钥。</p><p>⑩ 服务器、浏览器接下来的通讯都是用对称密码方案，对称密钥是加过密的。</p><p>双向认证则是需要服务端与客户端提供身份认证，只能是服务端允许的客户能去访问，安全性相对于要高一些。 </p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>网上有很多实现方法，个人觉得这篇文章说的最详细：<a href="https://www.cnblogs.com/dyllove98/p/3157370.html" target="_blank" rel="noopener">传送门</a></p><p>因为我域名下面申请过一个https,所以下面是我省去生成服务器端证书直接生成客户端证书的步骤：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 生成服务器crt, 用来验证client证书的, ca.key就是https证书那个</span><br><span class="line">openssl req -new -x509 -days 3650 -key ca.key -out ca.crt </span><br><span class="line"></span><br><span class="line">// 生成客户端证书</span><br><span class="line">openssl genrsa -des3 -out client.key 1024</span><br><span class="line"></span><br><span class="line">openssl req -new -key client.key -out client.csr</span><br><span class="line"></span><br><span class="line">openssl ca -policy policy_anything -<span class="keyword">in</span> client.csr -cert ca.crt -keyfile ca.key -out client.crt -days 3650</span><br><span class="line"></span><br><span class="line">// 生成浏览器证书安装文件</span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -inkey client.key -<span class="keyword">in</span> client.crt -out client.pfx</span><br></pre></td></tr></table></figure><p>上面代码可以在linux上面执行，也可以在windows上面执行。linux不说了，windows用户主要安装了apache的可以在它bin目录下找到 openssl.exe文件。</p><p>生成好了就开始使用了</p><ul><li>服务端</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># server</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ssl_certificate</span>  /etc/pki/ca_linvo/server/server.crt;       <span class="comment">#server公钥</span></span><br><span class="line"><span class="attribute">ssl_certificate_key</span>  /etc/pki/ca_linvo/server/server.key;   <span class="comment">#server私钥</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">ssl_client_certificate</span>   /etc/pki/ca_linvo/root/ca.crt;     <span class="comment"># 根级证书公钥，用于验证各个二级client</span></span><br><span class="line"><span class="attribute">ssl_verify_client</span> <span class="literal">on</span>;                                       <span class="comment"># 开启客户端ssl校验</span></span><br></pre></td></tr></table></figure><ul><li>客户端</li></ul><p>双击 <strong>client.pfx</strong> 安装证书，安装时会提示输入生成证书时设置的密码。安装成功后，重启浏览器输入网址访问，浏览器可能会提示你选择证书，选择刚才安装的那个证书即可。 此时有些浏览器会提示用户该证书不受信任，地址不安全之类，这是因为我们的server证书是我们自己颁发的，而非真正的权威CA机构颁布，忽略它既可。当然你也可以像我一样去 <strong>x云</strong> 申请一个免费server证书用着。 </p><ul><li>测试 </li></ul><p><img src="/articles/SSL双向认证/demo.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SSL单向验证过程中，客户端会验证自己访问的服务器端，服务器端对客户端不做验证。如果服务器端验证客户端，则需要开启服务器端验证，这就是双向验证。 </p><style>.posts-expand .post-body img{margin:0 auto; max-height:100vh;}</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有朋友最近遇到客户需求：他们出于安全考虑只能是从某一台电脑才能访问应用。以下是我所想到的几种实现方案思考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="服务器运维" scheme="https://ya2.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis如何存储和计算一亿用户的活跃度</title>
    <link href="https://ya2.top/articles/Redis%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E5%92%8C%E8%AE%A1%E7%AE%97%E4%B8%80%E4%BA%BF%E7%94%A8%E6%88%B7%E7%9A%84%E6%B4%BB%E8%B7%83%E5%BA%A6/"/>
    <id>https://ya2.top/articles/Redis如何存储和计算一亿用户的活跃度/</id>
    <published>2020-08-28T11:14:41.000Z</published>
    <updated>2022-07-27T16:12:47.145Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如何用<em>redis</em>存储统计1亿用户一年内的登录情况，并快速检索任意时间窗口内的活跃用户数量？</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>Redis 是一个内存数据库，采用单线程和事件驱动的机制来处理网络请求。实际生产的QPS和TPS单台都能达到 3~4 w，读写性能非常棒,用来存储一些对核心业务弱影响的用户状态信息还是非常不错的。</p><p>对于这个问题，有2个重要的点需要考虑：</p><ul><li><p><strong>如何选择合适的数据类型来存储 1 亿用户的数据？</strong><br>用普通的字符串来存储肯定不行。经查一个最简单的kv的内存占用，发现为48byte。假设每个用户每天登录需要占据1对kv的话，那一亿就是$(48*100000000)/1024/1024/1024=4.47G$，这还只是是一天的量。</p></li><li><p><strong>如何满足搜索？</strong><br>redis 是一个键值对的内存结构，只能根据 key 来进行定位 value 值，无法做到像 elasticsearch 那样对文档进行倒排索引快速全文检索。</p></li></ul><h3 id="方案一：Bitmap"><a href="#方案一：Bitmap" class="headerlink" title="方案一：Bitmap"></a>方案一：Bitmap</h3><p>在 redis 2.2.0 版本之后，新增了一个位图数据，它不是一种数据结构。实际上它就是一个字符串结构，只不过 value 是一个二进制数据，每一位只能是 0 或者 1 。redis 单独对 bitmap 提供了一套命令，可以对任意一位进行设置和读取。</p><p>bitmap 的核心命令： </p><p><strong>SETBIT</strong></p><p>语法： SETBIT key offset value</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setbit abc 5 1 ----&gt; 00001</span><br><span class="line"></span><br><span class="line">setbit abc 2 1 ----&gt; 00101</span><br></pre></td></tr></table></figure><p><strong>GETBIT</strong></p><p>语法：GETBIT key offset</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getbit abc 5 ----&gt; 1</span><br><span class="line"></span><br><span class="line">getbit abc 1 ----&gt; 0</span><br></pre></td></tr></table></figure><p>bitmap 的其他命令还有 <em>bitcount<em>，</em>bitcount<em>，</em>bitpos<em>，</em>bitop</em> 等命令，都是对位的操作。</p><p>因为 bitmap 的每一位只占据 1bit 的空间 ，所以利用这个特性我们可以把每一天作为 key，value 为 1 亿用户的活跃度状态。假设一个用户一天内只要登录了一次就算活跃。活跃我们就记为 1，不活跃我们就记为 0 。把用户 Id 作为偏移量(offset)。这样我们一个 key 就可以存储 1 亿用户的活跃状态。</p><p>我们再来算下，这样一个位图结构的值对象占据多少空间。每一个位是 1bit，一亿用户就是一亿 bit 。8bit=1Byte</p><p>$100000000/8/1024/1024=11.92M$</p><p>我用测试工程往一个 key 里通过 lua 塞进了 1 亿个 bit，然后用 rdb tools 统计这个可以需要消耗 12M 的内存空间，这完全符合要求，而且 redis 可以集群部署来进行扩容存储。我们也可以用位图压缩算法对 bitmap 进行压缩存储，例如： WAH，EWAH，Roaring Bitmaps。</p><p>我们把每一天 1 亿用户的登录状态都用 bitmap 的形式存进了 redis，那要获取某一天 id 为 88000 的用户是否活跃，直接使用命令：</p><blockquote><p>GETBIT 2020-01-01 88000 [时间复杂度为 O(1)]</p></blockquote><p>如果要统计某一天的所有的活跃用户数，使用bitcount命令，bitcount 可以统计 1 的个数，也就是活跃用户数：</p><blockquote><p>BITCOUNT 2020-01-01 [时间复杂度为 O(N)]</p></blockquote><p>如果要统计某一段时间内的活跃用户数，需要用到 bitop 命令。这个命令提供四种位运算，AND(与)，(OR)或，XOR(亦或)，NOT(非)。我们可以对某一段时间内的所有 key 进行OR(或)操作，或操作出来的位图是 0 的就代表这段时间内一次都没有登录的用户。那只要我们求出 1 的个数就可以了。以下例子求出了 2020-01-01 到 2020-01-05 这段时间内的活跃用户数:</p><blockquote><p>BITCOUNT OR result 2020-01-01 2020-01-02 2020-01-03 2020-01-04 2020-01-05 [时间复杂度为 O(N)]</p></blockquote><p>从时间复杂度上说，无论是统计某一天，还是统计一段时间, 在实际测试中基本上都是秒出的，符合我们的预期。</p><p>bitmap 可以很好的满足一些需要记录大量而简单信息的场景，所占空间十分小，通常来说使用场景分 2 类：</p><ul><li><p>某一业务对象的横向扩展，key 为某一个业务对象的 id，比如记录某一个终端的功能开关，1 代表开，0 代表关。基本可以无限扩展，可以记录 2^32 个位信息。不过这种用法由于 key 上带有了业务对象的 id，导致了 key 的存储空间大于了 value 的存储空间，从空间使用角度上来看有一定的优化空间。</p></li><li><p>某一业务的纵向扩展，key 为某一个业务，把每一个业务对象的 id 作为偏移量记录到位上。这道面试题的例子就是用此法来进行解决。十分巧妙的利用了用户的 id 作为偏移量来找到相对应的值。当业务对象数量超过 2^32 时（约等于 42 亿），还可以分片存储。</p></li></ul><h3 id="方案二：HyperLogLog"><a href="#方案二：HyperLogLog" class="headerlink" title="方案二：HyperLogLog"></a>方案二：HyperLogLog</h3><p>redis 从 2.8.9 之后增加了 HyperLogLog 数据结构。这个数据结构，根据 redis 的官网介绍，这是一个概率数据结构，用来估算数据的基数。能通过牺牲准确率来减少内存空间的消耗。</p><p>我们先来看看 HyperLogLog 的方法：</p><p><strong>PFADD</strong> 添加一个元素，如果重复，只算作一个</p><p><strong>PFCOUNT</strong> 返回元素数量的近似值</p><p><strong>PFMERGE</strong> 将多个 HyperLogLog 合并为一个 HyperLogLog</p><p>这很好理解，是不是。那我们就来看看同样是存储一亿用户的活跃度，HyperLogLog 数据结构需要多少空间。是不是比 bitmap 更加省空间呢。</p><p>我通过测试工程往 HyperLogLog 里 PFADD 了一亿个元素，通过 rdb tools 工具统计了这个 key 只需要 14392 Bytes，也就是 14KB 的空间。bitmap 存储一亿需要 12M，而 HyperLogLog 只需要 14K 的空间。这是一个很惊人的结果。<br>接下来我又放了 1000w 数据，统计出来还是 14k 。也就是说，无论你放多少数据进去，都是 14K 。</p><p>查了文档，发现 HyperLogLog 是一种概率性数据结构，在标准误差 0.81%的前提下，能够统计 ${2}^{64}$ 个数据。所以 HyperLogLog 适合在比如统计日活月活此类的对精度要不不高的场景。</p><p>HyperLogLog 使用概率算法来统计集合的近似基数，而它算法的最本源则是<em>伯努利过程</em>。</p><blockquote><p><a href="https://baike.baidu.com/item/%E4%BC%AF%E5%8A%AA%E5%88%A9%E8%BF%87%E7%A8%8B/610420?fr=aladdin" target="_blank" rel="noopener">伯努利过程</a>：简单来说，伯努利过程就是一个抛硬币实验的过程。抛一枚正常硬币，落地可能是正面，也可能是反面，二者的概率都是 $\frac{1}{2}$ 。伯努利过程就是一直抛硬币，直到落地时出现正面位置，并记录下抛掷次数 k 。比如说，抛一次硬币就出现正面了，此时 k 为 1; 第一次抛硬币是反面，则继续抛，直到第三次才出现正面，此时 k 为 3 。 对于 n 次伯努利过程，我们会得到 n 个出现正面的投掷次数值 $k_1$, $k_2$ … $k_n$ , 其中这里的最大值是 $k_{max}$ 。根据一顿数学推导，我们可以得出一个结论：${2}^{k_{max}}$来作为 n 的估计值。也就是说你可以根据最大投掷次数近似的推算出进行了几次伯努利过程。</p></blockquote><p>虽然 HyperLogLog 数据类型不是精确统计,只适用于对精度要求不高的场景，而且这种类型无法得出每个用户的活跃度信息。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于文章开头所提到的问题，用 <strong>Bitmap</strong> 和 <strong>HyperLogLog</strong> 都可以解决。</p><table><thead><tr><th align="left"></th><th align="left">Bitmap</th><th align="left">HyperLogLog</th></tr></thead><tbody><tr><td align="left">优点</td><td align="left">非常均衡的特性，精准统计，可以得到每个统计对象的状态，秒出</td><td align="left">可以统计夸张到无法想象的数量，并且占用小的夸张的内存</td></tr><tr><td align="left">缺点</td><td align="left">当你的统计对象数量十分十分巨大时，可能会占用到一点存储空间，但也可在接受范围内。也可以通过分片，或者压缩的额外手段去解决</td><td align="left">建立在牺牲准确率的基础上，而且无法得到每个统计对象的状态</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;如何用&lt;em&gt;redis&lt;/em&gt;存储统计1亿用户一年内的登录情况，并快速检索任意时间窗口内的活跃用户数量？&lt;/p&gt;
&lt;h3 id=&quot;分析&quot;
      
    
    </summary>
    
      <category term="数据库" scheme="https://ya2.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>实现一个简单的全文检索引擎</title>
    <link href="https://ya2.top/articles/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    <id>https://ya2.top/articles/实现一个简单的全文检索引擎/</id>
    <published>2020-08-18T11:02:43.000Z</published>
    <updated>2022-07-27T16:11:44.630Z</updated>
    
    <content type="html"><![CDATA[<p>全文检索是人们每天都在使用的工具之一。如果你曾经在google上搜索过“golang使用情况”或试图在电子商务网站上找到“室内无线摄像头”，你都会使用某种全文检索。</p><p>全文检索（FTS）是一种在文档集合中搜索文本的技术。文档可以引用网页、报纸文章、电子邮件或其他任何结构文本。</p><p>今天我们要建造我们自己的FTS引擎。在这篇文章的最后，我们将能够在不到一毫秒的时间内搜索数百万个文档。我们将从简单的搜索查询开始，比如“给我包含单词cat的所有文档”，然后扩展引擎以支持更复杂的布尔查询。</p><blockquote><p>注：最著名的FTS引擎是<a href="https://lucene.apache.org/" target="_blank" rel="noopener">Lucene</a>（以及在此基础上构建的 <a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">Elasticsearch</a> 和 <a href="https://lucene.apache.org/solr/" target="_blank" rel="noopener">Solr</a> ）。</p></blockquote><h3 id="为什么选择FTS"><a href="#为什么选择FTS" class="headerlink" title="为什么选择FTS"></a>为什么选择FTS</h3><p>在我们开始编写代码之前，您可能会问：“我们不能只使用grep，或者使用一个循环来检查每个文档是否包含我要查找的单词？” 是的，我们可以，但这并不是最好的方式。</p><h3 id="语料库"><a href="#语料库" class="headerlink" title="语料库"></a>语料库</h3><p>点击下载 <a href="https://dumps.wikimedia.org/enwiki/latest/enwiki-latest-abstract1.xml.gz" target="_blank" rel="noopener">dumps.wikimedia.org</a> 语料。</p><p>语料的格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Wikipedia: Kit-Cat Klock<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://en.wikipedia.org/wiki/Kit-Cat_Klock<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">abstract</span>&gt;</span>The Kit-Cat Klock is an art deco novelty wall clock shaped like a grinning cat with cartoon eyes that swivel in time with its pendulum tail.<span class="tag">&lt;/<span class="name">abstract</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加载文档"><a href="#加载文档" class="headerlink" title="加载文档"></a>加载文档</h3><p>首先，我们需要加载上一步下载的文档。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/xml"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> document <span class="keyword">struct</span> &#123;</span><br><span class="line">    Title <span class="keyword">string</span> <span class="string">`xml:"title"`</span></span><br><span class="line">    URL   <span class="keyword">string</span> <span class="string">`xml:"url"`</span></span><br><span class="line">    Text  <span class="keyword">string</span> <span class="string">`xml:"abstract"`</span></span><br><span class="line">    ID    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadDocuments</span><span class="params">(path <span class="keyword">string</span>)</span> <span class="params">([]document, error)</span></span> &#123;</span><br><span class="line">    f, err := os.Open(path)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">    dec := xml.NewDecoder(f)</span><br><span class="line">    dump := <span class="keyword">struct</span> &#123;</span><br><span class="line">        Documents []document <span class="string">`xml:"doc"`</span></span><br><span class="line">    &#125;&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> err := dec.Decode(&amp;dump); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    docs := dump.Documents</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> docs &#123;</span><br><span class="line">        docs[i].ID = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> docs, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个加载的文档都会被分配一个唯一的标识符。为了简单起见，第一个加载的文档分配ID=0，第二个ID=1，依此类推。</p><h3 id="常规搜索测试"><a href="#常规搜索测试" class="headerlink" title="常规搜索测试"></a>常规搜索测试</h3><p><strong>关键词搜索</strong></p><p>现在我们已经将所有文档加载到内存中，我们可以尝试找到关于猫的文档。首先，让我们遍历所有文档并检查它们是否包含子字符串cat：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(docs []document, term <span class="keyword">string</span>)</span> []<span class="title">document</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> r []document</span><br><span class="line">    <span class="keyword">for</span> _, doc := <span class="keyword">range</span> docs &#123;</span><br><span class="line">        <span class="keyword">if</span> strings.Contains(doc.Text, term) &#123;</span><br><span class="line">            r = <span class="built_in">append</span>(r, doc)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我的笔记本电脑上，搜索需要 103ms, 还不错。 如果您抽查了输出中的一些文档， 您可能会注意到该函数与caterpillar和category匹配，但cat与大写字母C不匹配。这不是我想要的。</p><p>在继续之前，我们需要解决两个问题：</p><ul><li><p>使搜索不区分大小写（因此Cat也匹配）。</p></li><li><p>匹配单词边界而不是子字符串（因此caterpiller和communication不匹配）。</p></li></ul><p><strong>正则表达式搜索</strong></p><p>一个快速想到并允许实现这两个需求的解决方案是正则表达式。</p><p>例如：<code>(?i)\bcat\b</code></p><ul><li><p><code>(?i)</code> 大小写不敏感</p></li><li><p><code>\b</code> 匹配单词边界（一边是单词字符，另一边不是单词字符的位置）</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(docs []document, term <span class="keyword">string</span>)</span> []<span class="title">document</span></span> &#123;</span><br><span class="line">    re := regexp.MustCompile(<span class="string">`(?i)\b`</span> + term + <span class="string">`\b`</span>) <span class="comment">// Don't do this in production, it's a security risk. term needs to be sanitized.</span></span><br><span class="line">    <span class="keyword">var</span> r []document</span><br><span class="line">    <span class="keyword">for</span> _, doc := <span class="keyword">range</span> docs &#123;</span><br><span class="line">        <span class="keyword">if</span> re.MatchString(doc.Text) &#123;</span><br><span class="line">            r = <span class="built_in">append</span>(r, doc)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>呃，搜索花了2秒多。如您所见，即使有60万个文档，事情也开始变得缓慢。虽然该方法易于实现，但它的扩展性并不好。随着数据集越来越大，我们需要扫描越来越多的文档。该算法的时间复杂度是线性的, 需要扫描的文档数等于文档总数。如果我们有600万份文档，而不是60万份，搜索需要20秒。所以我们还需要优化。</p><h3 id="反向索引"><a href="#反向索引" class="headerlink" title="反向索引"></a>反向索引</h3><p>为了使搜索查询更快，我们将对文本进行预处理并预先建立索引。</p><p>FTS的核心是一种称为反向索引的数据结构, 将文档中的每个单词与包含该单词的文档相关联。</p><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">documents = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="string">"a donut on a glass plate"</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">"only the donut"</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">"listen to the drum machine"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index = &#123;</span><br><span class="line">    <span class="string">"a"</span>: [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"donut"</span>: [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="string">"on"</span>: [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"glass"</span>: [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"plate"</span>: [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"only"</span>: [<span class="number">2</span>],</span><br><span class="line">    <span class="string">"the"</span>: [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">"listen"</span>: [<span class="number">3</span>],</span><br><span class="line">    <span class="string">"to"</span>: [<span class="number">3</span>],</span><br><span class="line">    <span class="string">"drum"</span>: [<span class="number">3</span>],</span><br><span class="line">    <span class="string">"machine"</span>: [<span class="number">3</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个倒排索引的真实例子。书名索引书中一个术语引用页码的索引：</p><p><img src="/articles/实现一个简单的全文检索引擎/book-index.png" alt="Book Index"></p><h3 id="文本分析"><a href="#文本分析" class="headerlink" title="文本分析"></a>文本分析</h3><p>在开始构建索引之前，我们需要将原始文本分解为一个适合索引和搜索的单词（标记）列表。</p><p>文本分析器由一个分词器器和多个过滤器组成。</p><p><img src="/articles/实现一个简单的全文检索引擎/text-analysis.png" alt></p><h4 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h4><p>分词器是文本分析的第一步。它的工作是将文本转换为标记列表。我们的实现在单词边界上拆分文本并删除标点符号：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tokenize</span><span class="params">(text <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> strings.FieldsFunc(text, <span class="function"><span class="keyword">func</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">        <span class="comment">// Split on any character that is not a letter or a number.</span></span><br><span class="line">        <span class="keyword">return</span> !unicode.IsLetter(r) &amp;&amp; !unicode.IsNumber(r)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; tokenize(<span class="string">"A donut on a glass plate. Only the donuts."</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">"A"</span>, <span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"a"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"Only"</span>, <span class="string">"the"</span>, <span class="string">"donuts"</span>]</span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>在大多数情况下，仅仅将文本转换为标记列表是不够的。为了使文本更易于索引和搜索，我们需要进行额外的规范化。</p><h5 id="大小写过滤"><a href="#大小写过滤" class="headerlink" title="大小写过滤"></a>大小写过滤</h5><p>为了使搜索不区分大小写，小写过滤器将标记转换为小写。cAt、Cat和caT规范化为cat。 稍后，当我们查询索引时，我们也会降低搜索词的大小写。这将使搜索词cAt能与文本cAt匹配。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lowercaseFilter</span><span class="params">(tokens []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    r := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(tokens))</span><br><span class="line">    <span class="keyword">for</span> i, token := <span class="keyword">range</span> tokens &#123;</span><br><span class="line">        r[i] = strings.ToLower(token)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; lowercaseFilter([]<span class="keyword">string</span>&#123;<span class="string">"A"</span>, <span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"a"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"Only"</span>, <span class="string">"the"</span>, <span class="string">"donuts"</span>&#125;)</span><br><span class="line"></span><br><span class="line">[<span class="string">"a"</span>, <span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"a"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"only"</span>, <span class="string">"the"</span>, <span class="string">"donuts"</span>]</span><br></pre></td></tr></table></figure><h5 id="去除停止语"><a href="#去除停止语" class="headerlink" title="去除停止语"></a>去除停止语</h5><p>几乎所有的英语文本都包含了像a，I，the或be这样的常用词。这样的话叫做停止语。我们将删除它们，因为几乎所有文档都会匹配停止字。<br>没有“官方”的停止语列表。我们把<a href="https://en.wikipedia.org/wiki/Most_common_words_in_English" target="_blank" rel="noopener">OEC rank</a>前10名排除在外。请根据需要添加：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stopwords = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123; <span class="comment">// I wish Go had built-in sets.</span></span><br><span class="line">    <span class="string">"a"</span>: &#123;&#125;, <span class="string">"and"</span>: &#123;&#125;, <span class="string">"be"</span>: &#123;&#125;, <span class="string">"have"</span>: &#123;&#125;, <span class="string">"i"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"in"</span>: &#123;&#125;, <span class="string">"of"</span>: &#123;&#125;, <span class="string">"that"</span>: &#123;&#125;, <span class="string">"the"</span>: &#123;&#125;, <span class="string">"to"</span>: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stopwordFilter</span><span class="params">(tokens []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    r := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(tokens))</span><br><span class="line">    <span class="keyword">for</span> _, token := <span class="keyword">range</span> tokens &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := stopwords[token]; !ok &#123;</span><br><span class="line">            r = <span class="built_in">append</span>(r, token)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; stopwordFilter([]<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"a"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"only"</span>, <span class="string">"the"</span>, <span class="string">"donuts"</span>&#125;)</span><br><span class="line"></span><br><span class="line">[<span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"only"</span>, <span class="string">"donuts"</span>]</span><br></pre></td></tr></table></figure><h5 id="去除多形词"><a href="#去除多形词" class="headerlink" title="去除多形词"></a>去除多形词</h5><p>由于语法规则，文档可能包含同一单词的不同形式。词干分析将单词简化为基本形式。例如，fishing、fished和fisher 可以简化为 fish 。</p><p>实现词干分析器是一项非常重要的任务，这篇文章不讨论它。我们将使用现有的模块之一</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> snowballeng <span class="string">"github.com/kljensen/snowball/english"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stemmerFilter</span><span class="params">(tokens []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    r := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(tokens))</span><br><span class="line">    <span class="keyword">for</span> i, token := <span class="keyword">range</span> tokens &#123;</span><br><span class="line">        r[i] = snowballeng.Stem(token, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; stemmerFilter([]<span class="keyword">string</span>&#123;<span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"only"</span>, <span class="string">"donuts"</span>&#125;)</span><br><span class="line"></span><br><span class="line">[<span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"only"</span>, <span class="string">"donut"</span>]</span><br></pre></td></tr></table></figure><p>注: 词干并不总是一个有效的词。例如，airline 和 airlin。</p><h5 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">analyze</span><span class="params">(text <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    tokens := tokenize(text)</span><br><span class="line">    tokens = lowercaseFilter(tokens)</span><br><span class="line">    tokens = stopwordFilter(tokens)</span><br><span class="line">    tokens = stemmerFilter(tokens)</span><br><span class="line">    <span class="keyword">return</span> tokens</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分词器和过滤器将句子转换成一个标记列表：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; analyze(<span class="string">"A donut on a glass plate. Only the donuts."</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"only"</span>, <span class="string">"donut"</span>]</span><br></pre></td></tr></table></figure><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>回到反向索引, 它将文档中的每个单词映射到文档id。map是存储映射的一个很好选择。map中的键是一个令牌（字符串），值是一个文档ID列表：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> index <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>建立索引包括分析文档并将其ID添加到映射关系中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(idx index)</span> <span class="title">add</span><span class="params">(docs []document)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, doc := <span class="keyword">range</span> docs &#123;</span><br><span class="line">        <span class="keyword">for</span> _, token := <span class="keyword">range</span> analyze(doc.Text) &#123;</span><br><span class="line">            ids := idx[token]</span><br><span class="line">            <span class="keyword">if</span> ids != <span class="literal">nil</span> &amp;&amp; ids[<span class="built_in">len</span>(ids)<span class="number">-1</span>] == doc.ID &#123;</span><br><span class="line">                <span class="comment">// Don't add same ID twice.</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            idx[token] = <span class="built_in">append</span>(ids, doc.ID)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    idx := <span class="built_in">make</span>(index)</span><br><span class="line">    idx.add([]document&#123;&#123;ID: <span class="number">1</span>, Text: <span class="string">"A donut on a glass plate. Only the donuts."</span>&#125;&#125;)</span><br><span class="line">    idx.add([]document&#123;&#123;ID: <span class="number">2</span>, Text: <span class="string">"donut is a donut"</span>&#125;&#125;)</span><br><span class="line">    fmt.Println(idx)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span>[donut:[<span class="number">1</span> <span class="number">2</span>] glass:[<span class="number">1</span>] is:[<span class="number">2</span>] on:[<span class="number">1</span>] only:[<span class="number">1</span>] plate:[<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><h3 id="索引检索"><a href="#索引检索" class="headerlink" title="索引检索"></a>索引检索</h3><p>要查询索引，我们将应用用于索引的相同标记器和过滤器：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(idx index)</span> <span class="title">search</span><span class="params">(text <span class="keyword">string</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> r [][]<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> _, token := <span class="keyword">range</span> analyze(text) &#123;</span><br><span class="line">        <span class="keyword">if</span> ids, ok := idx[token]; ok &#123;</span><br><span class="line">            r = <span class="built_in">append</span>(r, ids)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; idx.search(<span class="string">"Small wild cat"</span>)</span><br><span class="line"></span><br><span class="line">[[<span class="number">24</span>, <span class="number">173</span>, <span class="number">303</span>, ...], [<span class="number">98</span>, <span class="number">173</span>, <span class="number">765</span>, ...], [[<span class="number">24</span>, <span class="number">51</span>, <span class="number">173</span>, ...]]</span><br></pre></td></tr></table></figure><p>最后，我们可以找到所有提到猫的文件。搜索60万个文档所用时间不到1毫秒（18微秒）！</p><p>使用反向索引时，搜索查询的时间复杂度与搜索词的数量成线性关系。在上面的示例查询中，除了分析输入文本外，search只需执行三次map查找。</p><h3 id="Boolean检索"><a href="#Boolean检索" class="headerlink" title="Boolean检索"></a>Boolean检索</h3><p>上一节中的查询为每个令牌返回一个分离的文档列表。当我们在搜索框中输入small wild cat时，我们通常期望找到的是同时包含small、wild和cat的结果列表。下一步是计算列表之间的集合交集。这样我们将得到一个匹配所有令牌的文档列表。</p><p><img src="/articles/实现一个简单的全文检索引擎/venn.png" alt></p><p>幸运的是，反向索引中的id是按升序插入的。由于ID是排序的，所以可以在线性时间内计算两个列表之间的交集。intersection函数同时迭代两个列表，并收集两个列表中存在的ID：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(a []<span class="keyword">int</span>, b []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    maxLen := <span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(b) &gt; maxLen &#123;</span><br><span class="line">        maxLen = <span class="built_in">len</span>(b)</span><br><span class="line">    &#125;</span><br><span class="line">    r := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, maxLen)</span><br><span class="line">    <span class="keyword">var</span> i, j <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> i &lt; <span class="built_in">len</span>(a) &amp;&amp; j &lt; <span class="built_in">len</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span> a[i] &lt; b[j] &#123;</span><br><span class="line">            i++</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> a[i] &gt; b[j] &#123;</span><br><span class="line">            j++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = <span class="built_in">append</span>(r, a[i])</span><br><span class="line">            i++</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新的文本分析给定的查询文本、查找标记并计算ID列表之间的集合交集：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(idx index)</span> <span class="title">search</span><span class="params">(text <span class="keyword">string</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> r []<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> _, token := <span class="keyword">range</span> analyze(text) &#123;</span><br><span class="line">        <span class="keyword">if</span> ids, ok := idx[token]; ok &#123;</span><br><span class="line">            <span class="keyword">if</span> r == <span class="literal">nil</span> &#123;</span><br><span class="line">                r = ids</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = intersection(r, ids)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Token doesn't exist.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wikipedia dump 同时包含匹配 small、wild和cat的两个文档：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; idx.search(<span class="string">"Small wild cat"</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">130764</span>  The wildcat is a species <span class="built_in">complex</span> comprising two small wild cat species, the European wildcat (Felis silvestris) and the African wildcat (F. lybica).</span><br><span class="line"><span class="number">131692</span>  Catopuma is a genus containing two Asian small wild cat species, the Asian golden cat (C. temminckii) and the bay cat.</span><br></pre></td></tr></table></figure><p>搜索顺利完成。  </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们刚刚建立了一个全文搜索引擎。尽管它简单，它可以为更先进的项目奠定坚实的基础。</p><p>文中没有提到很多可以显著提高性能和使搜索引擎更人性化的东西。以下是一些进一步改进的想法：</p><ul><li><p>扩展布尔查询以支持 <em>OR</em> 和 <em>NOT</em> ;</p></li><li><p>在磁盘上存储索引：</p><ul><li><p>每次重新启动应用程序时重建索引可能需要一段时间;</p></li><li><p>大索引可能无法放入内存;</p></li></ul></li><li><p>尝试使用内存和CPU高效的数据格式来存储文档ID集;</p></li><li><p>支持索引多个文档字段;</p></li><li><p>按相关性对结果排序;</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://artem.krylysov.com/blog/2020/07/28/lets-build-a-full-text-search-engine/" target="_blank" rel="noopener">lets-build-a-full-text-search-engine - krylysov </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;全文检索是人们每天都在使用的工具之一。如果你曾经在google上搜索过“golang使用情况”或试图在电子商务网站上找到“室内无线摄像头”，你都会使用某种全文检索。&lt;/p&gt;
&lt;p&gt;全文检索（FTS）是一种在文档集合中搜索文本的技术。文档可以引用网页、报纸文章、电子邮件或其他
      
    
    </summary>
    
      <category term="数据库" scheme="https://ya2.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>平滑升级PHP版本</title>
    <link href="https://ya2.top/articles/%E5%B9%B3%E6%BB%91%E5%8D%87%E7%BA%A7PHP%E7%89%88%E6%9C%AC/"/>
    <id>https://ya2.top/articles/平滑升级PHP版本/</id>
    <published>2020-08-14T09:41:35.000Z</published>
    <updated>2022-07-27T16:12:46.199Z</updated>
    
    <content type="html"><![CDATA[<p>网上能搜到的中文内容，根本不算无缝升级，既然敢叫无缝升级，那就是真的不关机，不中断服务，并且还能保证出问题能100%退回原来的版本。  </p><h3 id="一、获取原来的编译参数"><a href="#一、获取原来的编译参数" class="headerlink" title="一、获取原来的编译参数"></a>一、获取原来的编译参数</h3><p>使用命令   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -i | grep configure</span><br></pre></td></tr></table></figure><p><img src="/articles/平滑升级PHP版本/1.png" alt></p><p>把 ‘’ 去掉就是原来的编译参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure  --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --enable-inline-optimization --disable-debug --disable-rpath --enable-shared --enable-opcache --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-gettext --enable-mbstring --with-iconv --with-mcrypt --with-mhash --with-openssl --enable-bcmath --enable-soap --with-libxml-dir --enable-pcntl --enable-shmop --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-sockets --with-curl --with-zlib --enable-zip --with-bz2 --with-readline --with-gd --enable-gd-native-ttf --enable-gd-jis-conv</span><br></pre></td></tr></table></figure><p>更改其中安装目录防止与现有版本冲突</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--prefix=/usr/local/php/ --with-config-file-path=/usr/local/php/etc/</span><br></pre></td></tr></table></figure><p>现在改成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--prefix=/usr/local/php7.3/ --with-config-file-path=/usr/local/php7.3/etc/</span><br></pre></td></tr></table></figure><p>然后就生成 Makefile 文件， <code>make &amp;&amp; make install</code> 这里没什么好说的。  </p><h3 id="二、复制配置文件"><a href="#二、复制配置文件" class="headerlink" title="二、复制配置文件"></a>二、复制配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mv PHP7.3安装目录/etc/php-fpm.conf.default        PHP7.3安装目录/etc/php-fpm.conf</span><br><span class="line"></span><br><span class="line">mv PHP7.3源码目录/php.ini-development             PHP7.3安装目录/etc/php.ini</span><br><span class="line"></span><br><span class="line">mv PHP7.3安装目录/etc/php-fpm.d/www.conf.default  PHP7.3安装目录/etc/php-fpm.d/www.conf</span><br></pre></td></tr></table></figure><h3 id="三、修改新的配置文件"><a href="#三、修改新的配置文件" class="headerlink" title="三、修改新的配置文件"></a>三、修改新的配置文件</h3><ol><li><p>php.ini 里面的扩展库路径，否则将会抛出警告，扩展不可用</p></li><li><p>php-fpm.conf 里面的 include=/usr/local/php7.3/etc/php-fpm.d/*.conf  </p></li><li><p><a href="http://www.conf" target="_blank" rel="noopener">www.conf</a> 里面的 listen  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;listen = 127.0.0.1:9000 ;原</span><br><span class="line"></span><br><span class="line">listen = 127.0.0.1:9001 ;新</span><br></pre></td></tr></table></figure></li></ol><p>新旧版本各监听不同端口。  </p><h3 id="四、启动新的-php-fpm"><a href="#四、启动新的-php-fpm" class="headerlink" title="四、启动新的 php-fpm"></a>四、启动新的 php-fpm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/php7.3/sbin/php-fpm</span><br></pre></td></tr></table></figure><p>此时两个版本将共同存在   </p><h3 id="五、测试新的-php-fpm"><a href="#五、测试新的-php-fpm" class="headerlink" title="五、测试新的 php-fpm"></a>五、测试新的 php-fpm</h3><p>打开你的 nginx 配置文件，找到  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> location ~ \.php$ &#123;</span><br><span class="line">fastcgi_pass   127.0.0.1:9001; # 改成新的端口</span><br><span class="line">fastcgi_index  index.php; </span><br><span class="line">fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">include        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改成新的监听地址, 重新载入 nginx 配置文件  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>测试网站没有问题就关掉旧版本的 php-fpm，有问题就修改 nginx 配置文件，使用旧的 php-fpm。</p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>大家可能也看出来了，这种升级方式事实上就是主机上安装多版本PHP，然后进行php-fpm的切换而已。这种方式不仅适用于PHP，其他如mysql,redis等均可适用。但是需要注意各个版本之间的代码差别，防止因版本改变而产生语法错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网上能搜到的中文内容，根本不算无缝升级，既然敢叫无缝升级，那就是真的不关机，不中断服务，并且还能保证出问题能100%退回原来的版本。  &lt;/p&gt;
&lt;h3 id=&quot;一、获取原来的编译参数&quot;&gt;&lt;a href=&quot;#一、获取原来的编译参数&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="PHP" scheme="https://ya2.top/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>两种简单方案实现LBS</title>
    <link href="https://ya2.top/articles/%E4%B8%A4%E7%A7%8D%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88%E5%AE%9E%E7%8E%B0LBS/"/>
    <id>https://ya2.top/articles/两种简单方案实现LBS/</id>
    <published>2020-07-27T10:15:23.000Z</published>
    <updated>2022-07-27T16:11:49.944Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方案一：-Mysql"><a href="#方案一：-Mysql" class="headerlink" title="方案一： Mysql"></a>方案一： Mysql</h3><h4 id="通过球面两点距离公式"><a href="#通过球面两点距离公式" class="headerlink" title="通过球面两点距离公式"></a>通过球面两点距离公式</h4><blockquote><p>$ AB = R * \arccos{( \cos{wA} * \cos{wB} * \cos{jB-jA} + \sin{wA}*\sin{wB})}$<br>其中 A（jA,wA）和B（jB，wB）,推导过程见<a href="http://www.360doc.com/content/14/0117/10/325430_345890919.shtml" target="_blank" rel="noopener">这里</a></p></blockquote><p>对于大部分已经使用MySQL的应用来说，使用这种方案没有任何迁移和部署成本，但使用SQL语句进行查询的缺点也显而易见，每条SQL的计算量都会非常大，性能将会是严重的问题。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> address (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> (<span class="number">11</span>) AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">CHAR</span> (<span class="number">80</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">lat <span class="built_in">CHAR</span> (<span class="number">10</span>),</span><br><span class="line">lng <span class="built_in">CHAR</span> (<span class="number">10</span>),</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> address(<span class="keyword">name</span>,lat,lng) <span class="keyword">VALUES</span></span><br><span class="line"> (<span class="string">'成都'</span>, <span class="number">30.659673</span>,<span class="number">104.068433</span>)</span><br><span class="line">,(<span class="string">'绵阳'</span>, <span class="number">31.473909</span>,<span class="number">104.680961</span>)</span><br><span class="line">,(<span class="string">'泸州'</span>, <span class="number">28.876403</span>,<span class="number">105.450251</span>) </span><br><span class="line">,(<span class="string">'德阳'</span>, <span class="number">31.134847</span>,<span class="number">104.408441</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">id</span>,<span class="keyword">name</span>, (</span><br><span class="line">      <span class="number">6371</span> * <span class="keyword">acos</span> (    <span class="comment"># 3959是地球半径的英里，6371是地球半径的千米</span></span><br><span class="line">      <span class="keyword">cos</span> ( <span class="keyword">radians</span>(<span class="number">30.452034</span>) )</span><br><span class="line">      * <span class="keyword">cos</span>( <span class="keyword">radians</span>( lat ) )</span><br><span class="line">      * <span class="keyword">cos</span>( <span class="keyword">radians</span>( lng ) - <span class="keyword">radians</span>(<span class="number">106.644153</span>) )</span><br><span class="line">      + <span class="keyword">sin</span> ( <span class="keyword">radians</span>(<span class="number">30.452034</span>) )</span><br><span class="line">      * <span class="keyword">sin</span>( <span class="keyword">radians</span>( lat ) )</span><br><span class="line">    )</span><br><span class="line">) <span class="keyword">AS</span> distance</span><br><span class="line"><span class="keyword">FROM</span> address</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> distance</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span> , <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或通过 st_distance_sphere 函数计算</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">name</span>,</span><br><span class="line"><span class="keyword">round</span>( st_distance_sphere ( point ( <span class="number">106.644153</span>, <span class="number">30.452034</span> ), point ( lng, lat ))/ <span class="number">1000</span>, <span class="number">2</span> ) <span class="keyword">AS</span> distance </span><br><span class="line"><span class="keyword">FROM</span> address </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> distance <span class="keyword">ASC</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 3泸州209.7647687926011</span></span><br><span class="line"><span class="comment"> 2绵阳218.97099731812352</span></span><br><span class="line"><span class="comment"> 4德阳226.64161541779157</span></span><br><span class="line"><span class="comment"> 1成都247.70751793832144</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="通过空间存储-spatial"><a href="#通过空间存储-spatial" class="headerlink" title="通过空间存储(spatial)"></a>通过空间存储(spatial)</h4><p>MySQL的空间扩展（MySQL Spatial Extensions），它允许在MySQL中直接处理、保存和分析地理位置相关的信息，但是需要手动排序（请忽略distance字段）。文档可见<a href="https://dev.mysql.com/doc/refman/8.0/en/spatial-types.html" target="_blank" rel="noopener">这里</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> address (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> (<span class="number">11</span>) AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">CHAR</span> (<span class="number">80</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">point POINT <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> address <span class="keyword">ADD</span> SPATIAL <span class="keyword">INDEX</span>(point);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> address(<span class="keyword">name</span>,point,lat,lng) <span class="keyword">VALUES</span></span><br><span class="line"> (<span class="string">'成都'</span>, GeomFromText(<span class="string">'POINT(30.659673 104.068433)'</span>))</span><br><span class="line">,(<span class="string">'绵阳'</span>, GeomFromText(<span class="string">'POINT(31.473909 104.680961)'</span>))</span><br><span class="line">,(<span class="string">'泸州'</span>, GeomFromText(<span class="string">'POINT(28.876403 105.450251)'</span>)) </span><br><span class="line">,(<span class="string">'德阳'</span>, GeomFromText(<span class="string">'POINT(31.134847 104.408441)'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询： 查找坐标(30.452034,106.644153)附近 220 公里内的城市</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">id</span>,<span class="keyword">name</span>,(</span><br><span class="line">          <span class="number">6371</span> * <span class="keyword">acos</span> (    <span class="comment"># 3959是地球半径的英里，6371是地球半径的千米</span></span><br><span class="line">          <span class="keyword">cos</span> ( <span class="keyword">radians</span>(<span class="number">30.452034</span>) )</span><br><span class="line">          * <span class="keyword">cos</span>( <span class="keyword">radians</span>( lat ) )</span><br><span class="line">          * <span class="keyword">cos</span>( <span class="keyword">radians</span>( lng ) - <span class="keyword">radians</span>(<span class="number">106.644153</span>) )</span><br><span class="line">          + <span class="keyword">sin</span> ( <span class="keyword">radians</span>(<span class="number">30.452034</span>) )</span><br><span class="line">          * <span class="keyword">sin</span>( <span class="keyword">radians</span>( lat ) )</span><br><span class="line">        )</span><br><span class="line">    ) <span class="keyword">AS</span> distance <span class="comment"># 仅供结果可视，非必须</span></span><br><span class="line">    <span class="keyword">FROM</span>    address</span><br><span class="line">    <span class="keyword">WHERE</span>   MBRContains (</span><br><span class="line">                LineString(</span><br><span class="line">                        Point (</span><br><span class="line">                                <span class="number">30.452034</span> + <span class="number">220</span> / ( <span class="number">111.1</span> / <span class="keyword">COS</span>(<span class="keyword">RADIANS</span>(<span class="number">30.452034</span>))), // <span class="number">1</span>弧度 = <span class="number">111.1</span></span><br><span class="line">                                <span class="number">106.644153</span> + <span class="number">220</span> / <span class="number">111.1</span></span><br><span class="line">                          ),</span><br><span class="line">                        Point (</span><br><span class="line">                                <span class="number">30.452034</span> - <span class="number">220</span> / ( <span class="number">111.1</span> / <span class="keyword">COS</span>(<span class="keyword">RADIANS</span>(<span class="number">30.452034</span>))),</span><br><span class="line">                                <span class="number">106.644153</span> - <span class="number">220</span> / <span class="number">111.1</span></span><br><span class="line">                        ) </span><br><span class="line">                ), point)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 2绵阳218.97099731812352</span></span><br><span class="line"><span class="comment"> 3泸州209.7647687926011</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="通过Geohash算法"><a href="#通过Geohash算法" class="headerlink" title="通过Geohash算法"></a>通过Geohash算法</h4><p>GeoHash是一种地址编码，通过切分地图区域为小方块（切分次数越多，精度越高），它能把二维的经纬度编码成一维的字符串。也就是说，理论上geohash字符串表示的并不是一个点，而是一个矩形区域，只要矩形区域足够小，达到所需精度即可。（MongoDB的索引也是基于geohash）</p><p>如：wm3yr31d252414ux就是目前我所在的位置，降低一些精度，就会是wm3yr31d2524，再降低一些精度，就会是wm3yr。</p><p>所以这样一来，我们就可以在MySQL中用LIKE ‘wm3yr%’来限定区域范围查询目标点，并且可以对结果集做缓存。更不会因为微小的经纬度变化而无法用上数据库的Query Cache。</p><p>这种方案的优点显而易见，仅用一个字符串保存经纬度信息，并且精度由字符串从头到尾的长度决定，可以方便索引。</p><p>但这种方案的缺点是：从geohash的编码算法中可以看出，靠近每个方块边界两侧的点虽然十分接近，但所属的编码会完全不同。实际应用中，虽然可以通过去搜索环绕当前方块周围的8个方块来解决该问题，但一下子将原来只需要1次SQL查询变成了需要查询9次，这样不仅增大了查询量，也将原本简单的方案复杂化了。除此之外，这个方案也无法直接得到距离，需要程序协助进行后续的排序计算。</p><p><strong>geohash的编码算法</strong></p><p>成都永丰立交经纬度(30.63578,104.031601)</p><p>1)、纬度范围(-90, 90)平分成两个区间(-90, 0)、(0, 90)， 如果目标纬度位于前一个区间，则编码为0，否则编码为1。</p><p>由于30.625265属于(0, 90)，所以取编码为1。</p><p>然后再将(0, 90)分成 (0, 45), (45, 90)两个区间，而39.92324位于(0, 45)，所以编码为0</p><p>然后再将(0, 45)分成 (0, 22.5), (22.5, 45)两个区间，而39.92324位于(22.5, 45)，所以编码为1</p><p>依次类推可得永丰立交纬度编码为101010111001001000100101101010。</p><p>2)、经度也用同样的算法，对(-180, 180)依次细分，(-180，0)、(0,180) 得出编码110010011111101001100000000000</p><p>3)、合并经纬度编码，从高到低，先取一位经度，再取一位纬度；得出结果 111001001100011111101011100011000010110000010001010001000100</p><p>4)、用0-9、b-z（去掉a, i, l, o）这32个字母进行base32编码，得到(30.63578,104.031601)的编码为wm3yr31d2524。</p><p>11100 10011 00011 11110 10111 00011 00001 01100 00010 00101 00010 00100 =&gt; <a href="http://geohash.org/wm3yr31d2524" target="_blank" rel="noopener">wm3yr31d2524</a></p><p>算法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeoHash</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base32编码映射关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> DIGITS = [<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>,</span><br><span class="line">        <span class="string">'9'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'p'</span>,</span><br><span class="line">        <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精确度，值越大越精准, 建议此处使用5的倍数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> MAX = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GeoHash encode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $lng</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">encode</span><span class="params">($lat, $lng)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::base32_encode(<span class="keyword">self</span>::combine(<span class="keyword">self</span>::dec2bit($lat, <span class="number">-90</span>, <span class="number">90</span>), <span class="keyword">self</span>::dec2bit($lng, <span class="number">-180</span>, <span class="number">180</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GeoHash decode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $val</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">decode</span><span class="params">($val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $encode = <span class="keyword">self</span>::base32_decode($val);</span><br><span class="line">        <span class="keyword">list</span>($elat, $elng) = <span class="keyword">self</span>::spilt($encode);</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">self</span>::bit2dec($elat, <span class="number">-90</span>, <span class="number">90</span>), <span class="keyword">self</span>::bit2dec($elng, <span class="number">-180</span>, <span class="number">180</span>)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将十进制转换成二进制经纬度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> float $v 十进制经纬度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> float $l 左阈值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> float $r 右阈值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">dec2bit</span><span class="params">($v, $l, $r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $s = <span class="string">''</span>;</span><br><span class="line">        $max = <span class="keyword">self</span>::MAX;</span><br><span class="line">        <span class="keyword">while</span> ($max--) &#123;</span><br><span class="line">            $mid = ($l + $r) / <span class="number">2</span>;</span><br><span class="line">            $d = $mid &gt; $v ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ($d) &#123;</span><br><span class="line">                $l = $mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $r = $mid;</span><br><span class="line">            &#125;</span><br><span class="line">            $s .= $d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 经纬度编码值合并</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $elat 二进制维度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $elng 二进制经度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">combine</span><span class="params">($elat, $elng)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $c = <span class="string">''</span>;</span><br><span class="line">        $max = <span class="keyword">self</span>::MAX;</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $max; $i++) &#123;</span><br><span class="line">            $c .= $elng[$i] . $elat[$i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * base32编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $s 合并后的经纬度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">base32_encode</span><span class="params">($s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $r = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($s); $i += <span class="number">5</span>) &#123;</span><br><span class="line">            $sub = str_pad(substr($s, $i, <span class="number">5</span>), <span class="number">5</span>, <span class="number">0</span>, STR_PAD_RIGHT);</span><br><span class="line">            $num = base_convert($sub,<span class="number">2</span>,<span class="number">10</span>);</span><br><span class="line">            $r .= <span class="keyword">self</span>::DIGITS[$num];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * base32解码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $s GeoHash.encode的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">base32_decode</span><span class="params">($s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $r = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($s); $i++) &#123;</span><br><span class="line">            $v = array_search($s[$i], <span class="keyword">self</span>::DIGITS);</span><br><span class="line">            $b = str_pad(base_convert($v, <span class="number">10</span>, <span class="number">2</span>), <span class="number">5</span>, <span class="number">0</span>, STR_PAD_LEFT);</span><br><span class="line">            $r .= $b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 经纬度拆分</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $s 将合并的经纬度拆出来</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">spilt</span><span class="params">($s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $lat = <span class="string">''</span>;</span><br><span class="line">        $lng = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($s); $i += <span class="number">2</span>) &#123;</span><br><span class="line">            $lng .= $s[$i];</span><br><span class="line">            $lat .= $s[$i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [$lat, $lng];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二进制转换成十进制经纬度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> float $s 二进制经纬度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> float $l 左阈值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> float $r 右阈值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float|int|string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bit2dec</span><span class="params">($s, $l, $r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $k = <span class="string">''</span>;</span><br><span class="line">        $mid = ($l + $r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($s); $i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($s[$i]) &#123;</span><br><span class="line">                $l = $mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $r = $mid;</span><br><span class="line">            &#125;</span><br><span class="line">            $mid = ($l + $r) / <span class="number">2</span>;</span><br><span class="line">            $k = $mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Testing</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$lat = <span class="number">30.63578</span>;</span><br><span class="line">$lng = <span class="number">104.031601</span>;</span><br><span class="line">var_dump(<span class="string">"初始值: $lat,$lng"</span>);</span><br><span class="line">var_dump(<span class="string">"编码后: "</span> . ($s = GeoHash::encode($lat, $lng)));</span><br><span class="line">var_dump(<span class="string">"解码后: "</span> . (implode(<span class="string">','</span>, GeoHash::decode($s))));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出</span></span><br><span class="line"><span class="comment">string(30) "初始值: 30.63578,104.031601"</span></span><br><span class="line"><span class="comment">string(27) "编码后: wm3yr31d252414ux"</span></span><br><span class="line"><span class="comment">string(41) "解码后: 30.63577999993,104.03160100012"</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="方案二：-MongoDB"><a href="#方案二：-MongoDB" class="headerlink" title="方案二： MongoDB"></a>方案二： MongoDB</h3><p>MongoDB原生支持地理位置索引，可以直接用于位置距离计算和查询。</p><p>另外，它也是如今最流行的NoSQL数据库之一，除了能够很好地支持地理位置计算之外，还拥有诸如面向集合存储、模式自由、高性能、支持复杂查询、支持完全索引等等特性。查询结果默认将会由近到远排序，而且查询结果也包含目标点对象、距离目标点的距离等信息。由于geoNear是MongoDB原生支持的查询函数，所以性能上也做到了高度的优化，完全可以应付生产环境的压力。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line">db.location.insert(&#123;</span><br><span class="line">      "xian":"成都",</span><br><span class="line">      "sheng":"四川",</span><br><span class="line">      "center":&#123; "type":"Point","coordinates":[104.068433,30.659673]&#125;</span><br><span class="line">&#125;);</span><br><span class="line">db.location.insert(&#123;</span><br><span class="line">      "xian":"绵阳",</span><br><span class="line">      "sheng":"四川",</span><br><span class="line">      "center":&#123; "type":"Point","coordinates":[104.680961,31.473909]&#125;</span><br><span class="line">&#125;);</span><br><span class="line">db.location.insert(&#123;</span><br><span class="line">      "xian":"泸州",</span><br><span class="line">      "sheng":"四川",</span><br><span class="line">      "center":&#123; "type":"Point","coordinates":[105.450251,28.876403]&#125;</span><br><span class="line">&#125;);</span><br><span class="line">db.location.insert(&#123;</span><br><span class="line">      "xian":"德阳",</span><br><span class="line">      "sheng":"四川",</span><br><span class="line">      "center":&#123; "type":"Point","coordinates":[104.408441,31.134847]&#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建 2dsphere索引</span></span><br><span class="line">db.location.createIndex(&#123;"center":"2dsphere"&#125;); # 或 db.location.ensureIndex( &#123; center : "2dsphere" &#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询: 这种方法可以返回的由近及远的点，但是不能获取距离，支持分页查询</span></span><br><span class="line">db.location.find(&#123;</span><br><span class="line">  center:&#123;</span><br><span class="line">     $near:&#123;</span><br><span class="line">       $geometry:&#123;</span><br><span class="line">          type:"Point",</span><br><span class="line">          coordinates:[106.644153,30.452034]</span><br><span class="line">       &#125;,</span><br><span class="line">       $maxDistance: 500000 </span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).limit(3);</span><br><span class="line"><span class="comment">/** 查询结果</span></span><br><span class="line"><span class="comment">&#123; "_id" : ObjectId("5f1e4e971a9a5bb3e50e17d3"), "xian" : "泸州", "sheng" : "四川", "center" : &#123; "type" : "Point", "coordinates" : [ 105.450251, 28.876403 ] &#125; &#125;</span></span><br><span class="line"><span class="comment">&#123; "_id" : ObjectId("5f1e4e971a9a5bb3e50e17d2"), "xian" : "绵阳", "sheng" : "四川", "center" : &#123; "type" : "Point", "coordinates" : [ 104.680961, 31.473909 ] &#125; &#125;</span></span><br><span class="line"><span class="comment">&#123; "_id" : ObjectId("5f1e4e991a9a5bb3e50e17d4"), "xian" : "德阳", "sheng" : "四川", "center" : &#123; "type" : "Point", "coordinates" : [ 104.408441, 31.134847 ] &#125; &#125;</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询：这种方法更加灵活，可以返回距离，还可以指定查询条件等,但是不可以分页</span></span><br><span class="line"></span><br><span class="line">db.runCommand( &#123;</span><br><span class="line">   geoNear: "location" ,</span><br><span class="line">   near: &#123; </span><br><span class="line">      type: "Point" , </span><br><span class="line">      coordinates: [106.644153,30.452034]</span><br><span class="line">    &#125; ,</span><br><span class="line">   spherical: true,</span><br><span class="line">   limit:3</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 查询结果</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">        "results" : [</span></span><br><span class="line"><span class="comment">                &#123;</span></span><br><span class="line"><span class="comment">                        "dis" : 209998.53583992278,// 距离查询点距离，单位：米</span></span><br><span class="line"><span class="comment">                        "obj" : &#123;</span></span><br><span class="line"><span class="comment">                                "_id" : ObjectId("5f1e4e971a9a5bb3e50e17d3"),</span></span><br><span class="line"><span class="comment">                                "xian" : "泸州",</span></span><br><span class="line"><span class="comment">                                "sheng" : "四川",</span></span><br><span class="line"><span class="comment">                                "center" : &#123;</span></span><br><span class="line"><span class="comment">                                        "type" : "Point",</span></span><br><span class="line"><span class="comment">                                        "coordinates" : [</span></span><br><span class="line"><span class="comment">                                                105.450251,</span></span><br><span class="line"><span class="comment">                                                28.876403</span></span><br><span class="line"><span class="comment">                                        ]</span></span><br><span class="line"><span class="comment">                                &#125;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                &#125;,</span></span><br><span class="line"><span class="comment">                &#123;</span></span><br><span class="line"><span class="comment">                        "dis" : 219215.02401424237,</span></span><br><span class="line"><span class="comment">                        "obj" : &#123;</span></span><br><span class="line"><span class="comment">                                "_id" : ObjectId("5f1e4e971a9a5bb3e50e17d2"),</span></span><br><span class="line"><span class="comment">                                "xian" : "绵阳",</span></span><br><span class="line"><span class="comment">                                "sheng" : "四川",</span></span><br><span class="line"><span class="comment">                                "center" : &#123;</span></span><br><span class="line"><span class="comment">                                        "type" : "Point",</span></span><br><span class="line"><span class="comment">                                        "coordinates" : [</span></span><br><span class="line"><span class="comment">                                                104.680961,</span></span><br><span class="line"><span class="comment">                                                31.473909</span></span><br><span class="line"><span class="comment">                                        ]</span></span><br><span class="line"><span class="comment">                                &#125;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                &#125;,</span></span><br><span class="line"><span class="comment">                &#123;</span></span><br><span class="line"><span class="comment">                        "dis" : 226894.19044046788,</span></span><br><span class="line"><span class="comment">                        "obj" : &#123;</span></span><br><span class="line"><span class="comment">                                "_id" : ObjectId("5f1e4e991a9a5bb3e50e17d4"),</span></span><br><span class="line"><span class="comment">                                "xian" : "德阳",</span></span><br><span class="line"><span class="comment">                                "sheng" : "四川",</span></span><br><span class="line"><span class="comment">                                "center" : &#123;</span></span><br><span class="line"><span class="comment">                                        "type" : "Point",</span></span><br><span class="line"><span class="comment">                                        "coordinates" : [</span></span><br><span class="line"><span class="comment">                                                104.408441,</span></span><br><span class="line"><span class="comment">                                                31.134847</span></span><br><span class="line"><span class="comment">                                        ]</span></span><br><span class="line"><span class="comment">                                &#125;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">        "stats" : &#123;</span></span><br><span class="line"><span class="comment">                "nscanned" : 5,</span></span><br><span class="line"><span class="comment">                "objectsLoaded" : 4,</span></span><br><span class="line"><span class="comment">                "avgDistance" : 218702.58343154436,</span></span><br><span class="line"><span class="comment">                "maxDistance" : 226894.19044046788,</span></span><br><span class="line"><span class="comment">                "time" : 0</span></span><br><span class="line"><span class="comment">        &#125;,</span></span><br><span class="line"><span class="comment">        "ok" : 1</span></span><br><span class="line"><span class="comment">&#125;**/</span></span><br></pre></td></tr></table></figure><h3 id="附录：两点距离算法"><a href="#附录：两点距离算法" class="headerlink" title="附录：两点距离算法"></a>附录：两点距离算法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取两点间的距离</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> float $latitude1 纬度1</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> float $longitude1 经度1</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> float $latitude2 纬度2</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> float $longitude2 经度2</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> string $unit 单位: Km/Mi</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> false|float</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getDistanceBetweenPointsNew</span><span class="params">($latitude1, $longitude1, $latitude2, $longitude2, $unit = <span class="string">'Mi'</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     $theta = $longitude1 - $longitude2;</span><br><span class="line">     $distance = (sin(deg2rad($latitude1)) * sin(deg2rad($latitude2))) + (cos(deg2rad($latitude1)) * cos(deg2rad($latitude2)) * cos(deg2rad($theta)));</span><br><span class="line">     $distance = acos($distance);</span><br><span class="line">     $distance = rad2deg($distance);</span><br><span class="line">     $distance = $distance * <span class="number">60</span> * <span class="number">1.1515</span>;</span><br><span class="line">     <span class="keyword">switch</span> (strtolower($unit)) &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'mi'</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'km'</span> :</span><br><span class="line">             $distance = $distance * <span class="number">1.609344</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> (round($distance, <span class="number">2</span>));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;方案一：-Mysql&quot;&gt;&lt;a href=&quot;#方案一：-Mysql&quot; class=&quot;headerlink&quot; title=&quot;方案一： Mysql&quot;&gt;&lt;/a&gt;方案一： Mysql&lt;/h3&gt;&lt;h4 id=&quot;通过球面两点距离公式&quot;&gt;&lt;a href=&quot;#通过球面两点距离公式&quot;
      
    
    </summary>
    
      <category term="数据库" scheme="https://ya2.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis Transactions</title>
    <link href="https://ya2.top/articles/Redis-Transactions/"/>
    <id>https://ya2.top/articles/Redis-Transactions/</id>
    <published>2020-07-21T14:33:44.000Z</published>
    <updated>2022-07-27T16:11:59.782Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>所谓事务(Transaction) ，是指作为单个逻辑工作单元执行的一系列操作。事务必须满足ACID原则(原子性、一致性、隔离性和持久性)。简单来说事务其实就是打包一组操作（或者命令）作为一个整体，在事务处理时将顺序执行这些操作，并返回结果，如果其中任何一个环节出错，所有的操作将被回滚。</p><p>事务的四大特性(<strong>ACID</strong>)：</p><ul><li><strong>原子性</strong> 事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做 </li><li><strong>一致性</strong>  事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。 </li><li><strong>隔离性</strong> 一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。 </li><li><strong>持续性</strong> 也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。 </li></ul><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><p>当程序中可能出现并发的情况时，就需要通过一定的手段来保证在并发情况下数据的准确性，通过这种手段保证了当前用户和其他用户一起操作时，所得到的结果和他单独操作时的结果是一样的。这种手段就叫做并发控制。并发控制的目的是保证一个用户的工作不会对另一个用户的工作产生不合理的影响。</p><p><img src="/articles/Redis-Transactions/1.jpg" alt></p><p>常说的并发控制，一般都和数据库管理系统（DBMS）有关。在DBMS中的并发控制的任务，是确保在多个事务同时存取数据库中同一数据时，不破坏事务的隔离性和统一性以及数据库的统一性。</p><p><strong>锁（LOCKING）</strong>便是最常用的并发控制机构，是防止其他事务访问指定的资源控制、实现并发控制的一种主要手段。</p><p>实现并发控制的主要手段大致可以分为乐观并发控制和悲观并发控制两种。</p><h5 id="悲观锁-Pessimistic-Lock"><a href="#悲观锁-Pessimistic-Lock" class="headerlink" title="悲观锁(Pessimistic Lock)"></a>悲观锁(Pessimistic Lock)</h5><p>当要对数据库中的一条数据进行修改的时候，为了避免同时被其他人修改，最好的办法就是直接对该数据进行加锁以防止并发。这种借助数据库锁机制，在修改数据之前先锁定，再修改的方式被称之为悲观并发控制【又名“悲观锁”，Pessimistic Concurrency Control，缩写“PCC”】。悲观锁有两种模式：</p><ul><li><p>共享锁【Shared lock】又称为读锁，简称S锁。顾名思义，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。</p></li><li><p>排他锁【Exclusive lock】又称为写锁，简称X锁。顾名思义，排他锁就是不能与其他锁并存，如果一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据行读取和修改。</p></li></ul><p>悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。</p><p><img src="/articles/Redis-Transactions/2.jpg" alt="悲观锁"></p><p>但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会。另外还会降低并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数据。</p><p>举例(MySql-Innodb)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//0.开启事务</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">//<span class="number">1.</span>查询商品库存信息</span><br><span class="line"><span class="keyword">select</span> quantity <span class="keyword">from</span> items <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line">//2.修改库存</span><br><span class="line"><span class="keyword">update</span> item <span class="keyword">set</span> quantity=<span class="number">2</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line">//3.提交事务</span><br><span class="line"><span class="keyword">commit</span>; </span><br><span class="line"></span><br><span class="line">// 以上，在对id = 1的记录修改前，先通过for <span class="keyword">update</span>的方式进行加锁，然后再进行修改</span><br></pre></td></tr></table></figure><blockquote><p>上面提到，使用select…for update会把数据给锁住，不过需要注意一些锁的级别，MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意</p></blockquote><h5 id="乐观锁-Optimistic-Locking"><a href="#乐观锁-Optimistic-Locking" class="headerlink" title="乐观锁(Optimistic Locking)"></a>乐观锁(Optimistic Locking)</h5><p>乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则返回给用户错误的信息，让用户决定如何去做。</p><p>相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。</p><p><img src="/articles/Redis-Transactions/3.jpg" alt="乐观锁"></p><p>乐观并发控制相信事务之间的数据竞争(data race)的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁和死锁。</p><p>示例(MySql-Innodb):</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//查询商品库存信息，quantity = 3</span><br><span class="line"><span class="keyword">select</span> quantity <span class="keyword">from</span> items <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line">// 修改商品库存为2</span><br><span class="line"><span class="keyword">update</span> items <span class="keyword">set</span> quantity=<span class="number">2</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> quantity=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">// 以上，在更新之前，先查询一下库存表中当前库存数(quantity)，然后在做<span class="keyword">update</span>的时候，以库存数作为一个修改条件。当提交更新的时候，判断数据库表对应记录的当前库存数与第一次取出来的库存数进行比对，如果数据库表当前库存数与第一次取出来的库存数相等，则予以更新，否则认为是过期数据。</span><br></pre></td></tr></table></figure><h3 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h3><p>在Redis中实现事务主要依靠一下5个命令来实现：</p><ul><li><strong>MULTI</strong> 标记一个事务块的开始。</li><li><strong>EXEC</strong>  执行所有事务块内的命令。</li><li><strong>DISCARD</strong> 取消事务，放弃执行事务块内的所有命令。</li><li><strong>WATCH key [key …]</strong> 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</li><li><strong>UNWATCH</strong> 取消 WATCH 命令对所有 key 的监视。</li></ul><p>Redis事务从开始到结束通常会通过三个阶段: <strong>事务开始  -&gt; 命令入队 -&gt; 事务执行</strong></p><h4 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h4><p><img src="/articles/Redis-Transactions/3.png" alt></p><h4 id="放弃事务"><a href="#放弃事务" class="headerlink" title="放弃事务"></a>放弃事务</h4><p><img src="/articles/Redis-Transactions/4.png" alt></p><h4 id="编译时错误（入队前就能检测出来）"><a href="#编译时错误（入队前就能检测出来）" class="headerlink" title="编译时错误（入队前就能检测出来）"></a>编译时错误（入队前就能检测出来）</h4><p><img src="/articles/Redis-Transactions/5.png" alt></p><blockquote><p>从 Redis 2.6.5 开始，服务器会对命令入队失败的情况进行记录，并在客户端调用 EXEC 命令时，拒绝执行并自动放弃这个事务</p></blockquote><h4 id="运行时错误（入队前不能检测出来）"><a href="#运行时错误（入队前不能检测出来）" class="headerlink" title="运行时错误（入队前不能检测出来）"></a>运行时错误（入队前不能检测出来）</h4><p><img src="/articles/Redis-Transactions/6.png" alt></p><blockquote><p>即使事务中有某个/某些命令在执行时产生了错误， 事务中的其他命令仍然会继续执行</p></blockquote><h4 id="WATCH监控"><a href="#WATCH监控" class="headerlink" title="WATCH监控"></a>WATCH监控</h4><p><img src="/articles/Redis-Transactions/7.png" alt></p><blockquote><p>WATCH指令，类似乐观锁，事务提交时，如果Key的值已被别的客户端改变，整个事务队列都不会被执行 </p></blockquote><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>服务器访问并发比较大，无效访问频繁，比如说频繁请求接口，爬虫频繁访问服务器，抢购瞬时请求过大，我们需要限流(对访问来源计数，超过设定次数，设置过期时间，提醒访问频繁，稍后再试)处理。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">limits=500   <span class="comment">#设置1秒内限制次数50</span></span><br><span class="line">if EXISTS userid</span><br><span class="line">    return '访问频繁，锁定时间剩余（ttl userid）秒'</span><br><span class="line">if userid_count_time &gt; limits</span><br><span class="line">   exprice userid,3600</span><br><span class="line">   return '访问频繁，稍后再试'</span><br><span class="line">else </span><br><span class="line">   MUlTI</span><br><span class="line">   incr userid_count_time          <span class="comment"># 对用户每秒的请求进行原子递增计数</span></span><br><span class="line">   exprice userid_count_time , 60</span><br><span class="line">   EXEC</span><br><span class="line"></span><br><span class="line">//使用事务的目的是避免执行错误中断，userid_count_time持久化到磁盘，高并发下这个很有必要</span><br></pre></td></tr></table></figure><h3 id="Redis事务和Mysql事务区别"><a href="#Redis事务和Mysql事务区别" class="headerlink" title="Redis事务和Mysql事务区别"></a>Redis事务和Mysql事务区别</h3><table><thead><tr><th align="left"></th><th align="left">mysql</th><th align="left">redis</th></tr></thead><tbody><tr><td align="left">开启事务</td><td align="left">start transaction</td><td align="left">multi</td></tr><tr><td align="left">回滚事务</td><td align="left">rollback</td><td align="left">不能回滚，使用discard命令可以放弃事务队列</td></tr><tr><td align="left">提交事务</td><td align="left">commit, 即使遇到语法错误也会提交</td><td align="left">exec, 如果遇到语法错误会放弃事务中的sql</td></tr><tr><td align="left">悲观锁</td><td align="left">使用select … for update实现悲观锁</td><td align="left">无</td></tr><tr><td align="left">乐观锁</td><td align="left">通常使用version或时间戳来实现乐观锁</td><td align="left">使用watch监控对象变化来实现乐观锁</td></tr><tr><td align="left">原子性</td><td align="left">具备</td><td align="left">具备</td></tr><tr><td align="left">一致性</td><td align="left">具备</td><td align="left">具备</td></tr><tr><td align="left">隔离性</td><td align="left">具备</td><td align="left">具备</td></tr><tr><td align="left">持久性</td><td align="left">具备</td><td align="left">当redis服务器使用AOF持久化模式并appendfsync设置为always时具备</td></tr></tbody></table><p>了解更多：<a href="https://redis.io/topics/transactions" target="_blank" rel="noopener">https://redis.io/topics/transactions</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h3&gt;&lt;h4 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h
      
    
    </summary>
    
      <category term="数据库" scheme="https://ya2.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Fork Bomb</title>
    <link href="https://ya2.top/articles/Fork-Bomb/"/>
    <id>https://ya2.top/articles/Fork-Bomb/</id>
    <published>2020-07-20T16:28:08.000Z</published>
    <updated>2022-07-27T16:11:31.035Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>警告</code><br>本文只做研究用途，切勿用作其他非法用途，可参考<a href="https://baike.baidu.com/item/破坏计算机信息系统罪/10459409" target="_blank" rel="noopener">破坏计算机信息系统罪</a>。 运行文中代码可能对你的计算机造成一定损害(卡死)，请慎重运行。</p></blockquote><p>Fork炸弹（fork bomb）在计算机领域中是一种利用系统调用fork（或其他等效的方式）进行的拒绝服务攻击(DOS)。fork炸弹以极快的速度创建大量进程（进程数呈以2为底数的指数增长趋势），并以此消耗系统分配予进程的可用空间使进程表饱和，而系统在进程表饱和后就无法运行新程序，除非进程表中的某一进程终止，它可以利用在windows/linux等系统。</p><h2 id="linux系统"><a href="#linux系统" class="headerlink" title="linux系统"></a>linux系统</h2><p><strong>POC</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:()&#123; :|:&amp; &#125;;:</span><br></pre></td></tr></table></figure><p><strong>注解</strong></p><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left"><code>:()</code></td><td align="left">定义函数,函数名为”:”,即每当输入”:”时就会自动调用{}内代码</td></tr><tr><td align="left"><code>{</code></td><td align="left">“:”函数起始字元</td></tr><tr><td align="left"><code>:</code></td><td align="left">用递归方式调用”:”函数本身</td></tr><tr><td align="left"><code>|</code></td><td align="left">用管道(pipe)将其输出引至…（因为有一个管道操作符，因此会生成一个新的进程）</td></tr><tr><td align="left"><code>:</code></td><td align="left">另一次递归调用的”:”函数 # 综上,”:</td></tr><tr><td align="left"><code>&amp;</code></td><td align="left">后台运行,以使最初的”:”函数被关闭后其所调用的两个”:”函数还能继续执行</td></tr><tr><td align="left"><code>}</code></td><td align="left">“:”函数終止字元</td></tr><tr><td align="left"><code>;</code></td><td align="left">“:”函数定义结束后将要进行的操作…</td></tr><tr><td align="left"><code>:</code></td><td align="left">调用”:”函数,”引爆”fork炸弹</td></tr></tbody></table><h2 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h2><p><strong>POC</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">%0|%</span><span class="number">0</span>|%<span class="number">0</span></span><br></pre></td></tr></table></figure><p>将上面代码存为 .bat 文件，双击即可运行.</p><p><strong>注释</strong></p><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left"><code>%0</code></td><td align="left">输出自己本身,也就是.bat，在cmd中即表示运行.bat</td></tr><tr><td align="left"><code>|</code></td><td align="left">就是打开自身后的程序再打开.bat</td></tr></tbody></table><h2 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h2><p>一个防止其严重影响系统的方法就是限定一个用户能够创建的进程数的上限，在Linux系统上，可以通过ulimit这个指令达到相应的效果。</p><p>更多查看：<a href="https://en.wikipedia.org/wiki/Fork_bomb" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Fork_bomb</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;警告&lt;/code&gt;&lt;br&gt;本文只做研究用途，切勿用作其他非法用途，可参考&lt;a href=&quot;https://baike.baidu.com/item/破坏计算机信息系统罪/10459409&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
      <category term="安全研究" scheme="https://ya2.top/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="fork bomb" scheme="https://ya2.top/tags/fork-bomb/"/>
    
      <category term="bat" scheme="https://ya2.top/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>一文读懂JavaScript的并发模型和事件循环机制</title>
    <link href="https://ya2.top/articles/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82JavaScript%E7%9A%84%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/"/>
    <id>https://ya2.top/articles/一文读懂JavaScript的并发模型和事件循环机制/</id>
    <published>2020-07-16T10:15:23.000Z</published>
    <updated>2022-07-27T16:11:48.340Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道JS语言是串行执行、阻塞式、事件驱动的，那么它又是怎么支持并发处理数据的呢？</p><h2 id="“单线程”语言"><a href="#“单线程”语言" class="headerlink" title="“单线程”语言"></a>“单线程”语言</h2><p>在浏览器实现中，每个单页都是一个独立进程，其中包含了JS引擎、GUI界面渲染、事件触发、定时触发器、异步HTTP请求等多个线程。</p><blockquote><p>进程（Process）是操作系统CPU等资源分配的最小单位，是程序的执行实体，是线程的容器。<br>线程（Thread）是操作系统能够进行运算调度的最小单位，一条线程指的是进程中一个单一顺序的控制流。</p></blockquote><p>因此我们可以说JS是”单线程”式的语言，代码只能按照单一顺序进行串行执行，并在执行完成前阻塞其他代码。</p><h2 id="JS数据结构"><a href="#JS数据结构" class="headerlink" title="JS数据结构"></a>JS数据结构</h2><p><img src="/articles/一文读懂JavaScript的并发模型和事件循环机制/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="JS数据结构"></p><p>如上图所示为JS的几种重要数据结构：</p><ul><li>栈（Stack）：用于JS的函数嵌套调用，后进先出，直到栈被清空。</li><li>堆（Heap）：用于存储大块数据的内存区域，如对象。</li><li>队列（Queue）：用于事件循环机制，先进先出，直到队列为空。</li></ul><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><p>我们的经验告诉我们JS是可以并发执行的，比如定时任务、并发AJAX请求，那这些是怎么完成的呢？其实这些都是JS在用单线程模拟多线程完成的。</p><p><img src="/articles/一文读懂JavaScript的并发模型和事件循环机制/%E4%BA%8B%E4%BB%B6%E9%98%9F%E5%88%97.png" alt="事件队列"></p><p>如上图所示，JS串行执行主线程任务，当遇到异步任务如定时器时，将其放入事件队列中，在主线程任务执行完毕后，再去事件队列中遍历取出队首任务进行执行，直至队列为空。</p><p>全部执行完成后，会有主监控进程，持续检测队列是否为空，如果不为空，则继续事件循环。</p><h2 id="setTimeout定时任务"><a href="#setTimeout定时任务" class="headerlink" title="setTimeout定时任务"></a>setTimeout定时任务</h2><p>定时任务<code>setTimeout(fn, timeout)</code>会先被交给浏览器的定时器模块，等延迟时间到了，再将事件放入到事件队列里，等主线程执行结束后，如果队列中没有其他任务，则会被立即处理，而如果还有没有执行完成的任务，则需要等前面的任务都执行完成才会被执行。因此setTimeout的第2个参数是最少延迟时间，而非等待时间。</p><p>当我们预期到一个操作会很繁重耗时又不想阻塞主线程的执行时，会使用立即执行任务：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(fn, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="特殊场景1：最小延迟为1ms"><a href="#特殊场景1：最小延迟为1ms" class="headerlink" title="特殊场景1：最小延迟为1ms"></a>特殊场景1：最小延迟为1ms</h3><p>然而考虑这么一段代码会怎么执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">5</span>)&#125;,<span class="number">5</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">4</span>)&#125;,<span class="number">4</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">3</span>)&#125;,<span class="number">3</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>)&#125;,<span class="number">2</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;,<span class="number">1</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">0</span>)&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>了解完事件队列机制，你的答案应该是<code>0,1,2,3,4,5</code>，然而答案却是<code>1,0,2,3,4,5</code>，这个是因为浏览器的实现机制是最小间隔为1ms。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/nodejs/node/blob/v8.9.4/lib/timers.js#L456</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(after &gt;= <span class="number">1</span> &amp;&amp; after &lt;= TIMEOUT_MAX))</span><br><span class="line">  after = <span class="number">1</span>; <span class="comment">// schedule on next tick, follows browser behavior</span></span><br></pre></td></tr></table></figure><p>浏览器以32位bit来存储延时，如果大于 <code>2^32-1 ms(24.8天)</code>，导致溢出会立刻执行。</p><h3 id="特殊场景2：最小延迟为4ms"><a href="#特殊场景2：最小延迟为4ms" class="headerlink" title="特殊场景2：最小延迟为4ms"></a>特殊场景2：最小延迟为4ms</h3><p>定时器的嵌套调用超过4层时，会导致最小间隔为4ms：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i, <span class="keyword">new</span> <span class="built_in">Date</span>().getMilliseconds());</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">20</span>) setTimeout(cb, <span class="number">0</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(cb, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>可以看到前4层也不是标准的立刻执行，在第4层后间隔明显变大到4ms以上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0 667</span><br><span class="line">1 669</span><br><span class="line">2 670</span><br><span class="line">3 672</span><br><span class="line">4 676</span><br><span class="line">5 681</span><br><span class="line">6 685</span><br></pre></td></tr></table></figure><blockquote><p>Timers can be nested; after five such nested timers, however, the interval is forced to be at least four milliseconds.</p></blockquote><h3 id="特殊场景3：浏览器节流"><a href="#特殊场景3：浏览器节流" class="headerlink" title="特殊场景3：浏览器节流"></a>特殊场景3：浏览器节流</h3><p>为了优化后台tab的加载占用资源，浏览器对后台未激活的页面中定时器延迟限制为1s。<br>对追踪型脚本，如谷歌分析等，在当前页面，依然是4ms的延时限制，而后台tabs为10s。</p><h2 id="setInterval定时任务"><a href="#setInterval定时任务" class="headerlink" title="setInterval定时任务"></a>setInterval定时任务</h2><p>此时，我们会知道，setInterval会在每个定时器延时时间到了后，将一个新的事件fn放入事件队列，如果前面的任务执行太久，我们会看到连续的fn事件被执行而感觉不到时间预设间隔。</p><p>因此，我们要尽量避免使用setInterval，改用setTimeout来模拟循环定时任务。</p><h2 id="睡眠函数"><a href="#睡眠函数" class="headerlink" title="睡眠函数"></a>睡眠函数</h2><p>JS一直缺少休眠的语法，借助ES6新的语法，我们可以模拟这个功能，但是同样的这个方法因为借助了setTimeout也不能保证准确的睡眠延时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, ms);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="async-await机制"><a href="#async-await机制" class="headerlink" title="async await机制"></a>async await机制</h3><p>async函数是Generator函数的语法糖，提供更方便的调用和语义，上面的使用可以替换为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> sleep(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> g = test();</span><br><span class="line">test.next();</span><br></pre></td></tr></table></figure><p>但是调用使用更加复杂，因此一般我们使用async函数即可。但JS时如何实现睡眠函数的呢，其实就是提供一种执行时的中间状态暂停，然后将控制权移交出去，等控制权再次交回时，从上次的断点处继续执行。因此营造了一种睡眠的假象，其实JS主线程还可以在执行其他的任务。</p><p>Generator函数调用后会返回一个内部指针，指向多个异步任务的暂停点，当调用next函数时，从上一个暂停点开始执行。</p><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p>协程（coroutine）是指多个线程互相协作，完成异步任务的一种多任务异步执行的解决方案。他的运行流程：</p><ul><li>协程A开始执行</li><li>协程A执行到一半，进入暂停，执行权转移到协程B</li><li>协程B在执行一段时间后，将执行权交换给A</li><li>协程A恢复执行</li></ul><p>可以看到这也就是Generator函数的实现方案。</p><h2 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h2><p>一个JS的任务可以定义为：在标准执行机制中，即将被调度执行的所有代码块。</p><p>我们上面介绍了JS如何使用单线程完成异步多任务调用，但我们知道JS的异步任务分很多种，如setTimeout定时器、Promise异步回调任务等，它们的执行优先级又一样吗？</p><p>答案是不。JS在异步任务上有更细致的划分，它分为两种：</p><ul><li><p>宏任务（macrotask)包含：</p><ul><li>执行的一段JS代码块，如控制台、script元素中包含的内容。</li><li>事件绑定的回调函数，如点击事件。</li><li>定时器创建的回调，如setTimeout和setInterval。</li></ul></li><li><p>微任务（microtask）包含：</p><ul><li>Promise对象的thenable函数。</li><li>Nodejs中的process.nextTick函数。</li><li>JS专用的queueMicrotask()函数。</li></ul></li></ul><p><img src="/articles/一文读懂JavaScript的并发模型和事件循环机制/%E5%AE%8F%E4%BB%BB%E5%8A%A1%E3%80%81%E5%BE%AE%E4%BB%BB%E5%8A%A1.png" alt="宏任务、微任务"></p><p>宏任务和微任务都有自身的事件循环机制，也拥有独立的事件队列（Event Queue），都会按照队列的顺序依次执行。但宏任务和微任务主要有两点区别：</p><ol><li>宏任务执行完成，在控制权交还给主线程执行其他宏任务之前，会将微任务队列中的所有任务执行完成。</li><li>微任务创建的新的微任务，会在下一个宏任务执行之前被继续遍历执行，直到微任务队列为空。</li></ol><h2 id="浏览器的进程和线程"><a href="#浏览器的进程和线程" class="headerlink" title="浏览器的进程和线程"></a>浏览器的进程和线程</h2><p>浏览器是多进程式的，每个页面和插件都是一个独立的进程，这样可以保证单页面崩溃或者插件崩溃不会影响到其他页面和浏览器整体的稳定运行。</p><p>它主要包括：</p><ol><li>主进程：负责浏览器界面显示和管理，如前进、后退，新增、关闭，网络资源的下载和管理。</li><li>第三方插件进程：当启用插件时，每个插件独立一个进程。</li><li>GPU进程：全局唯一，用于3D图形绘制。</li><li>Renderer渲染进程：每个页面一个进程，互不影响，执行事件处理、脚本执行、页面渲染。</li></ol><h3 id="单页面线程"><a href="#单页面线程" class="headerlink" title="单页面线程"></a>单页面线程</h3><p>浏览器的单个页面就是一个进程，指的就是Renderer进程，而进程中又包含有多个线程用于处理不同的任务，主要包括：</p><ol><li>GUI渲染线程：负责HTML和CSS的构建成DOM树，渲染页面，比如重绘。</li><li>JS引擎线程：JS内核，如Chrome的V8引擎，负责解析执行JS代码。</li><li>事件触发线程：如点击等事件存在绑定回调时，触发后会被放入宏任务事件队列。</li><li>定时触发器线程：setTimeout和setInterval的定时计数器，在时间到达后放入宏任务事件队列。</li><li>异步HTTP请求线程：XMLHTTPRequest请求后新开一个线程，等待状态改变后，如果存在回调函数，就将其放入宏任务队列。</li></ol><p>需要注意的是，GUI渲染进程和JS引擎进程互斥，两者只会同时执行一个。主要的原因是为了节流，因为JS的执行会可能多次改变页面，页面的改变也会多次调用JS，如resize。因此浏览器采用的策略是交替执行，每个宏任务执行完成后，执行GUI渲染，然后执行下一个宏任务。</p><h3 id="Webworker线程"><a href="#Webworker线程" class="headerlink" title="Webworker线程"></a>Webworker线程</h3><p>因为JS只有一个引擎线程，同时和GUI渲染线程互斥，因此在繁重任务执行时会导致页面卡住，所以在HTML5中支持了Webworker，它用于向浏览器申请一个新的子线程执行任务，并通过postMessage API来和worker线程通信。所以我们在繁重任务执行时，可以选择新开一个Worker线程来执行，并在执行结束后通信给主线程，这样不会影响页面的正常渲染和使用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>JS是单线程、阻塞式执行语言。</li><li>JS通过事件循环机制来完成异步任务并发执行。</li><li>JS将任务细分为宏任务和微任务来提供执行优先级。</li><li>浏览器单页面为一个进程，包含的JS引擎线程和GUI渲染线程互斥，可以通过新开Web Worker线程来完成繁重的计算任务。</li></ol><p><img src="/articles/一文读懂JavaScript的并发模型和事件循环机制/%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0.png" alt="系统实现"></p><p>最后给大家出一个考题，可以猜下执行的输出结果来验证学习成果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'before first microtask init'</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'first microtask'</span>);</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">'finish first microtask'</span>)&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'after first microtask init'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'second microtask'</span>);</span><br><span class="line">        setTimeout(resolve, ms);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'start task'</span>);</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">3000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'end task'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'add event'</span>), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main thread'</span>);</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">main thread</span><br><span class="line">start task</span><br><span class="line">before first microtask init</span><br><span class="line">first microtask</span><br><span class="line">after first microtask init</span><br><span class="line">second microtask</span><br><span class="line">finish first microtask</span><br><span class="line">add event</span><br><span class="line">end task</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener">并发模型与事件循环</a></li><li><a href="http://www.alloyteam.com/2016/05/javascript-timer/" target="_blank" rel="noopener">JavaScript 定时器与执行机制解析</a></li><li><a href="https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers" target="_blank" rel="noopener">timers-and-user-prompts</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout" target="_blank" rel="noopener">Web API 接口参考- window.setTimeout</a></li><li><a href="http://es6.ruanyifeng.com/#docs/generator-async#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" target="_blank" rel="noopener">Generator 函数的异步应用</a></li><li><a href="https://juejin.im/post/5a6547d0f265da3e283a1df7#heading-7" target="_blank" rel="noopener">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a></li></ul><style>.post-body .fancybox img{margin: 0 auto !important; }</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们知道JS语言是串行执行、阻塞式、事件驱动的，那么它又是怎么支持并发处理数据的呢？&lt;/p&gt;
&lt;h2 id=&quot;“单线程”语言&quot;&gt;&lt;a href=&quot;#“单线程”语言&quot; class=&quot;headerlink&quot; title=&quot;“单线程”语言&quot;&gt;&lt;/a&gt;“单线程”语言&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="前端开发" scheme="https://ya2.top/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Bloom Filter</title>
    <link href="https://ya2.top/articles/Bloom-Filter/"/>
    <id>https://ya2.top/articles/Bloom-Filter/</id>
    <published>2020-06-09T11:13:18.000Z</published>
    <updated>2022-07-27T16:11:49.114Z</updated>
    
    <content type="html"><![CDATA[<p><em>Bloom Filter</em>是一种空间效率很高的随机数据结构，它利用位数组很简洁地表示一个集合，并能判断一个元素是否属于这个集合。<em>Bloom Filter</em>的这种高效是有一定代价的：在判断一个元素是否属于某个集合时，有可能会把不属于这个集合的元素误认为属于这个集合（false positive）。<strong>通常应用在一些需要快速判断某个元素是否属于集合，但是并不严格要求100%正确的场合</strong>。而在能容忍低错误率的应用场合下，<em>Bloom Filter</em>通过极少的错误换取了存储空间的极大节省。</p><h3 id="集合表示和元素查询"><a href="#集合表示和元素查询" class="headerlink" title="集合表示和元素查询"></a>集合表示和元素查询</h3><p>下面我们具体来看<em>Bloom Filter</em>是如何用位数组表示集合的。初始状态时，<em>Bloom Filter</em>是一个包含m位的位数组，每一位都置为0。</p><p><img src="/articles/Bloom-Filter/o_bf1.jpg" alt> </p><p>为了表达$S=\{x1, x2,…,xn\}$这样一个n个元素的集合，<em>Bloom Filter</em>使用k个相互独立的哈希函数（Hash Function），它们分别将集合中的每个元素映射到$\{1,…,m\}$的范围中。对任意一个元素$x$，第i个哈希函数映射的位置$hi(x)$就会被置为$1（1≤i≤k）$。注意，如果一个位置多次被置为1，那么只有第一次会起作用，后面几次将没有任何效果。在下图中，k=3，且有两个哈希函数选中同一个位置（从左边数第五位）。</p><p><img src="/articles/Bloom-Filter/o_bf2.jpg" alt></p><p>在判断y是否属于这个集合时，我们对y应用k次哈希函数，如果所有$hi(y)$的位置都是$1（1≤i≤k）$，那么我们就认为y是集合中的元素，否则就认为y不是集合中的元素。下图中y1就不是集合中的元素。y2或者属于这个集合，或者刚好是一个false positive。</p><p><img src="/articles/Bloom-Filter/o_bf3.jpg" alt></p><h3 id="错误率估计"><a href="#错误率估计" class="headerlink" title="错误率估计"></a>错误率估计</h3><p>前面我们已经提到了，<em>Bloom Filter</em>在判断一个元素是否属于它表示的集合时会有一定的错误率（false positive rate），下面我们就来估计错误率的大小。在估计之前为了简化模型，我们假设$kn&lt;m$且各个哈希函数是完全随机的。当集合$S=\{x1, x2,…,xn\}$的所有元素都被k个哈希函数映射到m位的位数组中时，这个位数组中某一位还是0的概率是：</p><p style="text-align:center"> $ p'=(1-\frac{1}{m})^{kn} ≈ e^{-\frac{kn}{m}} $ </p> <p>其中$\frac{1}{m}$表示任意一个哈希函数选中这一位的概率（前提是哈希函数是完全随机的），$(1-\frac{1}{m})$表示哈希一次没有选中这一位的概率。要把$S$完全映射到位数组中，需要做$kn$次哈希。某一位还是$0$意味着$kn$次哈希都没有选中它，因此这个概率就是$(1-\frac{1}{m})^{kn}$。令 $p’=e^{-\frac{kn}{m}}$是为了简化运算，这里用到了计算e时常用的近似：</p><p style="text-align:center"> $\lim_{x \to \infty}(1-\frac{1}{x})^{-x} = e $ </p> <p>令ρ为位数组中0的比例，则ρ的数学期望$E(ρ)= p’$。在ρ已知的情况下，要求的错误率（false positive rate）为：</p><p style="text-align:center">$ (1-ρ)^k ≈ (1-p')^k ≈ (1-p)^k $</p> <p>$(1-ρ)$为位数组中1的比例，$(1-ρ)^k$就表示k次哈希都刚好选中1的区域，即false positive rate。上式中第二步近似在前面已经提到了，现在来看第一步近似。$p’$只是$ρ$的数学期望，在实际中$ρ$的值有可能偏离它的数学期望值。<em>M. Mitzenmacher</em> 已经证明[2]  ，位数组中0的比例非常集中地分布在它的数学期望值的附近。因此，第一步的近似得以成立。分别将$p$和$p’$代入上式中，得：</p><p style="text-align:center">$  f' = (1-(1-\frac{1}{m})^{kn})^k = (1-p')^k $</p> <p style="text-align:center">$  f  = (1-e^{-\frac{kn}{m}})^k = (1-p)^k $</p> <p>相比$p’$ 和$f’$，使用$p$和$f$通常在分析中更为方便。</p><h3 id="最优的哈希函数个数"><a href="#最优的哈希函数个数" class="headerlink" title="最优的哈希函数个数"></a>最优的哈希函数个数</h3><p>既然<em>Bloom Filter</em>要靠多个哈希函数将集合映射到位数组中，那么应该选择几个哈希函数才能使元素查询时的错误率降到最低呢？这里有两个互斥的理由：如果哈希函数的个数多，那么在对一个不属于集合的元素进行查询时得到0的概率就大；但另一方面，如果哈希函数的个数少，那么位数组中的0就多。为了得到最优的哈希函数个数，我们需要根据上一小节中的错误率公式进行计算。</p><p>先用$p$和$f$进行计算。注意到$f = e^{k\ln(1-e^{-\frac{kn}{m}})}$，我们令$g = k\ln(1-e^{-\frac{kn}{m}})$，只要让g取到最小，f自然也取到最小。由于$ p = e^{-\frac{kn}{m}}$，我们可以将g写成</p><p style="text-align:center">$ g = -\frac{m}{n}\ln(p)\ln(1-p) $</p><p>根据对称性法则可以很容易看出当$p = \frac{1}{2}$，也就是$k = ln(2)\frac{m}{n}$时，g取得最小值。在这种情况下，最小错误率f等于$\frac{1}{2}k ≈ (0.6185)\frac{m}{n}$。另外，注意到p是位数组中某一位仍是0的概率，所以$p = \frac{1}{2}$对应着位数组中0和1各一半。换句话说，要想保持错误率低，最好让位数组有一半还空着。</p><p>需要强调的一点是，$p = \frac{1}{2}$时错误率最小这个结果并不依赖于近似值$p$和$f$。同样对于$f’ = e^{k\ln(1 − (1 − \frac{1}{m})^{kn})}$，$g’ = k\ln(1 − (1 − \frac{1}{m})^{kn})$，$p’ = (1 − \frac{1}{m})^{kn}$，我们可以将$g’$写成</p><p style="text-align:center">$ g' = \frac{1}{n\ln(1-\frac{1}{m})}\ln(p')\ln(1-p') $</p><p>同样根据对称性法则可以得到当$p’ = \frac{1}{2}$时，$g’$取得最小值。</p><h3 id="位数组的大小"><a href="#位数组的大小" class="headerlink" title="位数组的大小"></a>位数组的大小</h3><p>下面我们来看看，在不超过一定错误率的情况下，<em>Bloom Filter</em>至少需要多少位才能表示全集中任意n个元素的集合。假设全集中共有u个元素，允许的最大错误率为є，下面我们来求位数组的位数m。</p><p>假设$X$为全集中任取n个元素的集合，$F(X)$是表示$X$的位数组。那么对于集合$X$中任意一个元素x，在$s = F(X)$中查询x都能得到肯定的结果，即s能够接受x。显然，由于<em>Bloom Filter</em>引入了错误，s能够接受的不仅仅是X中的元素，它还能够$є (u - n)$个false positive。因此，对于一个确定的位数组来说，它能够接受总共$n + є (u - n)$个元素。在$n + є (u - n)$个元素中，s真正表示的只有其中n个，所以一个确定的位数组可以表示</p><p><img src="/articles/Bloom-Filter/o_bf10.jpg" alt></p><p>个集合。m位的位数组共有2m个不同的组合，进而可以推出，m位的位数组可以表示</p><p><img src="/articles/Bloom-Filter/o_bf11.jpg" alt></p><p>个集合。全集中n个元素的集合总共有</p><p><img src="/articles/Bloom-Filter/o_bf12.jpg" alt></p><p>个，因此要让m位的位数组能够表示所有n个元素的集合，必须有</p><p><img src="/articles/Bloom-Filter/o_bf13.jpg" alt></p><p>即：</p><p><img src="/articles/Bloom-Filter/o_bf14.jpg" alt></p><p>上式中的近似前提是n和єu相比很小，这也是实际情况中常常发生的。根据上式，我们得出结论：在错误率不大于є的情况下，m至少要等于$n\log2(1/є)$才能表示任意n个元素的集合。</p><p>上一小节中我们曾算出当$k = \ln2· \frac{m}{n}$时错误率f最小，这时$f = \frac{1}{2}k = \frac{\frac{1}{2}m\ln2}{n}$。现在令$f≤є$，可以推出</p><p><img src="/articles/Bloom-Filter/o_bf15.jpg" alt></p><p>这个结果比前面我们算得的下界$n\log2(1/є)$大了$\log2 e ≈ 1.44$倍。这说明在哈希函数的个数取到最优时，要让错误率不超过є，m至少需要取到最小值的1.44倍。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p>下面给出一个简单的<em>Bloom Filter</em>的实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.BitSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Very basic implementation of *Bloom Filter*.</span></span><br><span class="line"><span class="comment"> * Things to improve further.</span></span><br><span class="line"><span class="comment"> * 1. Save it on disk to make it distributed.</span></span><br><span class="line"><span class="comment"> * 2. add additional constructor to take in false positive rate and calculate other parameters.</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloomFilter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> howManyHashFunctions =<span class="number">1</span>;</span><br><span class="line">  <span class="comment">/**How many elements are expected at max*/</span></span><br><span class="line">  <span class="keyword">int</span> totalExpectedElements ; </span><br><span class="line">  <span class="comment">/**How many elements in filter at any point in time*/</span></span><br><span class="line">  <span class="keyword">int</span> totalCurrentElements ;</span><br><span class="line">  <span class="comment">/**How many bits per  element needs to be set**/</span></span><br><span class="line">  <span class="keyword">int</span> bitsPerElement ;</span><br><span class="line">  BitSet dataDictionaryBitSet;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BloomFilter</span><span class="params">(<span class="keyword">int</span> howManyHashFunctions,  <span class="keyword">int</span> totalExpectedElements, <span class="keyword">int</span> bitsPerElement)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.howManyHashFunctions =howManyHashFunctions;</span><br><span class="line"><span class="keyword">this</span>.totalExpectedElements =totalExpectedElements;</span><br><span class="line"><span class="keyword">this</span>.bitsPerElement=bitsPerElement;</span><br><span class="line">dataDictionaryBitSet = <span class="keyword">new</span> BitSet(bitsPerElement * totalExpectedElements);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/** Adding data in *Bloom Filter*. This will remember that this data was added.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data : The data which needs to be added in *Bloom Filter***/</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] hashCodes = generateMultipleHash(data );</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> index =<span class="number">0</span> ; index&lt;hashCodes.length;++index) dataDictionaryBitSet.set(hashCodes[index]);</span><br><span class="line">++totalCurrentElements;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**Find out if given data was previously added into filter. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data : The data which needs to be checked if it was previously added.</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span>[] hashCodes = generateMultipleHash(data   );</span><br><span class="line"><span class="keyword">boolean</span> exists = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> index =<span class="number">0</span> ; index&lt;hashCodes.length;++index) &#123;</span><br><span class="line"><span class="keyword">if</span> (dataDictionaryBitSet.get(hashCodes[index])) exists = <span class="keyword">true</span>; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">exists = <span class="keyword">false</span>; </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> exists;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Return how many element it has remembered. **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> totalCurrentElements;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** generate multiple hash codes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data the data which needs to be</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array with positive hashes with hash values from 0 to size of bit set array  size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span>[] generateMultipleHash(T data ) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] positions = <span class="keyword">new</span> <span class="keyword">int</span>[howManyHashFunctions];</span><br><span class="line">        Random r = <span class="keyword">new</span> Random(data.hashCode());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; howManyHashFunctions; i++) &#123;</span><br><span class="line">            positions[i] = r.nextInt(dataDictionaryBitSet.size());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> positions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在计算机科学中，我们常常会碰到时间换空间或者空间换时间的情况，即为了达到某一个方面的最优而牺牲另一个方面。<em>Bloom Filter</em>在时间空间这两个因素之外又引入了另一个因素：错误率。在使用<em>Bloom Filter</em>判断一个元素是否属于某个集合时，会有一定的错误率。也就是说，有可能把不属于这个集合的元素误认为属于这个集合（False Positive），但不会把属于这个集合的元素误认为不属于这个集合（False Negative）。在增加了错误率这个因素之后，<em>Bloom Filter</em>通过允许少量的错误来节省大量的存储空间。</p><p>自从Burton Bloom在70年代提出<em>Bloom Filter</em>之后，<em>Bloom Filter</em>就被广泛用于拼写检查和数据库系统中。近一二十年，伴随着网络的普及和发展，<em>Bloom Filter</em>在网络领域获得了新生，各种<em>Bloom Filter</em>变种和新的应用不断出现。可以预见，随着网络应用的不断深入，新的变种和应用将会继续出现，<em>Bloom Filter</em>必将获得更大的发展。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><p><a href="http://pages.cs.wisc.edu/~cao/papers/summary-cache/node8.html" target="_blank" rel="noopener">Pei Cao. <em>Bloom Filter</em>s - the math.</a></p></li><li><p><a href="http://en.wikipedia.org/wiki/Bloom_filter" target="_blank" rel="noopener">Wikipedia. <em>Bloom Filter</em>.</a></p></li></ul><style> .fancybox img {margin:0 auto !important;}</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;Bloom Filter&lt;/em&gt;是一种空间效率很高的随机数据结构，它利用位数组很简洁地表示一个集合，并能判断一个元素是否属于这个集合。&lt;em&gt;Bloom Filter&lt;/em&gt;的这种高效是有一定代价的：在判断一个元素是否属于某个集合时，有可能会把不属于这个集合的元
      
    
    </summary>
    
      <category term="算法" scheme="https://ya2.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Hash table" scheme="https://ya2.top/tags/Hash-table/"/>
    
      <category term="大数据" scheme="https://ya2.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="BitMap" scheme="https://ya2.top/tags/BitMap/"/>
    
      <category term="转载" scheme="https://ya2.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>RESTful标准下的微信网页授权</title>
    <link href="https://ya2.top/articles/RESTful%E6%A0%87%E5%87%86%E4%B8%8B%E7%9A%84%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83/"/>
    <id>https://ya2.top/articles/RESTful标准下的微信网页授权/</id>
    <published>2020-05-25T11:35:06.000Z</published>
    <updated>2022-07-27T16:11:44.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微信网页授权流程"><a href="#微信网页授权流程" class="headerlink" title="微信网页授权流程"></a>微信网页授权流程</h2><p><img src="/articles/RESTful标准下的微信网页授权/1.png" alt="微信网页授权流程"></p><p>具体而言，可分为两步：</p><p>1、引导用户进入授权页面同意授权，获取code 【拉起授权页】 </p><blockquote><p>引导用户点击授权链接<br><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=CODE&amp;scope=SCOPE&amp;state=STATE#wechat_redirect" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=CODE&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</a></p></blockquote><p>这里有两个参数比较注意的是：redirect_uri 授权成功后的跳转地址，授权作用域scope参数有两个值：snsapi_base和snsapi_userinfo。如果只需要获取openid则前者就够了，后者还可获取微信用户信息，前者的静默授权（不显示授权页面）功能也挺棒的。</p><p>若提示该链接无法访问，请检查参数是否填写错误，是否拥有scope参数对应的授权作用域权限。微信返回参数错误的原因一般有两种：一是在微信公众平台没有配置相应的参数；二是前端配置的接口参数与公众平台不一致。</p><p>具体参数说明</p><table><thead><tr><th align="left">参数</th><th align="left">是否必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">appid</td><td align="left">是</td><td align="left">公众号的唯一标识</td></tr><tr><td align="left">redirect_uri</td><td align="left">是</td><td align="left">授权后重定向的回调链接地址， 需要使用 urlencode 对链接进行处理,<code>注意这个地址必须在公众号后台网页授权域名下</code></td></tr><tr><td align="left">response_type</td><td align="left">是</td><td align="left">返回类型，填写code</td></tr><tr><td align="left">scope</td><td align="left">是</td><td align="left">应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息 ）</td></tr><tr><td align="left">state</td><td align="left">否</td><td align="left">重定向后会带上state参数，传递什么返回什么, 可以作为参数传递</td></tr><tr><td align="left">wechat_redirect</td><td align="left">是</td><td align="left">无论直接打开还是做页面302重定向时候，必须带此参数</td></tr></tbody></table><p>2、通过code换取网页授权access_token进而获取用户openid和其他用户信息【获取用户信息】</p><blockquote><p>获取code后，请求以下链接获取access_token<br><a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</a></p></blockquote><p>参数说明</p><table><thead><tr><th align="left">参数</th><th align="left">是否必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">appid</td><td align="left">是</td><td align="left">公众号的唯一标识</td></tr><tr><td align="left">secret</td><td align="left">是</td><td align="left">公众号的appsecret</td></tr><tr><td align="left">code</td><td align="left">是</td><td align="left">填写第一步获取的code参数</td></tr><tr><td align="left">grant_type</td><td align="left">是</td><td align="left">填写为authorization_code</td></tr></tbody></table><p>正确时返回的JSON数据包如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"access_token"</span>:<span class="string">"ACCESS_TOKEN"</span>,</span><br><span class="line">  <span class="attr">"expires_in"</span>:<span class="number">7200</span>,</span><br><span class="line">  <span class="attr">"refresh_token"</span>:<span class="string">"REFRESH_TOKEN"</span>,</span><br><span class="line">  <span class="attr">"openid"</span>:<span class="string">"OPENID"</span>,</span><br><span class="line">  <span class="attr">"scope"</span>:<span class="string">"SCOPE"</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拉取用户信息(需scope为 snsapi_userinfo)</p><p>如果网页授权作用域为snsapi_userinfo，则此时开发者可以通过access_token和openid拉取用户信息了。</p><blockquote><p>http：GET（请使用https协议）<br><a href="https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN</a></p></blockquote><p>参数说明</p><table><thead><tr><th align="left">参数</th><th align="left">是否必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">access_token</td><td align="left">是</td><td align="left">网页授权接口调用凭证,注意：此access_token与基础支持的access_token不同</td></tr><tr><td align="left">openid</td><td align="left">是</td><td align="left">用户的唯一标识</td></tr><tr><td align="left">lang</td><td align="left">是</td><td align="left">返回国家地区语言版本，zh_CN 简体，zh_TW 繁体，en 英语</td></tr></tbody></table><p>正确时返回的JSON数据包如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;   </span><br><span class="line">  <span class="attr">"openid"</span>:<span class="string">" OPENID"</span>,</span><br><span class="line">  <span class="attr">"nickname"</span>: NICKNAME,</span><br><span class="line">  <span class="attr">"sex"</span>:<span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"province"</span>:<span class="string">"PROVINCE"</span>,</span><br><span class="line">  <span class="attr">"city"</span>:<span class="string">"CITY"</span>,</span><br><span class="line">  <span class="attr">"country"</span>:<span class="string">"COUNTRY"</span>,</span><br><span class="line">  <span class="attr">"headimgurl"</span>: <span class="string">"http://thirdwx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ4eMsv84eavHiaiceqxibJxCfHe/46"</span>,</span><br><span class="line">  <span class="attr">"privilege"</span>:[ <span class="string">"PRIVILEGE1"</span> <span class="string">"PRIVILEGE2"</span>     ],</span><br><span class="line">  <span class="attr">"unionid"</span>: <span class="string">"o6_bmasdasdsad6_2sgVt7hMZOPfL"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：unionid 只有在开发者将公众号绑定到<a href="https://open.weixin.qq.com/" target="_blank" rel="noopener">微信开放平台帐号</a>后，才会出现该字段。</p></blockquote><p>到此，微信网页授权也就结束了，更多请查看<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noopener">微信网页授权文档</a></p><h2 id="针对RESTful规范修改"><a href="#针对RESTful规范修改" class="headerlink" title="针对RESTful规范修改"></a>针对RESTful规范修改</h2><p>现代项目开发基本上都是采用完全的前后端分离开发模式，后端采用统一规范返回json或者jsonp等给前端，而前端不再是伪静态页面，而是存粹的静态HTML,用户请求基本上都是通过ajax此类异步请求完成后端数据接收的。而在官方推荐的流程中，redirect_url被定向到后端处理接口，处理完成后使用header等强制跳转处理后的页面的方式在此处就行不通了，因为它打破了前期统一制定好的代码规范。那么 redirect_url 定向到前端页面，让前端来接收Code是否可行呢？ 答案是：可行。</p><blockquote><p>超文本标记语言（HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。HTML是一种基础技术，常与CSS、JavaScript一起被众多网站用于设计网页、网页应用程序以及移动应用程序的用户界面[3]。网页浏览器可以读取HTML文件，并将其渲染成可视化网页。HTML描述了一个网站的结构语义随着线索的呈现，使之成为一种标记语言而非编程语言。       —–<a href="https://en.wikipedia.org/wiki/HTML" target="_blank" rel="noopener">wiki</a></p></blockquote><p>我们知道html不是编程语言，是不能如php、java等编程语言那样获取用户请求参数的，但是GET请求例外,因为<code>GET参数通过URL传递</code>, 使用<code>location.href</code>或<code>location.search</code>是可以从URL中提取到GET参数的，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getQueryVariable = <span class="function">(<span class="params">variable</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> query = <span class="built_in">window</span>.location.search.substring(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> vars = query.split(<span class="string">"&amp;"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vars.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> pair = vars[i].split(<span class="string">"="</span>);</span><br><span class="line">        <span class="keyword">if</span> (pair[<span class="number">0</span>] === variable) &#123;</span><br><span class="line">            <span class="keyword">return</span> pair[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到正题，我们知道用户同意授权后，微信重定向时将code和state作为参数加到redirect_url链接上，也就是如下形式：</p><blockquote><p>redirect_url?code=001EX7O42pPubS00IvO42KtjO42EX7O8&amp;state</p></blockquote><p>处理过程如下：</p><p>1、我们将redirect_url定向到前端静态处理的页面A</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A.html</span><br><span class="line"><span class="comment">// 获取授权url</span></span><br><span class="line"><span class="built_in">window</span>.auth = <span class="function">(<span class="params">type</span>) =&gt;</span> &#123;</span><br><span class="line">    http(<span class="string">'wxAuthUrl'</span>, &#123;<span class="attr">type</span>: type, <span class="attr">callback</span>: location.href <span class="comment">//A.html&#125;, (response) =&gt; &#123;</span></span><br><span class="line">        location.href = response.data;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的后端接口:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取授权地址</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@request</span>('/wxAuthUrl')</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array $request</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">wxAuthUrl</span><span class="params">(array $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $callback = urlencode($request[<span class="string">'callback'</span>]);<span class="comment">// redirect_url</span></span><br><span class="line">    $state = @$request[<span class="string">'type'</span>]; <span class="comment">// 根据这个值判断授权范围scope</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == $state) &#123;</span><br><span class="line">        $scope = <span class="string">"snsapi_userinfo"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $scope = <span class="string">"snsapi_base"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $url = <span class="string">"https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx552593a8e7c4b0de&amp;redirect_uri=&#123;$callback&#125;&amp;response_type=code&amp;scope=&#123;$scope&#125;&amp;state=&#123;$state&#125;#wechat_redirect"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response(<span class="number">0</span>, <span class="string">'success'</span>, $url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、页面A接收到code值以后，传递给后台</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A.html</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> code = getQueryVariable(<span class="string">'code'</span>), state = getQueryVariable(<span class="string">'state'</span>); <span class="comment">// 获取到微信传递的code和state</span></span><br><span class="line">  <span class="keyword">if</span> (code) &#123;</span><br><span class="line">      http(<span class="string">'wxCall'</span>, &#123;<span class="attr">code</span>: code, <span class="attr">state</span>: state&#125;, (response) =&gt; &#123;<span class="comment">// 返回给后端处理</span></span><br><span class="line">          <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).innerHTML = <span class="built_in">JSON</span>.stringify(response.data);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、后台通过code执行授权<a href="#微信网页授权流程">步骤2</a>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 微信授权回调，原来是作为redirect_url使用的，现在修改下返回值即可满足新需求</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@request</span>('/wxCall')</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array $request</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">wxCall</span><span class="params">(array $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// code-&gt;access_token</span></span><br><span class="line">        $ret = json_decode(file_get_contents(<span class="string">"https://api.weixin.qq.com/sns/oauth2/access_token?appid="</span> . <span class="keyword">self</span>::APPID . <span class="string">"&amp;secret="</span> . <span class="keyword">self</span>::SECRET . <span class="string">"&amp;code=&#123;$request['code']&#125;&amp;grant_type=authorization_code"</span>), <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// access_token-&gt;profile</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == $request[<span class="string">'state'</span>]) &#123;</span><br><span class="line">            $ret = json_decode(file_get_contents(<span class="string">"https://api.weixin.qq.com/sns/userinfo?access_token=&#123;$ret['access_token']&#125;&amp;openid=&#123;$ret['openid']&#125;&amp;lang=zh_CN"</span>), <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// header("location: success.html");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response(<span class="number">0</span>, <span class="string">'success'</span>, $ret);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        <span class="comment">// header("location: fail.html");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response(<span class="number">4000</span>, $e-&gt;getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，整个交互过程便统一了, 效果如下：</p><p><img src="/articles/RESTful标准下的微信网页授权/3.png" alt></p><p>演示地址：<a href="https://app.ya2.top/wxauth/" target="_blank" rel="noopener">https://app.ya2.top/wxauth/</a> (建议在微信环境打开)<br>源码地址：<a href="https://github.com/gouyuwang/wxauth/" target="_blank" rel="noopener">https://github.com/gouyuwang/wxauth/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;微信网页授权流程&quot;&gt;&lt;a href=&quot;#微信网页授权流程&quot; class=&quot;headerlink&quot; title=&quot;微信网页授权流程&quot;&gt;&lt;/a&gt;微信网页授权流程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/articles/RESTful标准下的微信网页授权/1.png&quot; a
      
    
    </summary>
    
      <category term="前端开发" scheme="https://ya2.top/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="微信登录" scheme="https://ya2.top/tags/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95/"/>
    
      <category term="网页授权" scheme="https://ya2.top/tags/%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>电商设计手册</title>
    <link href="https://ya2.top/articles/%E7%94%B5%E5%95%86%E8%AE%BE%E8%AE%A1%E6%89%8B%E5%86%8C/"/>
    <id>https://ya2.top/articles/电商设计手册/</id>
    <published>2020-05-11T10:08:33.000Z</published>
    <updated>2022-07-27T16:11:48.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直从事互联网电商开发三年多的时间了，回头想想却对整个业务流程不是很了解，说出去很是惭愧。但是身处互联网电商的环境中，或多或少接触了其中的各个业务，其次周边还有很多从事电商的同事和朋友，这都是资源。于是，我决定和我的同事、盆友们、甚至还有你们去梳理整个流程并分享出来，谈不上结果要做的多么好，至少在每一个我们有能力去做好的地方，一定会细致入微。</p><p>除此之外，同时为了满足我们自身在工作中可能得不到的技术满足感，我们在做整个系统设计的过程中，会去使用我们最想用的技术栈。技术栈这一点我们借助docker去实现，所以最终的结果：一方面我们掌握了业务的东西，另一方面又得到了技术上的满足感，二者兼得。</p><p>最后，出于时间的考虑，我们提出了一个想法<strong>Do design No code</strong>。<strong>【只设计不码码】</strong> 这句话的意思：最终我们设计出来整个系统的数据模型，接口文档，甚至交互过程，以及环境部署等，但是最后我们却不写代码。是吧？如果这样了写代码还有什么意义。当然，也不全是这样，出于时间的考虑当然也会用代码实现出来的，说不定最后正是对面的你去实现的。</p><p>其次，这些内容肯定有考虑不全面或者在上规模的业务中存在更复杂的地方，欢迎指出，我们也希望学习和分享您的经验。</p><h1 id="技术栈选型"><a href="#技术栈选型" class="headerlink" title="技术栈选型"></a>技术栈选型</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">- 基础环境</span><br><span class="line">    + k8s</span><br><span class="line">    + docker</span><br><span class="line">- 存储</span><br><span class="line">    + mysql</span><br><span class="line">    + redis</span><br><span class="line">        * codis</span><br><span class="line">        * redis主从</span><br><span class="line">- queue</span><br><span class="line">    + kafka</span><br><span class="line">    + rocketmq</span><br><span class="line">    + rabbitmq</span><br><span class="line">- gw</span><br><span class="line">    + kong</span><br><span class="line">    + zuul</span><br><span class="line">- webserver</span><br><span class="line">    + nginx/openresty</span><br><span class="line">    + envoy</span><br><span class="line">- server</span><br><span class="line">    + go</span><br><span class="line">    + php</span><br><span class="line">- frontend</span><br><span class="line">    + vue</span><br><span class="line">- rpc</span><br><span class="line">    + grpc</span><br><span class="line">    + thrift</span><br><span class="line">- 基础能力</span><br><span class="line">    + 监控</span><br><span class="line">        * zipkin</span><br><span class="line">        * elk</span><br><span class="line">        * falcon</span><br><span class="line">    + 服务发现</span><br><span class="line">        * zookeeper</span><br><span class="line">        * etcd</span><br><span class="line">    + 持续集成</span><br><span class="line">        * ci/cd</span><br><span class="line">- 搜索</span><br><span class="line">    + es</span><br><span class="line">    + solr</span><br></pre></td></tr></table></figure><h1 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h1><p>请您耐心等待…</p><h1 id="用户体系"><a href="#用户体系" class="headerlink" title="用户体系"></a>用户体系</h1><p>今天，我们开始第一部分<strong>用户体系</strong>的设计。本文分为如下四大模块：</p><ul><li>架构设计</li><li>数据模型设计</li><li>交互设计</li><li>接口设计</li></ul><h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><h3 id="简单来看用户体系"><a href="#简单来看用户体系" class="headerlink" title="简单来看用户体系"></a>简单来看用户体系</h3><p>当你第一次接触和用户相关的互联网产品时，或者曾今在我眼里。<strong>用户体系</strong>无非就是“登录”和“注册”，“修改用户信息”这些，等。简单来做的话，无非我们需要一张表去记录用户的身份信息：注册时(insert操作)，往表里插入一个数据；登录时(select&amp;update操作)，通过用户标识(手机号、邮箱等)判断用户的密码是否正确；修改用户信息(select&amp;update操作)，就是直接update这个uid的用户信息(头像、昵称等)。</p><p><img src="/articles/电商设计手册/skr-account-smaple-structure.png" alt></p><p>这样设计的确没什么问题，很简单不是么。但是随着业务的发展，一方面我们需要提供统一的用户管理(高内聚)，又要提高系统的可扩展性，所以我想呈现出来的是我理解的<strong>一个基本用户体系应该有的东西</strong>。</p><h3 id="一个基本用户体系应该有的东西"><a href="#一个基本用户体系应该有的东西" class="headerlink" title="一个基本用户体系应该有的东西"></a>一个基本用户体系应该有的东西</h3><p>首先我们对原有的用户表进行再一次的抽象(抽离用户注册、登录依赖的字段、第三方登录) -&gt; <strong>账户表</strong>，为什么这么做？随着业务的发展，以前只维护一个产品，也许某一天又开发新的产品，这样我们就可以统一的维护我们公司所有产品的注册登录逻辑，不同的产品只维护该产品和用户相关的信息即可(具体依赖产品形态)。如下图所示：</p><p><img src="/articles/电商设计手册/skr-user-system-2.png" alt></p><p>上图中，还提到了第三方登录/员工表/后台权限管理，这些都是一些用户体系基本必备的结构。</p><p>第三方登录：第三方也是登录方式的一种，我们也把它抽象到账户的一部分，如上图所示。其次，关于第三方登录这里存在一个交互方式设计存在的问题，后面交互设计时会提到。</p><p>员工：因为上面我们抽离了账户表，所以内部的管理系统后台也可以统一的使用账户表的登录逻辑，这样全公司在账号这个事情上达到了真正的高内聚。</p><p>提到了员工，我们的内部各种系统后台肯定涉及各种的权限管理，所以这里提到了简单的RBAC(基于角色的权限控制)，具体的逻辑数据模型设计会提到。</p><h3 id="最终的架构"><a href="#最终的架构" class="headerlink" title="最终的架构"></a>最终的架构</h3><p>随着业务产品形态的越来越复杂，在设计架构的时候，我们需要分析其中的<strong>变与不变</strong>：</p><ul><li>变：越来越多的产品个性化用户需求</li><li>不变：注册登录的逻辑</li></ul><p>最终的结果，我们把原有的用户拆成了<strong>账户</strong>和<strong>用户</strong>，同时我们也要在这里明确这两个概念的区别：</p><ul><li>账户：整个体系唯一生产uid的地方，内聚注册登录逻辑，不涉及产品业务需求</li><li>用户：不同产品个性化的用户需求信息</li></ul><p>最终的架构图如下：</p><ul><li>第一部分：账户(<strong>服务层</strong>)</li><li>第二部分：用户(<strong>应用层</strong>，无限水平扩展)</li><li>第三部分：员工(<strong>应用层</strong>，员工权限体系)</li></ul><p><img src="/articles/电商设计手册/skr-account-structure.jpg" alt></p><h2 id="数据模型设计"><a href="#数据模型设计" class="headerlink" title="数据模型设计"></a>数据模型设计</h2><p>对应上面的架构，我们很容易设计出我们的数据模型(这里假设我们目前只有一个对C端的应用)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">账户 -&gt; 1.账户表</span><br><span class="line">用户 -&gt; 2.用户表</span><br><span class="line">员工 -&gt; 3.员工表</span><br></pre></td></tr></table></figure><p>除了上面三张表外，还需要我们的R(role)B(base)A(access)C(control)权限管理,RBAC基于角色的权限管理大家应该很熟悉，这里我就不详细说了，简单的RBAC首先需要：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4.系统菜单表(菜单即权限)，系统的uri路径</span><br><span class="line">5.权限表(菜单即权限)，具体的权限就是访问系统的菜单</span><br><span class="line">6.角色表，一个角色具有哪些权限</span><br><span class="line">7.员工和角色的关联表，一个员工属于哪个角色</span><br></pre></td></tr></table></figure><p>好了一个简单的RBAC涉及的表基本罗列出来了，但是在我的工作经历中大家实现的权限管理往往只针对某个系统，这样对于众多的系统后台来说就是乱、重复造轮子、权限管理效率低。所以我在上面的架构设计中把权限作为了一个服务为全系统提供基础服务能力。而达到这个目的的结果我只需要再增加一张表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8.后台管理系统表, 登记所有的后台管理系统(这样通过系统id和系统资源uri的id就可以全局构成唯一性，单纯的uri存在重复的可能性，用uri不用url的原因是域名存在变动的可能性)</span><br></pre></td></tr></table></figure><p>最后我们的用户体系应该基本就上面8张表。咦，貌似漏掉了第三方登录，我们加上吧，很简单如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9. 第三方用户登录表，记录不同第三方的用户标示</span><br></pre></td></tr></table></figure><p>最最后就是上面的9张表了，具体的表结构和sql如下：</p><p><img src="/articles/电商设计手册/skr-account-model-2.png" alt></p><p><strong>账户模型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 账户模型</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`account_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'账号id'</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">15</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'手机号'</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`create_ip_at`</span> <span class="built_in">varchar</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建ip'</span>,</span><br><span class="line">  <span class="string">`last_login_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'最后一次登录时间'</span>,</span><br><span class="line">  <span class="string">`last_login_ip_at`</span> <span class="built_in">varchar</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后一次登录ip'</span>,</span><br><span class="line">  <span class="string">`login_times`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'登录次数'</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_email`</span> (<span class="string">`email`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_phone`</span> (<span class="string">`phone`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_username`</span> (<span class="string">`username`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'账户'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第三方账户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`account_platform`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增id'</span>,</span><br><span class="line">  <span class="string">`uid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'账号id'</span>,</span><br><span class="line">  <span class="string">`platform_id`</span> <span class="built_in">varchar</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'平台id'</span>,</span><br><span class="line">  <span class="string">`platform_token`</span> <span class="built_in">varchar</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'平台access_token'</span>,</span><br><span class="line">  <span class="string">`type`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'平台类型 0:未知,1:facebook,2:google,3:wechat,4:qq,5:weibo,6:twitter'</span>,</span><br><span class="line">  <span class="string">`nickname`</span> <span class="built_in">varchar</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'昵称'</span>,</span><br><span class="line">  <span class="string">`avatar`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'头像'</span>,</span><br><span class="line">  <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_uid`</span> (<span class="string">`uid`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_platform_id`</span> (<span class="string">`platform_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'第三方用户信息'</span>;</span><br></pre></td></tr></table></figure><p><strong>用户模型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 用户模型</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`skr_member`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line">  <span class="string">`uid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'账号id'</span>,</span><br><span class="line">  <span class="string">`nickname`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'昵称'</span>,</span><br><span class="line">  <span class="string">`avatar`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'头像(相对路径)'</span>,</span><br><span class="line">  <span class="string">`gender`</span> enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'unknow'</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'unknow'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`role`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'角色 0:普通用户 1:vip'</span>,</span><br><span class="line">  <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_uid`</span> (<span class="string">`uid`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'账户信息'</span>;</span><br></pre></td></tr></table></figure><p><strong>员工模型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`staff_info`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'员工id'</span>,</span><br><span class="line">    <span class="string">`uid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'账号id'</span>,</span><br><span class="line">    <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'员工邮箱'</span>,</span><br><span class="line">    <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">15</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'员工手机号'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'员工姓名'</span>,</span><br><span class="line">    <span class="string">`nickname`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'员工昵称'</span>,</span><br><span class="line">    <span class="string">`avatar`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'员工头像(相对路径)'</span>,</span><br><span class="line">    <span class="string">`gender`</span> enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'unknow'</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'unknow'</span> <span class="keyword">COMMENT</span> <span class="string">'员工性别'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_uid`</span> (<span class="string">`uid`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_email`</span> (<span class="string">`email`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_phone`</span> (<span class="string">`phone`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'员工信息(这里列了大概的信息，多的可以垂直拆表)'</span>;</span><br></pre></td></tr></table></figure><p><strong>系统权限管理模型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 权限管理: 系统map</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`auth_ms`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">smallint</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增id'</span>,</span><br><span class="line">    <span class="string">`ms_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'系统名称'</span>,</span><br><span class="line">    <span class="string">`ms_desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'系描述'</span>,</span><br><span class="line">    <span class="string">`ms_domain`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'系统域名'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_domain`</span> (<span class="string">`ms_domain`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'系统map(登记目前存在的后台系统信息)'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 权限管理: 系统menu</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`auth_ms_menu`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增id'</span>,</span><br><span class="line">    <span class="string">`ms_id`</span> <span class="built_in">smallint</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'系统id'</span>,</span><br><span class="line">    <span class="string">`parent_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'父菜单id'</span>,</span><br><span class="line">    <span class="string">`menu_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'菜单名称'</span>,</span><br><span class="line">    <span class="string">`menu_desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'菜描述'</span>,</span><br><span class="line">    <span class="string">`menu_uri`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'菜单uri'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`is_show`</span> enum(<span class="string">'yes'</span>,<span class="string">'no'</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'no'</span> <span class="keyword">COMMENT</span> <span class="string">'是否展示菜单'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_ms_id`</span> (<span class="string">`ms_id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_parent_id`</span> (<span class="string">`parent_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'系统menu'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 权限管理: 系统权限</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`auth_item`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增id'</span>,</span><br><span class="line">    <span class="string">`ms_id`</span> <span class="built_in">tinyint</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'系统id'</span>,</span><br><span class="line">    <span class="string">`menu_id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'页面/接口uri'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_ms_menu`</span> (<span class="string">`ms_id`</span>, <span class="string">`menu_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'系统权限'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 权限管理: 系统权限(权限的各个集合)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`auth_role`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增id'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'角色名称'</span>,</span><br><span class="line">    <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'角描述'</span>,</span><br><span class="line">    <span class="string">`auth_item_set`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'权限集合 多个值,号隔开'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'员工角色'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 权限管理: 角色与员工关系</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`auth_role_staff`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增id'</span>,</span><br><span class="line">    <span class="string">`staff_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'员工id'</span>,</span><br><span class="line">    <span class="string">`role_set`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'角色集合 多个值,号隔开'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_staff_id`</span> (<span class="string">`staff_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'权限角色与员工关系'</span>;</span><br></pre></td></tr></table></figure><h2 id="交互设计"><a href="#交互设计" class="headerlink" title="交互设计"></a>交互设计</h2><blockquote><p>友情提示：一大波图片即将到来，此处图片较多，不清楚的可点击大图查看</p></blockquote><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>注册成功之后存在至少两种交互方式：</p><ol><li>注册成功 -&gt; 跳转到登录页面</li><li>注册成功 -&gt; 自动登录 -&gt; 跳转到应用首页(或者其他页面)</li></ol><p>具体交互流程如下：</p><p><img src="/articles/电商设计手册/skr-account-register-bmpr.png" alt><br><img src="/articles/电商设计手册/skr-account-register.jpg" alt><br><img src="/articles/电商设计手册/skr-account-register-result-2.png" alt> </p><hr><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><h4 id="普通登录"><a href="#普通登录" class="headerlink" title="普通登录"></a>普通登录</h4><p><img src="/articles/电商设计手册/skr-account-login-page.png" alt><br><img src="/articles/电商设计手册/skr-account-login-logic.jpg" alt><br><img src="/articles/电商设计手册/skr-account-home-page.png" alt></p><h4 id="快捷登录"><a href="#快捷登录" class="headerlink" title="快捷登录"></a>快捷登录</h4><p>快捷登录的流程基本和上面一致只是验证密码换成了验证验证码。</p><p><img src="/articles/电商设计手册/skr-account-simple-login-page.png" alt></p><hr><h4 id="第三方登录"><a href="#第三方登录" class="headerlink" title="第三方登录"></a>第三方登录</h4><p>第三方登录的交互其实存在这样的问题：</p><ol><li>第三方账户登录成功后还需要绑定手机号/Email吗？</li></ol><p>因为我发现有些PM为了提高用户使用的简单快捷性，往往第三方登录成功后会直接产生uid，而不进行账号的绑定。这样之后在再进行账号绑定就涉及账号合并的问题，很麻烦(如果有钱包等)。如果我们一开始就进行绑定操作，这样未来账号的关系就清晰明了便于维护，第三方登录其实就相当于普通账号的别名。<br>最后这个事情做不做的结果就是，账户表account_user和第三方用户信息表account_platform是的<strong>一对多</strong>还是<strong>一对一</strong>的关系。</p><ol start="2"><li>如果绑定，已经注册的手机号/Email是否可以绑定？</li></ol><p>这个还好说，一般来说绑定的选择基本是正确的。最后具体的流程图如下：</p><p><img src="/articles/电商设计手册/skr-account-platform-login.jpg" alt></p><p>交互界面图如下： </p><p><img src="/articles/电商设计手册/skr-account-platform-login-page.png" alt></p><hr><h3 id="后台权限管理"><a href="#后台权限管理" class="headerlink" title="后台权限管理"></a>后台权限管理</h3><p>首先，我们的后台管理系统需要个响亮的称号，想了一会以前公司用过apollo,于是我准备用mars但突然冒出来个earth，地球万物之根，刚好我们这又是个全业务的基础服务管理系统，哈哈就这样吧～ <strong>Earth System</strong></p><p><strong>Earth System</strong>的权限管理功能主要分为以下四部分：</p><ul><li>系统管理(The manage system page)<ul><li>编辑页面</li><li>列表页面</li></ul></li><li>菜单管理(The menu page)<ul><li>编辑页面</li><li>列表页面</li></ul></li><li>角色管理(The role page)<ul><li>编辑页面</li><li>列表页面</li></ul></li><li>员工与角色关联管理(The role staff map page)<ul><li>编辑页面</li><li>列表页面</li></ul></li></ul><p>具体交互如下：</p><p><img src="/articles/电商设计手册/skr-earth-2.jpg" alt></p><hr><h2 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><h3 id="应用层接口-对外"><a href="#应用层接口-对外" class="headerlink" title="应用层接口(对外)"></a>应用层接口(对外)</h3><p>1.注册接口</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>非必传</td><td>用户账号</td></tr><tr><td>email</td><td>string</td><td>email/phone两者择一</td><td>用户邮箱</td></tr><tr><td>phone</td><td>string</td><td>email/phone两者择一</td><td>用户手机号</td></tr><tr><td>code</td><td>int</td><td>必传</td><td>验证码</td></tr></tbody></table><p>交互方式一(跳转到登录页面)响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交互方式二(跳转到首页页面)响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"s_token"</span>: <span class="string">"string, 用户会话标示"</span>,</span><br><span class="line">        <span class="attr">"s_token_expire"</span>: <span class="string">"string, 用户会话标示过期时间，0不过期"</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"string, 用户名"</span>,</span><br><span class="line">        <span class="attr">"nickname"</span>: <span class="string">"string, 用户昵称"</span>,</span><br><span class="line">        <span class="attr">"avatar"</span>: <span class="string">"string, 用户头像"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>: <span class="string">"string, 用户性别，male:男，female:女，other:未知"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.登录接口</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>username/email/phone三者择一</td><td>用户账号</td></tr><tr><td>email</td><td>string</td><td>username/email/phone三者择一</td><td>用户邮箱</td></tr><tr><td>phone</td><td>string</td><td>username/email/phone三者择一</td><td>用户手机号</td></tr><tr><td>password</td><td>string</td><td>必传</td><td>密码</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"s_token"</span>: <span class="string">"string, 用户会话标示"</span>,</span><br><span class="line">        <span class="attr">"s_token_expire"</span>: <span class="string">"string, 用户会话标示过期时间，0不过期"</span>,</span><br><span class="line">        <span class="attr">"nickname"</span>: <span class="string">"string, 用户昵称"</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"string, 用户名"</span>,</span><br><span class="line">        <span class="attr">"avatar"</span>: <span class="string">"string, 用户头像"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>: <span class="string">"string, 用户性别，male:男，female:女，other:未知"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.快捷登录接口</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>email</td><td>string</td><td>email/phone两者择一</td><td>用户邮箱</td></tr><tr><td>phone</td><td>string</td><td>email/phone两者择一</td><td>用户手机号</td></tr><tr><td>code</td><td>int</td><td>必传</td><td>验证码</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"s_token"</span>: <span class="string">"string, 用户会话标示"</span>,</span><br><span class="line">        <span class="attr">"s_token_expire"</span>: <span class="string">"string, 用户会话标示过期时间，0不过期"</span>,</span><br><span class="line">        <span class="attr">"nickname"</span>: <span class="string">"string, 用户昵称"</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"string, 用户名"</span>,</span><br><span class="line">        <span class="attr">"avatar"</span>: <span class="string">"string, 用户头像"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>: <span class="string">"string, 用户性别，male:男，female:女，other:未知"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.第三方登录接口</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>string</td><td>必传</td><td>平台类型 1:facebook,2:google,3:wechat,4:qq,5:weibo,6:twitter</td></tr><tr><td>platform_id</td><td>string</td><td>必传</td><td>第三方平台用户ID</td></tr><tr><td>platform_token</td><td>string</td><td>必传</td><td>第三方平台令牌</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"s_token"</span>: <span class="string">"string, 用户会话标示"</span>,</span><br><span class="line">        <span class="attr">"s_token_expire"</span>: <span class="string">"string, 用户会话标示过期时间，0不过期"</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"string, 用户名"</span>,</span><br><span class="line">        <span class="attr">"nickname"</span>: <span class="string">"string, 用户昵称"</span>,</span><br><span class="line">        <span class="attr">"avatar"</span>: <span class="string">"string, 用户头像"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>: <span class="string">"string, 用户性别，male:男，female:女，other:未知"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.用户信息修改接口</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>非必传</td><td>用户账号</td></tr><tr><td>nickname</td><td>string</td><td>非必传</td><td>昵称</td></tr><tr><td>avatar</td><td>string</td><td>非必传</td><td>头像url</td></tr><tr><td>gender</td><td>string</td><td>非必传</td><td>用户性别，male:男，female:女，other:未知</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"string, 用户名"</span>,</span><br><span class="line">        <span class="attr">"nickname"</span>: <span class="string">"string, 用户昵称"</span>,</span><br><span class="line">        <span class="attr">"avatar"</span>: <span class="string">"string, 用户头像"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>: <span class="string">"string, 用户性别，male:男，female:女，other:未知"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.用户登录状态校验</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>s_token</td><td>string</td><td>必传</td><td>用户会话标示</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"s_token_expire"</span>: <span class="string">"string, 用户会话标示过期时间，0不过期， -1登录失效"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务接口-基础服务，对内"><a href="#服务接口-基础服务，对内" class="headerlink" title="服务接口(基础服务，对内)"></a>服务接口(基础服务，对内)</h3><p><strong>账户服务：</strong></p><ol><li>注册</li></ol><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>非必传</td><td>用户账号</td></tr><tr><td>email</td><td>string</td><td>email/phone两者择一</td><td>用户邮箱</td></tr><tr><td>phone</td><td>string</td><td>email/phone两者择一</td><td>用户手机号</td></tr></tbody></table><p>交互方式一(跳转到登录页面)响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"uid"</span>: <span class="string">"string, 账户ID"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>登录</li></ol><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>非必传</td><td>用户账号</td></tr><tr><td>email</td><td>string</td><td>email/phone两者择一</td><td>用户邮箱</td></tr><tr><td>phone</td><td>string</td><td>email/phone两者择一</td><td>用户手机号</td></tr><tr><td>password</td><td>string</td><td>必传</td><td>密码</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"uid"</span>: <span class="string">"string, 账户ID"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>第三方登录</li></ol><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>string</td><td>必传</td><td>平台类型 1:facebook,2:google,3:wechat,4:qq,5:weibo,6:twitter</td></tr><tr><td>platform_id</td><td>string</td><td>必传</td><td>第三方平台用户ID</td></tr><tr><td>platform_token</td><td>string</td><td>必传</td><td>第三方平台令牌</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"uid"</span>: <span class="string">"string, 账户ID"</span>,</span><br><span class="line">        <span class="attr">"nickname"</span>: <span class="string">"string, 用户昵称"</span>,</span><br><span class="line">        <span class="attr">"avatar"</span>: <span class="string">"string, 用户头像"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>权限服务</strong></p><ol><li>获取系统菜单</li></ol><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>ms_id</td><td>string</td><td>必传</td><td>系统ID</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"ms_name"</span>: <span class="string">"string, 系统名称"</span>,</span><br><span class="line">        <span class="attr">"ms_desc"</span>: <span class="string">"string, 系描述"</span>,</span><br><span class="line">        <span class="attr">"ms_domain"</span>: <span class="string">"string, 系统域名"</span>,</span><br><span class="line">        <span class="attr">"list"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"parent_id"</span>: <span class="string">"string, 父菜单ID"</span>,</span><br><span class="line">                <span class="attr">"menu_id"</span>: <span class="string">"string, 菜单ID"</span>,</span><br><span class="line">                <span class="attr">"menu_name"</span>: <span class="string">"string, 菜单ID"</span>,</span><br><span class="line">                <span class="attr">"menu_desc"</span>: <span class="string">"string, 菜描述"</span>,</span><br><span class="line">                <span class="attr">"menu_uri"</span>: <span class="string">"string, 菜单uri"</span>,</span><br><span class="line">                <span class="attr">"child"</span> : [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"parent_id"</span>: <span class="string">"string, 父菜单ID"</span>,</span><br><span class="line">                        <span class="attr">"menu_id"</span>: <span class="string">"string, 菜单ID"</span>,</span><br><span class="line">                        <span class="attr">"menu_name"</span>: <span class="string">"string, 菜单ID"</span>,</span><br><span class="line">                        <span class="attr">"menu_desc"</span>: <span class="string">"string, 菜描述"</span>,</span><br><span class="line">                        <span class="attr">"menu_uri"</span>: <span class="string">"string, 菜单uri"</span>,</span><br><span class="line">                        <span class="attr">"child"</span> : []</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>权限校验</li></ol><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>menu_id</td><td>string</td><td>必传</td><td>菜单ID</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="购物体系"><a href="#购物体系" class="headerlink" title="购物体系"></a>购物体系</h1><h2 id="购物车服务"><a href="#购物车服务" class="headerlink" title="购物车服务"></a>购物车服务</h2><p>对于一个电商来讲，购物车是整个购买流程最重要的一步。因为电商发展到今天购物车不仅仅只是为了完成打包下单的功能；也是收藏、对比、促销提醒、相关推荐的重要展示窗口。如此多的能力我们该如何设计保证购物车的高性能、以及良好的扩展能力来满足未来的发展呢？</p><p>今天开始我们就以一个假定的场景来输出一个购物车设计：某某电商平台，是一个多租户模式（我们前面的诸多设计都是多租户模式），用户可以把商品加入到购物车，并切按照商户纬度来展示、排序。当然购物车也支持常规的各种操作：选择、删除、清空、商品失效等。并且有相关的促销能够提醒用户。同时为了监控、运营，要支撑购物车数据同步到监控、数仓等能力。</p><p>本文会从用户使用的角度以及服务端两个角度来讲解系统的能力。本篇我们的主要目的是说清楚购物车的能力以及一些逻辑。下一篇会进行购物车模型设计以及接口定义。</p><h3 id="用户视角"><a href="#用户视角" class="headerlink" title="用户视角"></a>用户视角</h3><p>我们先来定义一下在用户侧用户操作购物车的功能有哪些？</p><p><img src="/articles/电商设计手册/user-cart-c.png" alt="用户则需求"></p><p>一个购物车基本的能力基本上都在上图中，下面我们一一来分解。</p><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>我们从用户的角度来看，购物车对于用户来说可以添加商品到购物车（加购物车、立即购买都属于一种添加方式）；加入进购物车后，不想要了可以删除该商品（删一个、删多个、清空）；想多买可以修改购买数量，发现钱不够可以减少购买数量；或者发现红色的比白色更漂亮，可以在购物车方便的进行更换规格；对于一些价格很贵的商品，能够在购物车添加一些保障服务（其实是绑定的虚拟商品）；在要去结算的时候，还会提供选择能力让用户决定哪些商品真的本次要购买。</p><p>通过上面的描述我们可以看到这个过程是有其内在联系的。这里说一下关于选中功能，业界有两种做法，各有优劣，我们来看一下。淘宝的产品选中状态是保存在客户端的，并且默认不选中，刷新、重新打开APP状态会消失；京东、苏宁这一类是保存在服务端，会记录用户选中状态。针对这两种情况各有优劣。</p><p><strong>客户端：</strong></p><ol><li>性能，选中/不选中的逻辑直接放在本地做，减少网络请求</li><li>体验，多端不能同步，但是购物车相对来说更像是一个收藏夹，每次用户自己选择也无可厚非</li><li>计算，价格计算时需要上传本地选中商品（也可以本地计算）</li><li>实现，主要靠客户端实现，与服务端无关，研发解耦合</li></ol><p><strong>服务端：</strong></p><ol><li>性能，每次操作选中都需要调用服务端，而该操作可能很频繁，除了网络损耗，服务端也需要考虑该如何快速找到修改的商品</li><li>体验，多端同步状态，记录历史状态</li><li>计算，服务端可获取数据，请求时无须上传额外数据</li><li>实现，服务端与客户端需要商定如何交互，以及返回数据（每次选中会导致价格变化），耦合在一起</li></ol><p>个人认为这两种方式并无谁具备明显优势，完全是一种基于业务模式以及团队情况来做选择。我们这里后续的设计会基于在服务端保存商品选中状态。</p><p>在整个操作逻辑中，有个两个比较重要的地方单独说明一下：购买方式与购物车内修改购买属性</p><p><strong>购买方式</strong></p><p>主要的购买方式有立即购买、加入购物车、拼团购三种方式。</p><p>首先普通的加入购物车没什么太多要说的。重点来看下立即购买与拼团。</p><p>立即购买在于操作上来说就是选择商品后直接到了订单确认页面，没有购物车中去结算这一步。但是它的实现却可以依赖购物车的逻辑来做，我们来看一下使用购物车与不使用购物车实现这个逻辑有什么差别？</p><p>如果使用购物车来实现，也就是用户点击立即购买时，商品本质上还是加入到购物车中，但这个购物车却与原型的购物车不同，因为该购物车只能加一个商品，并且每次操作都会被覆盖。在视角效果上也是直接从商品详情页面跳转到订单确认页面。来看看这种方式的好处</p><ol><li>与购物车在订单确认、下单逻辑上一致，内部可以直接通过购物车获取数据</li><li>需要一个独立的专门用于一键购买的购物车来实现，内存有消耗</li></ol><p>另外一种实现方式使用一个新的数据结构，因为一般来说一键购买更简单，它只需要商品信息、价格信息即可。每次交互均可以根据sku_id来获取。</p><ol><li>订单确认、下单逻辑上需要进行改造，每次请求之间要传递约定参数</li><li>节省内存，上下交互通过sku_id来保证</li></ol><p>我们会采用使用在服务端一键购买以独立的购物车形式来实现。购物车的数据模型一致，保证了后续处理流程上的一致。</p><p>对于拼团，他其实分为两部分，首先是开团这个动作，当团成立后。我们可以选择将成团的商品加入普通购物车，同时可以加购其它商品。也可以选择将成团商品加入一键购买的购物车，保证成团商品只能买一个。拼团模式更像是加入购物车的一个前置条件。本质上它对于购物车的设计没有影响。</p><p><strong>购物车内修改购买属性</strong></p><p>这里主要是指可以在购物车便捷的操作一些需要在spu纬度操作的事情，比如：变更规格（也就是更换sku），以及选择绑定到spu纬度的服务（保险、延保等）。</p><p>我们重点说一下选择绑定的服务。例如：我们买一个手机，厂家提供了延保、各种其它附加服务，一般情况这种服务都是虚拟商品。但是这有个特殊情况。这些保障服务首先不能单独购买，其次他是跟主商品的数量息息相关。比如买两个手机，如果选择了加购服务，那么这些服务的数量必须是2，这会是一个联动关系。</p><p>这些保障服务是不能进行单独购买的，它一定要跟特定的商品捆绑销售。</p><p>服务端在存储这部分数据时一定需要考虑如何保存这种层级关系，这部分我们后面模型设计的时候大家会看到。</p><p><img src="/articles/电商设计手册/product-relations.png" alt="绑定商品关系"></p><h4 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h4><p>促销提醒很简单，返回的购物车数据，每一个商品应该携带当前的促销信息。这部分重点在于怎么获取促销信息，会在服务端看到。</p><p>然后说下购物车数量的提醒，也就是显示当前购物车商品的数量。一般来说进入到APP就会调用一个接口，获取用户的未读消息数、购物车商品数等。这里是需要非常高的读取速度。那么这种需求该如何满足呢？</p><p><strong>方案一：</strong> 我们可以设计一个结构保存了用户相关的这种提醒信息数量，每次直接读取这个数据即可。不需要去跟消息服务、购物车服务打交道拿这些数据。</p><p><strong>方案二：</strong> 在消息、购物车的模型中均设计一个保存总数量的字段，在读取数据的接口中，通过并发的方式调用这些服务拿到数据后进行聚合，这样在速度上只取决于最慢的服务。</p><p>这里我们的设计会采用 <strong>方案二</strong>，因为这样在某种程度上效率可以得到保证，同时整个系统的结构数据的一致性更容易得到保障。当然这里有个细节一定要注意，并发读取一定要设计超时，不要因为某个服务读数问题而导致拖累整个接口的性能。</p><p>接下来再来看看促销，这部分除了提醒，还需要提供对应的入口，让用户完成促销的操作。比如说某个商品有券，那么可以直接提供入口去领取；可凑单，有入口进入凑单列表并选择商品等。这部分需要解决的问题是服务端该如何及时从商品纬度拿到这些促销活动。</p><p>从用户的视角看完了，我们再来站在研发的角度看看服务端有哪些事情要做</p><h3 id="研发视角"><a href="#研发视角" class="headerlink" title="研发视角"></a>研发视角</h3><p>还是先来看看需求的汇总图：</p><p><img src="/articles/电商设计手册/user-cart-s.png" alt="服务端则需求"></p><h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4><p>对于存储，首选肯定是内存存储，至于要不要落库，我觉得没有必要。说下我的理由：</p><ol><li>购物车的数据相对变化非常频繁，落库成本比较高，如果异步方式落库，很难保障一致性</li><li>极端情况，cache奔溃了，仅仅需要用户重新加入购物车，并且我们可以通过cache的持久化机制来保证数据的恢复</li></ol><p>所以对于购物车，我们只会把数据完全保存在内存中。</p><h4 id="商品销售类型发生变化"><a href="#商品销售类型发生变化" class="headerlink" title="商品销售类型发生变化"></a>商品销售类型发生变化</h4><p>现在我们来讨论 <strong>商品销售类型发生变化</strong> 这个问题。这是什么意思呢？大家想一下：比如我把A商品加入到购物车，但是一直没有结算。这时运营说针对A商品搞一个活动，拿出10个库存5折购。那么问题来了，对于之前购物车中就有该商品的用户该如何处理？<strong>这里解决的主要问题是：购物车有该商品的用户不能直接以5折买</strong>。几种方案，我们来看一下：</p><p><strong>方案一：</strong> 促销配置后，所有购物车中有该商品的用户失效或删除，这个方案首先被pass，操作成本太高，并且用户体验差</p><p><strong>方案二：</strong> 购物车中要区分同一个SKU，不同销售类型。也就是说在我们的购物车中不是按照SKU的纬度来加商品，而是通过 <strong>SKU+售卖类型</strong> 来生成一个唯一识别码。</p><p>可以看到 <strong>方案二</strong> 解决了同一个sku在购物车并存的问题，并且库存之前互相不影响。不过这里又有一个问题？商品的售卖类型（或者说这个标记），该怎么什么地方设置？好像商品系统可以设计、促销系统也可以设置。我们的逻辑中会在促销系统中进行配置。因为商品属于基础逻辑，如果一改就是全局库存受到影响。活动结束后很难做到自动正常售卖。因此这个标记应该落到活动中进行设置（活动设置时会通过促销系统获取该商品之前的活动是否互斥，以确保配置的活动不会互相矛盾）。</p><h4 id="依赖系统"><a href="#依赖系统" class="headerlink" title="依赖系统"></a>依赖系统</h4><p>购物车系统依赖了非常多的其它系统。</p><ul><li>商品系统</li><li>库存系统</li><li>促销系统</li><li>结算系统</li></ul><p>这些依赖的系统，有的是为了传输数据，有的是为了获取数据。我们按照这两个纬度来看一下。</p><p><strong>促销提醒与计算</strong></p><p>服务端要解决的是促销的提醒与价格计算问题。</p><p>现来说计算，针对这部分最佳的方式是，调用结算中心的价格计算。我们来看一下购物车中的价格计算与订单结算时的价格计算的差异。</p><p>首先购物车中计算价格时不知道用户的地址，这会影响运费的计算；再是不知道用券的情况。那么其实如果解决了这两个问题，我们就可以让价格计算出自同一个逻辑，仅仅是部分入参不同罢了。因此我们这里计算时可以按照最高运费来计算，同时用券默认在购物车都不使用券。对于促销问题这里是可以通过促销系统确认选中的商品可以享受哪些价格的。因此促销的价格应该计算在内。</p><p>接下来在再来说说如何为用户高效的提供促销的信息。先从我们的配置视野出发。</p><p>我们在配置一个促销活动或者发一张券时，都是将多个商品归到一个促销活动或者券的下面。如果按照活动、券的纬度来获取商品效率相对比较高。</p><p><img src="/articles/电商设计手册/activity-product.png" alt="活动-商品"></p><p>但是在购物车的场景中发生了一个变化。我们是需要从商品纬度获取到该商品的所有活动信息（全平台活动、店铺活动）；<br>那么购物车中为了展示这些信息该怎么做？很常规的一个做法（也确实不少公司是这样）：把所有活动信息取出来，遍历出所有跟该商品相关的信息。这种做法效率很低，并且无法满足大规模的应用场景，比如双十一期间。</p><p>因此这里为了满足该需求，促销系统需要提供一个能力按照商品获取对应促销（活动、券）。因此一般来讲促销系统配置的活动不能仅仅是按照活动纬度存储，同时还需要生成一份商品纬度的促销信息。</p><p><img src="/articles/电商设计手册/product-activity.png" alt="商品-活动"></p><h4 id="购物车数据分析"><a href="#购物车数据分析" class="headerlink" title="购物车数据分析"></a>购物车数据分析</h4><p>对于购物车数据来说，前端会通过埋点记录加入购物车数据的情况，但是前端埋点一般是记录触发了某个前端操作，但是并不知道该操作是否成功与否。以及无法及时了解当前整体购物车的数据情况。</p><p>为了让运营团队更完整的了解购物车当前情况，我们通过后端打本地日志，然后通过日志收集的方式将日志同步给数据、监控等服务。</p><h4 id="失效与排序"><a href="#失效与排序" class="headerlink" title="失效与排序"></a>失效与排序</h4><p>还有两个小部分没有讲到，一是商品该如何失效，比如：库存没有了、下架了；二是购物车中的商品是多个店铺的，排序的策略是什么？</p><p>由于本文我们还只是讨论需求，不涉及具体的模型设计，因此只是介绍方案。首先是商品失效，这很像一个软删除操作，一旦设置，用户侧看到的商品将是无法进行结算的，只能进行删除操作。</p><p>对于排序我们会采用的设计是：根据某个店铺在购物车中最后发生操作的时间，最新的操作肯定在最上面。</p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>通过上面我们基本上搞清楚了购物车设计中我们要做什么，依赖的系统要提供什么能力。下篇开始进入数据模型的设计、前后端接口设计。</p><p>如果你对购物车上面的需求还有哪些补充，欢迎留言。我们一起来完善。</p><h2 id="购物车架构"><a href="#购物车架构" class="headerlink" title="购物车架构"></a>购物车架构</h2><p>在上一篇文章 <a href="https://dayutalk.cn/2019/12/09/%E8%B4%AD%E7%89%A9%E8%BD%A6%E8%AE%BE%E8%AE%A1%E4%B9%8B%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">购物车设计之需求分析</a> 描述了购物车的通用需求。本文重点则在如何实现上进行架构上的设计（业务+系统架构）。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>架构设计可以分为三个层面：</p><ul><li>业务架构</li><li>系统架构</li><li>技术架构</li></ul><p>快速简单的说明下三个架构的意思；当我们拿到购物车需求时，我们说用Golang来实现，存储用Redis；这描述的是技术架构；我们对购物车代码项目进行代码分层，设计规范，以及依赖系统的规划这叫系统架构；</p><p>那业务架构是什么呢？业务架构本质上是对系统架构的文字语言描述；什么意思？我们拿到一个需求首先要跟需求方进行沟通，建立统一的认知。比如：规范名词（购物车中说的商品与商品系统中商品的含义是不同的）；建立大家都能明白的模型，购物车、用户、商品、订单这些实体之间的互动，以及各自具备什么功能。</p><p>在业务架构分析上有很多方法论，比如：领域驱动设计，但是它并不是唯一的业务架构分析方法，也并不是说最好的。适合你的就是最好的。我们常用的实体关系图、UML图也属于业务架构领域；</p><p>这里需要强点一点的是，不管你用什么方式来建模设计，有设计总比没设计强，其次一定要将建模的内容体现到你的代码中去。</p><p>本文在业务架构上的分析借助了 <code>DDD</code> （领域驱动设计）思想；还是那句话<code>适合的就是最好的</code>。</p><h3 id="业务架构"><a href="#业务架构" class="headerlink" title="业务架构"></a>业务架构</h3><p>通过前面的需求分析，我们已经明确我们的购物车要干什么了。先来看一下一个典型的用户操作购物车过程。</p><p><img src="/articles/电商设计手册/cart-sys-00.png" alt="用户旅程"></p><p>在这个过程中，用户使用购物车这个载体完成了商品的购买流程；不断流动的数据是商品，购物车这个载体是稳定的。这是我们系统中的稳定点与变化点。</p><p>商品的流动方式可能多种多样，比如从不同地方加入购物车，不同方式加入购物车，生命周期在购物车中也不一样；但是这个流程是稳定的，一定是先让购物车中存在商品，然后才能去结算产生订单。</p><p>商品在购物车中的生命周期如下：</p><p><img src="/articles/电商设计手册/cart-sys-01.jpg" alt="过程"></p><p>按照这个过程，我们来看一下每个阶段对应的操作。</p><p><img src="/articles/电商设计手册/cart-sys-02.jpg" alt="过程对应的操作"></p><p>这里注意一点，加车前这个操作其实我们可以放到购物车的添加操作中，但是由于这部分是非常不稳定且多变的。我们将其独立出来，方便后续进行扩展而不影响相对比较稳定的购物车阶段。</p><blockquote><p>上面这三个阶段，按照DDD中的概念，应该叫做实体，他们整体构成了购物车这个域；今天我们先不讲这些概念，就先略过，后面有机会单独发文讲解。</p></blockquote><h4 id="加车前"><a href="#加车前" class="headerlink" title="加车前"></a>加车前</h4><p>通过流程分析，我们总结出了系统需要具备的操作接口，以及这些接口对应的实体，现在我们先来看加车前主要要做些什么；</p><p>加车前其实主要就是对准备加入的购物车商品进行各个纬度的校验，检查是否满足要求。</p><p>在让用户加车前，我们首先解决的是用户从哪里卖，然后进行验证？因为同一个商品从不同渠道购买是存在不同情况的，比如：小米手机，我们是通过秒杀买，还是通过好友众筹买，或者商城直接购买，价格存在差异，但是实际上他是同一个商品；</p><p>第二个问题是是否具备购买资格，还是上面说的，秒杀、众筹这个加车操作，不是谁都可以添加的，得现有资格。那么资格的检查也是放到这里；</p><p>第三个问题是对这个购买的商品进行商品属性上的验证，如是否上下架，有库存，限购数量等等。</p><p>而且大家会发现，这里的验证条件可能是非常多变的。如何构建一个方便扩展的代码呢？</p><p><img src="/articles/电商设计手册/cart-sys-03.jpg" alt="加车的验证"></p><p>整个加车过程，重要的就是根据来源来区分不同的验证。我们有两种选择方式。</p><p>方式一：通过策略模式+门面模式的方式来搞定。策略就是根据不同的加车来源进行不同的验证，门面就是根据不同的来源封装一个个策略；</p><p>方式二：通过责任链模式，但是这里需要有一个变化，这个链在执行过程中，可以选择跳过某些节点，比如：秒杀不需要库存、也不需要众筹的验证；</p><p>通过综合的分析我选择了责任链的模式。贴一下核心代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 每个验证逻辑要实现的接口</span><br><span class="line">type Handler interface &#123;</span><br><span class="line">Skipped(in interface&#123;&#125;) bool // 这里判断是否跳过</span><br><span class="line">HandleRequest(in interface&#123;&#125;) error // 这里进行各种验证</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 责任链的节点</span><br><span class="line">type RequestChain struct &#123;</span><br><span class="line">Handler</span><br><span class="line">Next *RequestChain</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置handler</span><br><span class="line">func (h *RequestChain) SetNextHandler(in *RequestChain) *RequestChain &#123;</span><br><span class="line">h.Next = in</span><br><span class="line">return in</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于设计模式，大家可以看我小伙伴的github：<a href="https://github.com/TIGERB/easy-tips/tree/master/go/src/patterns" target="_blank" rel="noopener">https://github.com/TIGERB/easy-tips/tree/master/go/src/patterns</a></p><h4 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h4><p>说完了加车前，现在来看购物车这一部分。我们在之前曾讨论过，购物车可能会有多种形态的，比如：存储多个商品一起结算，某个商品立即结算等。因此购物车一定会根据渠道来进行购物车类型的选择。</p><p>这部分的操作相对是比较稳定的。我们挑几个比较重要的操作来讲一下思路即可。</p><p><strong>加入购物车</strong></p><p>通过把条件验证的前置，会发现在进行加车操作时，这部分逻辑已经变得非常的轻量了。要做的主要是下面几个部分的逻辑。</p><p><img src="/articles/电商设计手册/cart-sys-04.jpg" alt></p><p>这里有几个取巧的地方，首先是获取商品的逻辑，由于在前面验证的时候也会用到，因此这里前面获取后会通过参数的方式继续往后传递，因此这里不需要在读库或者调用服务来获取；</p><p>其次这里需要把当前用户现有购物车数据获取到，然后将添加的这个商品添加进来。这是一个类似合并操作，原来这个商品是存在，相当于数量加一；需要注意这个商品跟现存的商品有没有父子关系，有没有可能加入后改变了某个活动规则，比如：原来买了2个送1个赠品，现在再添加了一个变成3个，送2个赠品；</p><blockquote><p>注意：这里的添加并不是在购物车直接改数量，可能就是在列表、详情页直接添加添加。</p></blockquote><p>通过将合并后的购物车数据，通过营销活动检查确认ok后，直接回写到存储中。</p><p><strong>合并购物车</strong></p><p>为什么会有合并购物车这个操作？因为一般电商都是准许游客身份进行操作的，因此当用户登录后需要将二者进行合并。</p><p>这里的合并很多部分的逻辑是可以与加入购物车复用的逻辑。比如：合并后的数据都需要检查是否合法，然后覆写回存储中。因此大家可以看到这里的关联性。设计的方法在某种程度上要通用。</p><p><strong>购物车列表</strong></p><p>购物车列表这是一个非常重要的接口，原则上购物车接口会提供两种类型，一种简版，一种完全版本；</p><p>简版的列表接口主要是用在类似PC首页右上角之类获取简单信息；完全版本就是在购物车列表中会用到。</p><p>在实际实现中，购物车绝不仅仅是一个读取接口那么简单。因为我们都知道不管是商品信息、活动信息都是在不断的发生变化。因此每次的读取接口必然需要检查当前购物车中数据的合法性，然后发现不一致后需要覆写原存储的数据。</p><p><img src="/articles/电商设计手册/cart-sys-05.jpg" alt></p><p>也有一些做法会在每个接口都去检查数据的合法性，我建议为了性能考虑，部分接口可以适当放宽检查，在获取列表时再进行完整的检查。比如添加接口，我只会检测我添加的商品的合法性，绝不会对整个购物车进行检查。因为该操作之后一般都会调用列表操作，那么此时还会进行校验，二者重复操作，因此只取后者。</p><h4 id="结算"><a href="#结算" class="headerlink" title="结算"></a>结算</h4><p>结算包括两部分，结算页的详情信息与提交订单。结算页可以说是在购物车列表上的一个包装，因为结算页与列表页最大的不同是需要用户选择配送地址（虚拟商品另说），此时会产生更明确的价格信息，其他基本一致。因此在设计购物车列表接口的时候，一定要考虑充分的通用性。</p><p>这里另外一个需要注意的是：立即购买，我们也会通过结算页接口来实现，但是内部其实还是会调用添加接口，将商品添加到购物车中；有三个需要注意的地方，首先是这个添加操作是服务内部完成的，对于服务调用方是不需要感知这个加入操作的存在；其次是这个购物车在Redis中的Key是独立于普通购物车的，否则二者的商品耦合在一起非常难于操作处理；最后立即购买的购物车要考虑账号多终端登录的时候，彼此数据不能互相影响，这里可以用每个端的uuid来作为购物车的标记避免这种情况。</p><p>购物车的最后一步是生成订单，这一步最要紧的是需要给购物车加锁，避免提交过程中数据被篡改，多说一句，很多人写的Redis分布式锁代码都存在缺陷，大家一定要注意原子性的问题，这类文章网络上很多不再赘述。</p><p>加锁成功之后，我们这里有多种做法，一种是按照DB涉及组织数据开始写表，这适用于业务量要求不大，比如订单每秒下单量不超过2000K的；那如果你的系统并发要求非常高怎么办？</p><p>其实也很简单，高性能的三大法宝之一：异步；我们提交的时候直接将数据快照写入MQ中，然后通过异步的方式进行消费处理，可以通过通过控制消费者的数量来提升处理能力。这种方法虽然性能提升，但是复杂度也会上升，大家需要根据自己的实际情况来选择。</p><p>关于业务架构的设计，到此告一段落，接下来我们来看系统架构。</p><h3 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h3><p>系统结构主要包含，如何将业务架构映射过来，以及输出对应输入参数、输出参数的说明。由于输入、输出针对各自业务来确定的，而且没有什么难度，我们这里就只说如何将业务架构映射到系统架构，以及系统架构中最核心的Redis数据结构选择以及存储的数据结构设计。</p><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><p>下面的代码目录是按照 <code>Golang</code> 来进行设计的。我们来看看如何将上面的业务架构映射到代码层面来。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">├── addproducts.<span class="keyword">go</span></span><br><span class="line">├── cartlist.<span class="keyword">go</span></span><br><span class="line">├── mergecart.<span class="keyword">go</span></span><br><span class="line">├── entity</span><br><span class="line">│   ├── cart</span><br><span class="line">│   │   ├── add.<span class="keyword">go</span></span><br><span class="line">│   │   ├── cart.<span class="keyword">go</span></span><br><span class="line">│   │   └── list.<span class="keyword">go</span></span><br><span class="line">│   ├── order</span><br><span class="line">│   │   ├── checkout.<span class="keyword">go</span></span><br><span class="line">│   │   ├── order.<span class="keyword">go</span></span><br><span class="line">│   │   └── submit.<span class="keyword">go</span></span><br><span class="line">│   └── precart</span><br><span class="line">├── event</span><br><span class="line">│   └── sendorder.<span class="keyword">go</span></span><br><span class="line">├── facade</span><br><span class="line">│   ├── activity.<span class="keyword">go</span></span><br><span class="line">│   └── product.<span class="keyword">go</span></span><br><span class="line">└── repo</span><br></pre></td></tr></table></figure><p>外层有 <code>entity</code>、<code>event</code>、<code>facade</code>、<code>repo</code>这四个目录，职责如下：</p><p><strong>entity</strong>: 存放的是我们前面分析的购物领域的三个实体；所有主要的操作都在这三个实体上；</p><p><strong>event</strong>: 这是用来处理产生的事件，比如刚刚说的如果我们提交订单采用异步的方式，那么该目录就该完成的是如何把数据发送到MQ中去；</p><p><strong>facade</strong>: 这儿目录是干嘛的呢？这主要是因为我们的服务还需要依赖像商品、营销活动这些服务，那么我们不应该在实体中直接调用它，因为第三方可能存在变动，或者有增加、减少，我们在这里进行以下简单的封装(设计模式中的门面模式)；</p><p><strong>repo</strong>: 这个目录从某种程度上可以理解为 <code>Model</code>层，在整个领域服务中，如果与持久化打交道，都通过它来完成。</p><p>最后外层的几个文件，就是我们所提供的领域服务，供应用层来进行调用的。</p><blockquote><p>为了保证内容的紧凑，我这里放弃了对整个微服务的目录介绍，只单独介绍了领域服务，后续会单独成文介绍下微服务的整个系统架构。</p></blockquote><p>通过上面的划分，我们完成了两件事情：</p><ol><li><p>业务架构分析的结构在系统代码中都有映射，他们彼此体现。这样最大的好处是，保证设计与代码的一致性，看了文档你就知道对应的代码在哪里；</p></li><li><p>每个目录各自的关注点都进行了分离，更内聚，更容易开发与维护。</p></li></ol><h4 id="Redis存储"><a href="#Redis存储" class="headerlink" title="Redis存储"></a>Redis存储</h4><p>现在来看，我们选择Redis作为购物商品数据的存储，我们要解决两个问题，一是我们需要存哪些数据？二是我们用什么结构来存？</p><p>网络上很多写购物车的都是只保存一个商品id，真实场景是很难满足需求的。你想想，一个商品id如何记住用户选择的赠品？用户上次选择的活动？以及购买的商品渠道？</p><p>综合比较通用的场景，我给出一个参考结构：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 购物车数据</span></span><br><span class="line"><span class="keyword">type</span> ShoppingData <span class="keyword">struct</span> &#123;</span><br><span class="line">Item       []*Item <span class="string">`json:"item"`</span></span><br><span class="line">UpdateTime <span class="keyword">int64</span>   <span class="string">`json:"update_time"`</span></span><br><span class="line">Version    <span class="keyword">int32</span>   <span class="string">`json:"version"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个商品item元素</span></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">ItemId       <span class="keyword">string</span>          <span class="string">`json:"item_id"`</span></span><br><span class="line">ParentItemId <span class="keyword">string</span>          <span class="string">`json:"parent_item_id,omitempty"`</span> <span class="comment">// 绑定的父item id</span></span><br><span class="line">OrderId      <span class="keyword">string</span>          <span class="string">`json:"order_id,omitempty"`</span>       <span class="comment">// 绑定的订单号</span></span><br><span class="line">Sku          <span class="keyword">int64</span>           <span class="string">`json:"sku"`</span></span><br><span class="line">Spu          <span class="keyword">int64</span>           <span class="string">`json:"spu"`</span></span><br><span class="line">Channel      <span class="keyword">string</span>          <span class="string">`json:"channel"`</span></span><br><span class="line">Num          <span class="keyword">int32</span>           <span class="string">`json:"num"`</span></span><br><span class="line">Status       <span class="keyword">int32</span>           <span class="string">`json:"status"`</span></span><br><span class="line">TTL          <span class="keyword">int32</span>           <span class="string">`json:"ttl"`</span>                     <span class="comment">// 有效时间</span></span><br><span class="line">SalePrice    <span class="keyword">float64</span>         <span class="string">`json:"sale_price"`</span>              <span class="comment">// 记录加车时候的销售价格</span></span><br><span class="line">SpecialPrice <span class="keyword">float64</span>         <span class="string">`json:"special_price,omitempty"`</span> <span class="comment">// 指定价格加购物车</span></span><br><span class="line">PostFree     <span class="keyword">bool</span>            <span class="string">`json:"post_free,omitempty"`</span>     <span class="comment">// 是否免邮</span></span><br><span class="line">Activities   []*ItemActivity <span class="string">`json:"activities,omitempty"`</span>    <span class="comment">// 参加的活动记录</span></span><br><span class="line">AddTime      <span class="keyword">int64</span>           <span class="string">`json:"add_time"`</span></span><br><span class="line">UpdateTime   <span class="keyword">int64</span>           <span class="string">`json:"update_time"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 活动</span></span><br><span class="line"><span class="keyword">type</span> ItemActivity <span class="keyword">struct</span> &#123;</span><br><span class="line">ActID    <span class="keyword">string</span> <span class="string">`json:"act_id"`</span></span><br><span class="line">ActType  <span class="keyword">string</span> <span class="string">`json:"act_type"`</span></span><br><span class="line">ActTitle <span class="keyword">string</span> <span class="string">`json:"act_title"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点说一下 <code>Item</code> 这个结构，<code>item_id</code> 这个字段是标记购物车中某个商品的唯一标记，因为我们之前说过，同一个sku由于渠道不同，那么在购物车中会是两个不同的item；接下来的 <code>parent_item_id</code> 字段是用来标记父子关系的，这里将可能存在的树结构转成了顺序结构，我们不管是父商品还是子商品，都采用顺序存储，然后通过这个字段来进行关联；有些同学可能会奇怪，为什么会存order id这个字段呢？大家关注下自己的日常业务，比如：再来一单、定金预售等，这种一定是与某个订单相关联的，不管是为了资格验证还是数据统计。剩下的字段都是一些非常常规的字段，就不在一一介绍了；</p><blockquote><p>字段的类型，大家根据自己的需要进行修改。</p></blockquote><p>接下来该说怎么选择Redis的存储结构了，Redis常用的 <code>Hash Table、集合、有序集合、链表、字符串</code> 五种，我们一个个来分析。</p><p>首先购车一定有一个key来标记这个购物车属于哪个用户的，为了简化，我们的key假设是：<code>uid:cart_type</code>。</p><p>我们先来看如果用 <code>Hash Table</code>；我们添加时，需要用到如下命令：<code>HSET uid:cart_type sku ShoppingData</code>；看起来没问题，我们可以根据sku快速定位某个商品然后进行相关的修改等，但是注意，ShoppingData是一个json串，如果用户购物车中有非常多的商品，我们用 <code>HGETALL uid:cart_type</code> 获取到的时间复杂度是O(n)，然后代码中还需要一一反序列化，又是O(n)的复杂度。</p><p>如果用<code>集合</code>，也会遇到类似的问题，每个购物车看做一个集合，集合中的每个元素是 ShoppingData ，取到代码中依然需要逐一反序列化(反序列化是成本)，关于有序集合与链表就不在分析，大家可以按照上面的思路去尝试下问题所在。</p><p>看起来我们没得选，只有使用<code>String</code>，那我们来看一下<code>String</code>的契合度是什么样子。首先<code>SET uid:cart_type ShoppingDataArr</code>；我们把购物车所有的数据序列化成一个字符串存储，每次取出来的时间复杂度是O(1)，序列化、反序列化都只需要一次。看来是非常不错的选择。但是在使用中大家还是有几点需要注意。</p><ol><li>单个Value不能太大，要不然就会出现大key问题，所以一般购物车有上限限制，比如item不能超过多少个；</li><li>对redis的操作性能提升上来了，但是代码的就是修改单个item时的不便，必须每次读取全部然后找到对应的item进行修改；这里我们可以把从redis中的数据读取出来后，在内存中构建一个HashTable，来减少每次遍历的复杂度；</li></ol><p>网上也看到很多Redis数据结构组合使用来保存购物车数据的，但是无疑增加了网络开销，相比起来还是String最经济划算。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此对于购物车的实现设计算是完结了，其中关于订单表的设计会单独放到订单模块去讲。</p><p>对于整个购物车服务，虽然没有写的详细到某个具体的接口，但是分析到这一步，我相信大家心中都是有沟壑的，能够结合自己的业务去实现它。</p><p>文中有些很有意思的地方，建议大家动手去做做看，有任何问题，我们随时交流。</p><ul><li>改编版的责任链模式</li><li>Redis的分布式事务锁实现</li></ul><p>接下来终于要到订单部分的设计了，希望大家继续关注我们。</p><h2 id="商品系统"><a href="#商品系统" class="headerlink" title="商品系统"></a>商品系统</h2><h2 id="商品系统-Temporal万物"><a href="#商品系统-Temporal万物" class="headerlink" title="商品系统(Temporal万物)"></a>商品系统(Temporal万物)</h2><p>今天我们开始「商品系统」的篇章。本文分为如下五大模块：</p><ul><li>需求分析</li><li>架构设计</li><li>Spu和Sku的故事</li><li>数据模型设计</li><li>接口设计</li></ul><p>第一篇我们主要看看一个入门的电商平台(<strong>B2C</strong>)如何去构建自己的<strong>基础商品信息</strong>，其实这个事情很简单，想想我们的现实生活，商家<strong>摆放</strong>商品到货架，客户从货架<strong>挑选</strong>商品，客户把挑选好的商品<strong>放入</strong>购物车(篮)，最后客户去收银台<strong>结账</strong>。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>对于一个电商平台来讲，我们怎么理解上面的简单示例呢？接着，我们来拆分上面这个简单的事情：</p><blockquote><p>商家<strong>摆放</strong>商品到货架，客户从货架<strong>挑选</strong>商品，客户把挑选好的商品<strong>放入</strong>购物车(篮)，最后客户去收银台<strong>结账</strong></p></blockquote><ol><li>商家是谁：电商平台</li><li>摆放是什么意思：上架</li><li>货架在哪：前台系统(web/app/…)</li><li>挑选：浏览前台系统</li><li>放入：点击前台系统「加入购物车按钮」</li><li>…(暂不多说了)</li></ol><p><strong>备注</strong>：本篇文章主要来看看1、2、3、4步该如何去设计。</p><p>通过上面的分析我们可以得出下面的信息：</p><ol><li>我们需要一个「电商平台」，电商平台里面需要有个<strong>商品后台系统</strong>。</li><li>我们上架什么东西呢？商品！所以<strong>商品后台系统</strong>需要具备<strong>创建</strong>和<strong>发布</strong>商品到<strong>前台系统</strong>的功能。</li><li>我们需要一个<strong>前台系统</strong>(比如网页)，前台系统具备商品列表和商品详情的页面，可供用户<strong>浏览</strong>。</li><li>前台系统的数据怎么来？所以我们需要一个<strong>接口网关</strong>(对外统一提供服务能力，企业总线)和<strong>商品服务</strong></li></ol><p>整理之后得到如下的需求点：</p><table><thead><tr><th>需求点</th><th>功能点</th><th>项目命名</th><th>技术栈</th></tr></thead><tbody><tr><td>商品后台系统</td><td>1.创建商品 2.发布商品到前台系统</td><td>Temporal Backend</td><td>PHP</td></tr><tr><td>前台系统</td><td>1.商品列表 2.商品详情</td><td>Skr Frontend</td><td>Vue</td></tr><tr><td>接口网关</td><td>企业总线</td><td>Skr Gateway</td><td>kong</td></tr><tr><td>商品服务</td><td>1.创建商品接口 2.商品状态变更接口 2.商品列表接口 3. 商品详情接口</td><td>Temporal Service</td><td>Golang</td></tr></tbody></table><h3 id="架构设计-1"><a href="#架构设计-1" class="headerlink" title="架构设计"></a>架构设计</h3><p>通过上面的需求分析，再加上之前的《电商设计手册之用户体系》中的用户体系和《支付开发，不得不了解的国内、国际第三方支付流程》中的支付服务，我们规划出以下的架构图。</p><p><img src="/articles/电商设计手册/skr-product-service.jpg" alt></p><h3 id="Spu和Sku的故事"><a href="#Spu和Sku的故事" class="headerlink" title="Spu和Sku的故事"></a>Spu和Sku的故事</h3><p>对我们程序猿来讲「商品系统」刚开始的样子就是如下三点：</p><ol><li>创建商品功能：首先我们会有一张商品表，每创建一个商品我们会的到一个goods_id，如果商品存在父子的关系，加一个parent_id的字段就搞定了。</li><li>商品列表接口：商品表分页查询商品。</li><li>商品详情接口：商品表按goods_id索引查询商品信息。</li></ol><p>很简单是吧，基本一张表就搞定了，看起来也是没什么问题的。但是呢，程序设计的巧妙之处就在于<strong>抽象能力</strong>，电商行业把<code>goods_id</code>进行了进一步的抽象，产生了Spu和Sku概念，在了解Spu和Sku定义之前，我们还得了解下<strong>销售属性</strong>的含义，举个例子便于理解：</p><p>想想我们的现实生活，假如我们去批发市场上了一批AJ1球鞋，批发商会给我们不同<strong>配色</strong>、<strong>大小</strong>的AJ1球鞋。我们在店里销售这些商品时都会询问客户：“您是需要什么<strong>颜色</strong>和<strong>大小</strong>的AJ1球鞋呢？”。这里的<strong>颜色</strong>和<strong>大小</strong>就是所谓的<strong>销售属性</strong>，因为不同<strong>颜色</strong>和<strong>大小</strong>的AJ1球鞋可能价格不同、库存数量不同，现实生活中是不是如此，不同颜色或大小的AJ1都有差别巨大的价格。</p><p>接着，我们来看看Spu和Sku定义：</p><table><thead><tr><th>名称</th><th>概念</th><th>解释</th></tr></thead><tbody><tr><td>Spu</td><td>standard product unit 标准产品单位</td><td>goods_id剥离销售属性的部分，例如：小米8。商品列表我们展示Spu列表。</td></tr><tr><td>Sku</td><td>stock keeping unit 库存量单位</td><td>就是你想买的那个商品真正的编号，这个编号对应的库存就是你想买的那个商品的库存量。Spu+一或多个销售属性对应一个Sku，例如：小米8黑128G，其中黑和128G就是销售属性，小米8就是一个Spu。</td></tr></tbody></table><p>搞清楚了么？</p><h3 id="数据模型设计-1"><a href="#数据模型设计-1" class="headerlink" title="数据模型设计"></a>数据模型设计</h3><p>所以最后简单的<strong>商品表</strong>就拆成了<strong>spu表</strong>和<strong>sku表</strong>，接着我们还抽象出来了可复用的<strong>销售属性表</strong>和<strong>销售属性值表</strong>。除此之外<br>我们应该还有<strong>品牌表</strong>、<strong>类别表</strong>、简单的<strong>sku库存表</strong>(目前简单设计此表，后期具体业务重构此表)。接着我们列下这些表的明细：</p><table><thead><tr><th>表名称</th><th>表名</th></tr></thead><tbody><tr><td>品牌表</td><td>product_brands</td></tr><tr><td>类别表</td><td>product_category</td></tr><tr><td>spu表</td><td>product_spu</td></tr><tr><td>sku表</td><td>product_sku</td></tr><tr><td>销售属性表</td><td>product_attr</td></tr><tr><td>销售属性值</td><td>product_attr_value</td></tr><tr><td>sku库存表</td><td>product_sku_stock</td></tr></tbody></table><p>除了上面的表之外，我又加了另一张表 <code>关联关系冗余表 product_spu_sku_attr_map</code>，为什么呢？顾名思义，冗余用的，有了这张表，我们可以很高效的得到：</p><ol><li>spu下 有哪些sku</li><li>spu下 有那些销售属性</li><li>spu下 每个销售属性对应的销售属性值(一对多)</li><li>spu下 每个销售属性值对应的sku(一对多)</li></ol><p>具体表结构如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 品牌表 product_brands</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_brands`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'品牌ID'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'品牌名称'</span>,</span><br><span class="line">    <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'品牌描述'</span>,</span><br><span class="line">    <span class="string">`logo_url`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'品牌logo图片'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'品牌表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 类别表 product_category</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_category`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'分类ID'</span>,</span><br><span class="line">    <span class="string">`pid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'父ID'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'分类名称'</span>,</span><br><span class="line">    <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'分类描述'</span>,</span><br><span class="line">    <span class="string">`pic_url`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'分类图片'</span>,</span><br><span class="line">    <span class="string">`path`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'分类地址&#123;pid&#125;-&#123;child_id&#125;-...'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'类别表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- spu表 product_spu</span></span><br><span class="line"><span class="comment">-- spu: standard product unit 标准产品单位</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_spu`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'SPU ID'</span>,</span><br><span class="line">    <span class="string">`brand_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'品牌ID'</span>,</span><br><span class="line">    <span class="string">`category_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'分类ID'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'spu名称'</span>,</span><br><span class="line">    <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'spu描述'</span>,</span><br><span class="line">    <span class="string">`selling_point`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'卖点'</span>,</span><br><span class="line">    <span class="string">`unit`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'spu单位'</span>,</span><br><span class="line">    <span class="string">`banner_url`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'banner图片 多个图片逗号分隔'</span>,</span><br><span class="line">    <span class="string">`main_url`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'商品介绍主图 多个图片逗号分隔'</span>,</span><br><span class="line">    <span class="string">`price_fee`</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'售价，整数方式保存'</span>,</span><br><span class="line">    <span class="string">`price_scale`</span> <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'售价，金额对应的小数位数'</span>,</span><br><span class="line">    <span class="string">`market_price_fee`</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'市场价，整数方式保存'</span>,</span><br><span class="line">    <span class="string">`market_price_scale`</span> <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'市场价，金额对应的小数位数'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> AUTO_INCREMENT=<span class="number">666666</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'spu表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- sku表 product_sku</span></span><br><span class="line"><span class="comment">-- sku: stock keeping unit 库存量单位</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_sku`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'SKU ID'</span>,</span><br><span class="line">    <span class="string">`spu_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'SPU ID'</span>,</span><br><span class="line">    <span class="string">`attrs`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性值&#123;attr_value_id&#125;-&#123;attr_value_id&#125; 多个销售属性值逗号分隔'</span>,</span><br><span class="line">    <span class="string">`banner_url`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'banner图片 多个图片逗号分隔'</span>,</span><br><span class="line">    <span class="string">`main_url`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'商品介绍主图 多个图片逗号分隔'</span>,</span><br><span class="line">    <span class="string">`price_fee`</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'售价，整数方式保存'</span>,</span><br><span class="line">    <span class="string">`price_scale`</span> <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'售价，金额对应的小数位数'</span>,</span><br><span class="line">    <span class="string">`market_price_fee`</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'市场价，整数方式保存'</span>,</span><br><span class="line">    <span class="string">`market_price_scale`</span> <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'市场价，金额对应的小数位数'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> AUTO_INCREMENT=<span class="number">666666</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'sku表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 销售属性表 product_attr</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_attr`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'销售属性ID'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性名称'</span>,</span><br><span class="line">    <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性描述'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'销售属性表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 销售属性值 product_attr_value</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_attr_value`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'销售属性值ID'</span>,</span><br><span class="line">    <span class="string">`attr_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性ID'</span>,</span><br><span class="line">    <span class="string">`value`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性值'</span>,</span><br><span class="line">    <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性值描述'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'销售属性值'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关联关系冗余表 product_spu_sku_attr_map</span></span><br><span class="line"><span class="comment">-- 1. spu下 有哪些sku</span></span><br><span class="line"><span class="comment">-- 2. spu下 有那些销售属性</span></span><br><span class="line"><span class="comment">-- 3. spu下 每个销售属性对应的销售属性值(一对多)</span></span><br><span class="line"><span class="comment">-- 4. spu下 每个销售属性值对应的sku(一对多)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_spu_sku_attr_map`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增ID'</span>,</span><br><span class="line">    <span class="string">`spu_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'SPU ID'</span>,</span><br><span class="line">    <span class="string">`sku_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'SKU ID'</span>,</span><br><span class="line">    <span class="string">`attr_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性ID'</span>,</span><br><span class="line">    <span class="string">`attr_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性名称'</span>,</span><br><span class="line">    <span class="string">`attr_value_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性值ID'</span>,</span><br><span class="line">    <span class="string">`attr_value_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性值'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'关联关系冗余表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- sku库存表 product_sku_stock</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_sku_stock`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增ID'</span>,</span><br><span class="line">    <span class="string">`sku_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'SKU ID'</span>,</span><br><span class="line">    <span class="string">`quantity`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'库存'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'sku库存表'</span>;</span><br></pre></td></tr></table></figure><h3 id="接口设计-1"><a href="#接口设计-1" class="headerlink" title="接口设计"></a>接口设计</h3><p>关于接口设计目前很简单，无非列表和详情。但是这里我做了一个很好的设计<strong>动静分离</strong>，例如库存的动态的数据，单独提供接口，其他列表和详情数据完全静态化，把流量打到CDN去，这里又会说到我们下步计划的基础服务体系里的「静态资源服务」，这个服务的主要功能就是把我们的接口数据静态化。具体的<strong>V1.0</strong>版的接口设计如下：</p><p>1、spu详情 GET {version}/product/spu/{spu_id}</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>spu_id</td><td>number</td><td>yes</td><td>spu ID</td></tr></tbody></table><p>响应内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"brand_info"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"number, 品牌ID"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"string, 品牌名称"</span>,</span><br><span class="line">            <span class="attr">"desc"</span>: <span class="string">"string, 品牌描述"</span>,</span><br><span class="line">            <span class="attr">"logo_url"</span>: <span class="string">"string, 品牌logo图片"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"category_info"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"number, 分类ID"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"string, 品牌名称"</span>,</span><br><span class="line">            <span class="attr">"desc"</span>: <span class="string">"string, 品牌描述"</span>,</span><br><span class="line">            <span class="attr">"pic_url"</span>: <span class="string">"string, 分类图片"</span>,</span><br><span class="line">            <span class="attr">"path"</span>: <span class="string">"string, 分类地址&#123;pid&#125;-&#123;child_id&#125;-..."</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"spu_info"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"number, spu id"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"string, spu名称"</span>,</span><br><span class="line">            <span class="attr">"desc"</span>: <span class="string">"string, spu描述"</span>,</span><br><span class="line">            <span class="attr">"selling_point"</span>: <span class="string">"string, 卖点"</span>,</span><br><span class="line">            <span class="attr">"unit"</span>: <span class="string">"string, spu单位"</span>,</span><br><span class="line">            <span class="attr">"banner_url"</span>: [</span><br><span class="line">                <span class="string">"string, banner 图片url"</span>,</span><br><span class="line">                <span class="string">"string, banner 图片url"</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"main_url"</span>: [</span><br><span class="line">                <span class="string">"string, 商品介绍主图 图片url"</span>,</span><br><span class="line">                <span class="string">"string, 商品介绍主图 图片url"</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"price"</span>: <span class="string">"string, 售价"</span>,</span><br><span class="line">            <span class="attr">"market_price"</span>: <span class="string">"string, 市场价"</span>,</span><br><span class="line">            <span class="attr">"attrs"</span>: [ // 有那些销售属性</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="string">"销售属性ID"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"string, 销售属性名称"</span>,</span><br><span class="line">                    <span class="attr">"desc"</span>: <span class="string">"string, 销售属性描述"</span>,</span><br><span class="line">                    <span class="attr">"values"</span>: [ // 每个销售属性对应的销售属性值(一对多)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"id"</span>: <span class="string">"销售属性值ID"</span>,</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"string, 销售属性值"</span>,</span><br><span class="line">                            <span class="attr">"desc"</span>: <span class="string">"string, 销售属性值描述"</span>,</span><br><span class="line">                            // 每个销售属性值对应的sku(一对多)</span><br><span class="line">                            // 页面初始化时，按钮不可点击逻辑判断： 如果该销售属性值下所有sku没有库存，则该销售属性按钮不可点击</span><br><span class="line">                            // 选择销售属性值时，按钮不可点击逻辑判断：销售属性构成双向链表，每个销售属性又是一个单向链表存改销售属性对应的所有销售属性值。每当选择一个销售属性值时先前和后一个销售属性遍历，执销售属性值下所有sku售罄的按钮不可点击，且当前销售属性值map记录key为当前点击的销售属性值ID，值统一标示一下就行，目的记录是由于选择了哪个销售属性值使得当前的销售属性值为售罄状态</span><br><span class="line">                            // 取消选择销售属性值时，按钮不可点击逻辑恢复判断：数据结构同上，遍历，记录的map删除key为当前取消选中的销售属性值，并判断是否还有别的key使得该销售属性值为售罄状态，如果没有则恢复未售罄状态</span><br><span class="line">                            "skus": [</span><br><span class="line">                                "number, sku id",</span><br><span class="line">                                "number, sku id",</span><br><span class="line">                            ],</span><br><span class="line">                        &#125;</span><br><span class="line">                    ],</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            "skus": [ // 有哪些sku</span><br><span class="line">                "number, sku id",</span><br><span class="line">                "number, sku id",</span><br><span class="line">            ],</span><br><span class="line">            "skus_map": &#123;</span><br><span class="line">                "&#123;attr_value_id&#125;-&#123;attr_value_id&#125;-...": "number, sku id",</span><br><span class="line">                "&#123;attr_value_id&#125;-&#123;attr_value_id&#125;-...": "number, sku id",</span><br><span class="line">                "&#123;attr_value_id&#125;-&#123;attr_value_id&#125;-...": "number, sku id",</span><br><span class="line">                "&#123;attr_value_id&#125;-&#123;attr_value_id&#125;-...": "number, sku id",</span><br><span class="line">                "&#123;attr_value_id&#125;-&#123;attr_value_id&#125;-...": "number, sku id",</span><br><span class="line">                "&#123;attr_value_id&#125;-&#123;attr_value_id&#125;-...": "number, sku id",</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、获取spu下所有skus库存 GET {version}/stock/spu/{spu_id}</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>spu_id</td><td>number</td><td>yes</td><td>spu ID</td></tr></tbody></table><p>响应内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">            <span class="attr">"skus_stock"</span>: &#123;</span><br><span class="line">                <span class="attr">"int, sku id"</span>: &#123;</span><br><span class="line">                    <span class="attr">"quantity"</span>: <span class="string">"int, 剩余库存数量"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、sku详情 GET {version}/product/sku/{sku_id}</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>sku</td><td>number</td><td>yes</td><td>sku ID</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"number, sku id"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"string, sku名称"</span>,</span><br><span class="line">        <span class="attr">"desc"</span>: <span class="string">"string, sku描述"</span>,</span><br><span class="line">        <span class="attr">"unit"</span>: <span class="string">"string, sku单位"</span>,</span><br><span class="line">        <span class="attr">"banner_url"</span>: [</span><br><span class="line">            <span class="string">"string, banner 图片url"</span>,</span><br><span class="line">            <span class="string">"string, banner 图片url"</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"main_url"</span>: [</span><br><span class="line">            <span class="string">"string, 商品介绍主图 图片url"</span>,</span><br><span class="line">            <span class="string">"string, 商品介绍主图 图片url"</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"string, 售价"</span>,</span><br><span class="line">        <span class="attr">"market_price"</span>: <span class="string">"string, 市场价"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、spu列表 GET {version}/product/spu/list</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"list"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"id"</span>: <span class="string">"number, spu id"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"string, spu名称"</span>,</span><br><span class="line">                <span class="attr">"desc"</span>: <span class="string">"string, spu描述"</span>,</span><br><span class="line">                <span class="attr">"unit"</span>: <span class="string">"string, spu单位"</span>,</span><br><span class="line">                <span class="attr">"banner_url"</span>: [</span><br><span class="line">                    <span class="string">"string, banner 图片url"</span>,</span><br><span class="line">                    <span class="string">"string, banner 图片url"</span>,</span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"price"</span>: <span class="string">"string, 售价"</span>,</span><br><span class="line">                <span class="attr">"market_price"</span>: <span class="string">"string, 市场价"</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="营销体系"><a href="#营销体系" class="headerlink" title="营销体系"></a>营销体系</h1><p>营销体系在一个电商系统中承担着尖刀般的作用，为电商团队拼下无数订单，就如同现实生活中的一线销售人员，引流、促销、提高成单率和客单价。</p><p>一个营销体系拥有各种提升GMV的手段，并且仍然在不断的推陈出新，着实令人敬佩。</p><h2 id="营销体系拆分"><a href="#营销体系拆分" class="headerlink" title="营销体系拆分"></a>营销体系拆分</h2><p>按照不同的维度，我们把营销体系划分为两大系统：</p><table><thead><tr><th>系统</th><th>描述</th><th>维度</th></tr></thead><tbody><tr><td>活动营销系统</td><td>拥有各种手段<strong>提升PV\UV</strong>，并引导消费</td><td>PV、UV维度</td></tr><tr><td>销售营销系统</td><td>拥有各种<strong>降低或变相降低价格</strong>的手段，来促进消费</td><td>价格维度</td></tr></tbody></table><ul><li>活动营销系统：<ul><li>抽奖<ul><li>按时间抽奖</li><li>按当前活动参与次数抽奖</li><li>按数额区间抽奖</li></ul></li><li>活动模板</li><li>抢购？？？</li></ul></li><li>销售营销系统：<ul><li>满减</li><li>满赠</li><li>买送</li><li>限时购(限时降价或限时折扣)</li><li>秒杀</li><li>加价购</li><li>多买</li><li>预售<ul><li>全款预售</li><li>定金(订金)膨胀预售</li><li>盲售</li></ul></li><li>拼团</li><li>砍价</li><li>众筹</li><li>组合套装</li></ul></li><li>营销体系的基础服务支撑:<ul><li>优惠券服务<ul><li>满减券</li><li>折扣券</li><li>现金券</li></ul></li><li>积分服务</li></ul></li></ul><h2 id="概念定义"><a href="#概念定义" class="headerlink" title="概念定义"></a>概念定义</h2><p>营销体系中我们需要把以下概念定义清楚，要使用哪些名词，以及明确其定义，防止沟通过程中的效率低下或理解偏差：</p><table><thead><tr><th>概念</th><th>定义</th></tr></thead><tbody><tr><td>抢购</td><td>爆品/新品发售场景</td></tr><tr><td>—</td><td>—</td></tr><tr><td>满减</td><td>单笔订单满多少减多少，例如，“满500减20”</td></tr><tr><td>满赠</td><td>单笔订单满多少增送其他商品，例如，“满999送秋裤”</td></tr><tr><td>买送</td><td>买就送，例如，“全场下单送秋裤”</td></tr><tr><td>限时购</td><td>限定时间区间，降价或折扣</td></tr><tr><td>秒杀</td><td>白送价格，数量极少的销售场景，例如，“一元秒杀”</td></tr><tr><td>加价购</td><td>再加多少钱，可以低价购买其他推荐商品</td></tr><tr><td>多买</td><td>单笔订单购买多个sku，享受折扣</td></tr><tr><td>全款预售</td><td>预售库存一次付清</td></tr><tr><td>订金膨胀预售</td><td>包含订金阶段、尾款阶段，订金翻倍抵现尾款，订金可退</td></tr><tr><td>定金膨胀预售</td><td>包含定金阶段、尾款阶段，定金翻倍抵现尾款，定金不退</td></tr><tr><td>盲售</td><td>包含订金(定金)阶段，尾款阶段；不知道尾款价格，不知道sku的具体信息，只知道spu的信息（可选）</td></tr><tr><td>拼团</td><td>限定时间凑够多人成功支付订单(享优惠价格)</td></tr><tr><td>砍价(点赞降价)</td><td>限定时间邀请好友砍价到指定金额</td></tr><tr><td>众筹</td><td>限定时间购买人数达到指定人数及以上即可成功享受优惠价格</td></tr><tr><td>组合套装</td><td>多个sku捆绑销售</td></tr><tr><td>—</td><td>—</td></tr><tr><td>满减券</td><td>单笔订单满多少才能使用的优惠券</td></tr><tr><td>折扣券</td><td>单笔订单折扣</td></tr><tr><td>现金券</td><td>单笔订单抵现金</td></tr></tbody></table><h1 id="通用抽奖工具-万能胶Glue"><a href="#通用抽奖工具-万能胶Glue" class="headerlink" title="通用抽奖工具(万能胶Glue)"></a>通用抽奖工具(万能胶Glue)</h1><h2 id="抽奖需求分析"><a href="#抽奖需求分析" class="headerlink" title="抽奖需求分析"></a>抽奖需求分析</h2><p>首先我们先来回顾下<strong>营销体系</strong>的组成：</p><table><thead><tr><th>营销体系</th></tr></thead><tbody><tr><td>活动营销系统</td></tr><tr><td>销售营销系统</td></tr></tbody></table><p>今天带来的是<strong>活动营销系统</strong>下的第一个独立子系统<strong>通用抽奖工具</strong>的介绍，本篇文章主要分为如下4部分：</p><ul><li>常见抽奖场景与归类</li><li>抽奖需求配置</li><li>常见奖品类型</li><li>抽奖五要素</li></ul><h2 id="常见抽奖场景与归类"><a href="#常见抽奖场景与归类" class="headerlink" title="常见抽奖场景与归类"></a>常见抽奖场景与归类</h2><p>下面是我列出来的一些常见的抽奖场景，红包雨、糖果雨、打地鼠、大转盘(九宫格)、考眼力、答题闯关、游戏闯关、支付刮刮乐、积分刮刮乐等等活动营销场景。</p><table><thead><tr><th>活动名称</th><th>描述</th></tr></thead><tbody><tr><td>红包雨</td><td>每日整点抢红包🧧抽奖，每个整点一般可参与一次</td></tr><tr><td>糖果雨</td><td>每日整点抢糖果🍬抽奖，每个整点一般可参与一次</td></tr><tr><td>打地鼠</td><td>每日整点打地鼠抽奖，每个整点一般可参与一次</td></tr><tr><td>大转盘(九宫格)</td><td>某个时间段，转盘抽奖，每个场一般可参N次</td></tr><tr><td>考眼力</td><td>某个时间段，旋转杯子猜小球在哪个被子里，猜对可抽奖，一般每日可参与N次</td></tr><tr><td>答题闯关</td><td>每过一关，可参与抽奖，越到后面奖品越贵重</td></tr><tr><td>游戏闯关</td><td>每过一关，可参与抽奖，越到后面奖品越贵重</td></tr><tr><td>支付刮刮乐</td><td>支付订单后可刮奖，支付金额越大奖品越贵重</td></tr><tr><td>积分刮刮乐</td><td>积分刮奖，消费积分额度越大奖品越贵重</td></tr></tbody></table><p>通过上面的活动描述，我们把整个抽奖场景归为以下三类：</p><table><thead><tr><th>类型</th><th>活动名称</th><th>维度</th></tr></thead><tbody><tr><td>按时间抽奖</td><td>红包雨、糖果雨、打地鼠、幸运大转盘(九宫格)、考眼力</td><td>时间维度</td></tr><tr><td>按抽奖次数抽奖</td><td>答题闯关、游戏闯关</td><td>参与该活动次数维度</td></tr><tr><td>按数额范围区间抽奖</td><td>支付刮刮乐、积分刮刮乐</td><td>数额区间维度</td></tr></tbody></table><p>接着我们来看下每类抽奖活动具体的抽奖需求配置。</p><h2 id="抽奖需求配置"><a href="#抽奖需求配置" class="headerlink" title="抽奖需求配置"></a>抽奖需求配置</h2><p>本小节每类抽奖活动的需求配置，分为如下三个部分：</p><ul><li>活动配置</li><li>场次配置</li><li>奖品配置</li></ul><h3 id="首先，第一类-按时间抽奖的需求配置"><a href="#首先，第一类-按时间抽奖的需求配置" class="headerlink" title="首先，第一类: 按时间抽奖的需求配置"></a>首先，第一类: <code>按时间抽奖</code>的需求配置</h3><table><thead><tr><th>类型</th><th>活动名称</th><th>特点</th></tr></thead><tbody><tr><td>按时间抽奖</td><td>红包雨、糖果雨、打地鼠、幸运大转盘(九宫格)、考眼力</td><td>时间维度</td></tr></tbody></table><table><thead><tr><th>按时间抽奖</th><th>是否多场次</th><th>单场次次数限制(次)</th><th>总场次次数限制(次)</th></tr></thead><tbody><tr><td>红包雨</td><td>是</td><td>1</td><td>N</td></tr><tr><td>糖果雨</td><td>是</td><td>1</td><td>N</td></tr><tr><td>打地鼠</td><td>是</td><td>N</td><td>N</td></tr><tr><td>幸运大转盘(九宫格)</td><td>否</td><td>N</td><td>N</td></tr><tr><td>考眼力</td><td>否</td><td>N</td><td>N</td></tr></tbody></table><p>通过上面的分析我们得到了<strong>活动</strong>和<strong>场次</strong>的概念: 一个活动需要支持多场次的配置。</p><ul><li>活动activity:配置活动的日期范围</li><li>场次session:配置每场的具体时间范围</li></ul><p><strong>红包雨的需求配置示例：</strong></p><blockquote><p>活动特征：红包雨需要支持多场次。</p></blockquote><p>比如双十二期间三天、每天三场整点红包雨配置如下：</p><p>活动、场次配置：</p><table><thead><tr><th>双十二红包雨</th></tr></thead><tbody><tr><td>活动配置：</td></tr><tr><td>2019-12-10 至 2019-12-12</td></tr><tr><td>场次配置：</td></tr><tr><td>10:00:00 至 10:01:00</td></tr><tr><td>12:00:00 至 12:01:00</td></tr><tr><td>18:00:00 至 18:01:00</td></tr></tbody></table><p>奖品配置：</p><table><thead><tr><th>场次</th><th>奖品1</th><th>奖品2</th><th>—</th><th>奖品N</th></tr></thead><tbody><tr><td>场次10:00:00 至 10:01:00</td><td>优惠券2元</td><td>空奖</td><td>—</td><td>无</td></tr><tr><td>场次12:00:00 至 12:01:00</td><td>优惠券5元</td><td>空奖</td><td>—</td><td>无</td></tr><tr><td>场次18:00:00 至 18:01:00</td><td>优惠券10元</td><td>优惠券20元</td><td>—</td><td>空奖</td></tr></tbody></table><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">上面配置的结果如下：</span><br><span class="line"></span><br><span class="line">2019-12-10日三场整点红包雨：</span><br><span class="line">2019-12-10 10:00:00 ~ 10:01:00</span><br><span class="line">2019-12-10 12:00:00 ~ 12:01:00</span><br><span class="line">2019-12-10 18:00:00 ~ 18:01:00</span><br><span class="line"></span><br><span class="line">2019-12-11日三场整点红包雨：</span><br><span class="line">2019-12-11 10:00:00 ~ 10:01:00</span><br><span class="line">2019-12-11 12:00:00 ~ 12:01:00</span><br><span class="line">2019-12-11 18:00:00 ~ 18:01:00</span><br><span class="line"></span><br><span class="line">2019-12-12日三场整点红包雨：</span><br><span class="line">2019-12-12 10:00:00 ~ 10:01:00</span><br><span class="line">2019-12-12 12:00:00 ~ 12:01:00</span><br><span class="line">2019-12-12 18:00:00 ~ 18:01:00</span><br></pre></td></tr></table></figure><p><strong>幸运大转盘的需求配置示例：</strong></p><blockquote><p>活动特征：幸运大转盘不需要多场次。</p></blockquote><p>比如年货节2020-01-20 至 2020-02-10期间幸运大转盘配置如下：</p><p>活动、场次配置：</p><table><thead><tr><th>双十二幸运大转盘</th></tr></thead><tbody><tr><td>活动配置：</td></tr><tr><td>2019-12-10 至 2019-12-12</td></tr><tr><td>场次配置：</td></tr><tr><td>00:00:00 至 23:59:59</td></tr></tbody></table><p>奖品配置：</p><table><thead><tr><th>场次</th><th>奖品1</th><th>奖品2</th><th>—</th><th>奖品N</th></tr></thead><tbody><tr><td>场次00:00:00 至 23:59:59</td><td>优惠券2元</td><td>空奖</td><td>—</td><td>无</td></tr></tbody></table><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">上面配置的结果如下：</span><br><span class="line"></span><br><span class="line">幸运大转盘抽奖活动将于 2019-12-10 00:00:00 ~ 2019-12-12 23:59:59 进行</span><br></pre></td></tr></table></figure><p>注意与思考：双十二幸运大转盘不需要多个场次，只配置一个场次即可，完全复用活动场次模型。</p><h3 id="接着，第二类-按抽奖次数抽奖的需求配置"><a href="#接着，第二类-按抽奖次数抽奖的需求配置" class="headerlink" title="接着，第二类: 按抽奖次数抽奖的需求配置"></a>接着，第二类: <code>按抽奖次数抽奖</code>的需求配置</h3><table><thead><tr><th>类型</th><th>活动名称</th><th>特点</th></tr></thead><tbody><tr><td>按抽奖次数抽奖</td><td>答题闯关、游戏闯关</td><td>(成功参与)当前活动次数维度</td></tr></tbody></table><p><strong>答题闯关的需求配置示例：</strong></p><blockquote><p>活动特征：每一关的奖品不同，一般越到后面中大奖的几率越大。</p></blockquote><p>活动、场次配置：</p><table><thead><tr><th>双十二答题闯关</th></tr></thead><tbody><tr><td>活动配置：</td></tr><tr><td>2019-12-10 至 2019-12-12</td></tr><tr><td>场次配置：</td></tr><tr><td>00:00:00 至 23:59:59</td></tr></tbody></table><p>奖品配置：</p><table><thead><tr><th>双十二答题闯关</th><th>奖品</th></tr></thead><tbody><tr><td>第一关</td><td>优惠券2元</td></tr><tr><td>第二关</td><td>优惠券5元</td></tr><tr><td>第三关</td><td>优惠券10元</td></tr><tr><td>第四关</td><td>优惠券20元</td></tr><tr><td>第五关</td><td>优惠券50元</td></tr><tr><td>第六关</td><td>优惠券100元</td></tr></tbody></table><p>注意与思考：同理活动&amp;场次配置完全复用，同幸运大转盘配置(不需要支持多场次)。</p><h3 id="最后，第三类-按数额范围区间抽奖的需求配置："><a href="#最后，第三类-按数额范围区间抽奖的需求配置：" class="headerlink" title="最后，第三类: 按数额范围区间抽奖的需求配置："></a>最后，第三类: <code>按数额范围区间抽奖</code>的需求配置：</h3><table><thead><tr><th>类型</th><th>活动名称</th><th>特点</th></tr></thead><tbody><tr><td>按数额范围区间抽奖</td><td>支付刮刮乐、积分刮刮乐</td><td>数额区间维度</td></tr></tbody></table><p><strong>支付刮刮乐的需求配置示例：</strong></p><blockquote><p>活动特征：不同的订单金额，一般金额越大中大奖的几率越大。</p></blockquote><p>活动、场次配置:</p><table><thead><tr><th>双十二答题闯关</th></tr></thead><tbody><tr><td>活动配置：</td></tr><tr><td>2019-12-10 至 2019-12-12</td></tr><tr><td>场次配置：</td></tr><tr><td>00:00:00 至 23:59:59</td></tr></tbody></table><p>奖品配置：</p><table><thead><tr><th>订单金额</th><th>奖品1</th><th>奖品2</th><th>—</th><th>奖品N</th></tr></thead><tbody><tr><td>0~100</td><td>优惠券2元</td><td>空奖</td><td>—</td><td>无</td></tr><tr><td>100~200</td><td>优惠券5元</td><td>空奖</td><td>—</td><td>无</td></tr><tr><td>200~1000</td><td>优惠券10元</td><td>优惠券20元</td><td>—</td><td>空奖</td></tr><tr><td>1000以上</td><td>优惠券50元</td><td>笔记本电脑</td><td>—</td><td>空奖</td></tr></tbody></table><p>注意与思考：同理活动&amp;场次配置完全复用，同幸运大转盘配置(不需要支持多场次)。</p><blockquote><p>总结: 通过上面的分析我们得到了抽奖工具的两个要素<strong>活动</strong>和<strong>场次</strong>。</p></blockquote><h2 id="常见奖品类型"><a href="#常见奖品类型" class="headerlink" title="常见奖品类型"></a>常见奖品类型</h2><blockquote><p>抽奖抽什么？</p></blockquote><table><thead><tr><th>常见奖品类型</th></tr></thead><tbody><tr><td>优惠券</td></tr><tr><td>积分</td></tr><tr><td>实物</td></tr><tr><td>空奖</td></tr></tbody></table><blockquote><p>总结: 我们得到了抽奖工具的另一个要素<strong>奖品</strong>。</p></blockquote><h2 id="抽奖五要素"><a href="#抽奖五要素" class="headerlink" title="抽奖五要素"></a>抽奖五要素</h2><p>通过上面的分析我们已经得到了抽奖的<strong>三要素</strong></p><ul><li>活动 </li><li>场次 </li><li>奖品</li></ul><blockquote><p>那还有什么要素我们还没聊到呢？接下来来看。</p></blockquote><p><strong>第四要素：中奖概率</strong></p><p>抽奖自然离不开奖品的中奖概率的设置。关于中奖概率我们支持如下灵活的配置：</p><ol><li>手动设置奖品中奖概率</li><li>自动概率，根据当前奖品的数量、奖品的权重得到中奖概率</li></ol><p>比如我们某次大促活动红包雨的配置如下：</p><table><thead><tr><th>活动配置</th><th>描述</th></tr></thead><tbody><tr><td>活动时间</td><td>2019-12-10至2019-12-12</td></tr><tr><td>活动名称</td><td>2019双十二大促整点红包雨</td></tr><tr><td>活动描述</td><td>2019双十二大促全端整点红包雨活动</td></tr><tr><td>手动设置奖品概率</td><td>是</td></tr></tbody></table><table><thead><tr><th>场次</th><th>奖品类型</th><th>具体奖品</th><th>奖品数量</th><th>中奖概率</th></tr></thead><tbody><tr><td>10:00:00 ~ 10:01:00</td><td>优惠券</td><td>2元优惠券</td><td>2000</td><td>50%</td></tr><tr><td>-</td><td>优惠券</td><td>5元优惠券</td><td>1000</td><td>20%</td></tr><tr><td>-</td><td>空奖</td><td>-</td><td>5000</td><td>30%</td></tr><tr><td>12:00:00 ~ 12:01:00</td><td>优惠券</td><td>2元优惠券</td><td>2000</td><td>50%</td></tr><tr><td>-</td><td>优惠券</td><td>5元优惠券</td><td>1000</td><td>20%</td></tr><tr><td>-</td><td>空奖</td><td>-</td><td>5000</td><td>30%</td></tr><tr><td>18:00:00 ~ 18:01:00</td><td>优惠券</td><td>2元优惠券</td><td>2000</td><td>50%</td></tr><tr><td>-</td><td>优惠券</td><td>5元优惠券</td><td>1000</td><td>20%</td></tr><tr><td>-</td><td>空奖</td><td>-</td><td>5000</td><td>30%</td></tr></tbody></table><p>备注：每轮场次中奖概率之和必须为100%，否则剩余部分默认添加为空奖的中奖概率。</p><p><strong>第五要素：均匀投奖</strong></p><blockquote><p>如何均匀的抽走奖品?</p></blockquote><p>答案: 均匀投奖。</p><p>具体方式为拆分总奖品数量，到各个细致具体的时间段。以双十二幸运大转盘为例：</p><table><thead><tr><th>场次</th><th>奖品类型</th><th>具体奖品</th><th>奖品数量</th><th>中奖概率</th><th>投奖时间(默认提前5分钟投奖)</th><th>投奖数量</th></tr></thead><tbody><tr><td>00:00:00 至 23:59:59</td><td>优惠券</td><td>2元优惠券</td><td>2000</td><td>50%</td><td>-</td><td>-</td></tr><tr><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>00:00:00</td><td>2000</td></tr><tr><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>06:00:00</td><td>2000</td></tr><tr><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>12:00:00</td><td>2000</td></tr><tr><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>18:00:00</td><td>2000</td></tr></tbody></table><p>这里我们就得到了抽奖的<strong>第五个要素：均匀投奖</strong>。</p><h2 id="需求总结"><a href="#需求总结" class="headerlink" title="需求总结"></a>需求总结</h2><p>通过上面的分析，我们得到抽奖五要素如下：</p><table><thead><tr><th>抽奖五要素</th><th>要素名称</th></tr></thead><tbody><tr><td>第一要素</td><td>活动</td></tr><tr><td>第二要素</td><td>场次</td></tr><tr><td>第三要素</td><td>奖品</td></tr><tr><td>第四要素</td><td>中奖概率</td></tr><tr><td>第五要素</td><td>均匀投奖</td></tr></tbody></table><p>同时我们通过<strong>抽奖五要素</strong>也得到了<strong>通用抽奖工具</strong>配置一场抽奖活动的5个基本步骤：</p><ol><li>活动配置</li><li>场次配置</li><li>奖品配置</li><li>奖品中奖概率配置</li><li>奖品投奖配置</li></ol><h2 id="通用抽奖工具系统设计"><a href="#通用抽奖工具系统设计" class="headerlink" title="通用抽奖工具系统设计"></a>通用抽奖工具系统设计</h2><p>需求已经分析完了，今天我们就来看看这通用抽奖工具具体的设计，分为如下三个部分：</p><ul><li>DB设计</li><li>配置后台设计</li><li>接口设计</li></ul><h2 id="DB设计"><a href="#DB设计" class="headerlink" title="DB设计"></a>DB设计</h2><p>第一要素<code>活动配置</code>的<code>抽奖活动表</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通用抽奖工具(万能胶Glue) glue_activity 抽奖活动表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`glue_activity`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'活动ID'</span>,</span><br><span class="line">    <span class="string">`serial_no`</span> <span class="built_in">char</span>(<span class="number">16</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'活动编号(md5值中间16位)'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'活动名称'</span>,</span><br><span class="line">    <span class="string">`description`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'活动描述'</span>,</span><br><span class="line">    <span class="string">`activity_type`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'活动抽奖类型1: 按时间抽奖 2: 按抽奖次数抽奖 3:按数额范围区间抽奖'</span>,</span><br><span class="line">    <span class="string">`probability_type`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'中奖概率类型1: static 2: dynamic'</span>,</span><br><span class="line">    <span class="string">`times_limit`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'抽奖次数限制，0默认不限制'</span>,</span><br><span class="line">    <span class="string">`start_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'活动开始时间'</span>,</span><br><span class="line">    <span class="string">`end_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'活动结束时间'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 -1:deleted, 0:disable, 1:enable'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'抽奖活动表'</span>;</span><br></pre></td></tr></table></figure><p>第二要素<code>场次配置</code>的<code>抽奖场次表</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通用抽奖工具(万能胶Glue) glue_session 抽奖场次表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`glue_session`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'场次ID'</span>,</span><br><span class="line">    <span class="string">`activity_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'活动ID'</span>,</span><br><span class="line">    <span class="string">`times_limit`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'抽奖次数限制，0默认不限制'</span>,</span><br><span class="line">    <span class="string">`start_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'场次开始时间'</span>,</span><br><span class="line">    <span class="string">`end_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'场次结束时间'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 -1:deleted, 0:disable, 1:enable'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'抽奖场次表'</span>;</span><br></pre></td></tr></table></figure><p>第三、四要素<code>奖品配置</code>的<code>抽奖场次奖品表</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通用抽奖工具(万能胶Glue) glue_session_prizes 抽奖场次奖品表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`glue_session_prizes`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增ID'</span>,</span><br><span class="line">    <span class="string">`session_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'场次ID'</span>,</span><br><span class="line">    <span class="string">`node`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'节点标识 按时间抽奖: 空值, 按抽奖次数抽奖: 第几次参与值, 按数额范围区间抽奖: 数额区间上限值'</span>,</span><br><span class="line">    <span class="string">`prize_type`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'奖品类型 1:优惠券, 2:积分, 3:实物, 4:空奖 ...'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'奖品名称'</span>,</span><br><span class="line">    <span class="string">`pic_url`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'奖品图片'</span>,</span><br><span class="line">    <span class="string">`value`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'奖品抽象值 优惠券:优惠券ID, 积分:积分值, 实物: sku ID'</span>,</span><br><span class="line">    <span class="string">`probability`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'中奖概率1~100'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 -1:deleted, 0:disable, 1:enable'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'抽奖场次奖品表'</span>;</span><br></pre></td></tr></table></figure><p>第五要素<code>均匀投奖</code>的<code>抽奖场次奖品定时投放器表</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通用抽奖工具(万能胶Glue) glue_session_prizes_timer 抽奖场次奖品定时投放器表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`glue_session_prizes_timer`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增ID'</span>,</span><br><span class="line">    <span class="string">`session_prizes_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'抽奖场次奖品ID'</span>,</span><br><span class="line">    <span class="string">`delivery_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'定时投放奖品数量的时间'</span>,</span><br><span class="line">    <span class="string">`prize_quantity`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'奖品数量'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 -1:deleted, 0:wait, 1:success'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'抽奖场次奖品定时投放器表'</span>;</span><br></pre></td></tr></table></figure><p>其他表，抽奖记录&amp;奖品发放记录表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通用抽奖工具(万能胶Glue) glue_user_draw_record 用户抽奖记录表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`glue_user_draw_record`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增ID'</span>,</span><br><span class="line">    <span class="string">`activity_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'活动ID'</span>,</span><br><span class="line">    <span class="string">`session_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'场次ID'</span>,</span><br><span class="line">    <span class="string">`prize_type_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'奖品类型ID'</span>,</span><br><span class="line">    <span class="string">`user_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人user_id'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 -1:未中奖, 1:已中奖 , 2: 发奖失败 , 3: 已发奖'</span>,</span><br><span class="line">    <span class="string">`log`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'操作信息等记录'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'用户抽奖记录表'</span>;</span><br></pre></td></tr></table></figure><h2 id="配置后台设计"><a href="#配置后台设计" class="headerlink" title="配置后台设计"></a>配置后台设计</h2><h3 id="创建活动"><a href="#创建活动" class="headerlink" title="创建活动"></a>创建活动</h3><p><img src="/articles/电商设计手册/20191229224816.png" alt></p><h3 id="创建活动场次"><a href="#创建活动场次" class="headerlink" title="创建活动场次"></a>创建活动场次</h3><p><img src="/articles/电商设计手册/20191230081157.png" alt></p><p><img src="/articles/电商设计手册/20191229224543.png" alt></p><p><img src="/articles/电商设计手册/20191229224834.png" alt> </p><h3 id="活动列表"><a href="#活动列表" class="headerlink" title="活动列表"></a>活动列表</h3><p><img src="/articles/电商设计手册/20191229223706.png" alt>  </p><h2 id="接口设计-2"><a href="#接口设计-2" class="headerlink" title="接口设计"></a>接口设计</h2><ol><li>获取活动信息 GET {version}/glue/activity</li></ol><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>serial_no</td><td>string</td><td>Y</td><td>活动编号</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"serial_no"</span>: <span class="string">"string, 活动编号"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"number, 活动抽奖类型1: 按时间抽奖 2: 按抽奖次数抽奖 3:按数额范围区间抽奖"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"string, 活动名称"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"string, 活动描述"</span>,</span><br><span class="line">        <span class="attr">"start_time"</span>: <span class="string">"number, 活动开始时间"</span>,</span><br><span class="line">        <span class="attr">"end_time"</span>: <span class="string">"number, 活动开始时间"</span>,</span><br><span class="line">        <span class="attr">"remaining_times"</span>: <span class="string">"number, 活动抽奖次数限制，0不限制"</span>,</span><br><span class="line">        <span class="attr">"sessions_list"</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"start_time"</span>: <span class="string">"number, 场次开始时间"</span>,</span><br><span class="line">                <span class="attr">"end_time"</span>: <span class="string">"number, 场次开始时间"</span>,</span><br><span class="line">                <span class="attr">"remaining_times"</span>: <span class="string">"number, 场次抽奖次数限制，0不限制"</span>,</span><br><span class="line">                <span class="attr">"prizes_list"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"string, 奖品名称"</span>,</span><br><span class="line">                        <span class="attr">"pic_url"</span>: <span class="string">"string, 奖品图片"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>抽奖 POST {version}/glue/activity/draw</li></ol><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>serial_no</td><td>string</td><td>Y</td><td>活动编号</td></tr><tr><td>uid</td><td>number</td><td>Y</td><td>用户ID</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 中奖</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"serial_no"</span>: <span class="string">"string, spu id"</span>,</span><br><span class="line">        <span class="attr">"act_remaining_times"</span>: <span class="string">"number, 本活动抽奖剩余次数，0不限制"</span>,</span><br><span class="line">        <span class="attr">"session_remaining_times"</span>: <span class="string">"number, 本场次抽奖剩余次数，0不限制"</span>,</span><br><span class="line">        <span class="attr">"prizes_info"</span>: </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"string, 奖品名称"</span>,</span><br><span class="line">            <span class="attr">"pic_url"</span>: <span class="string">"string, 奖品图片"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 未中奖</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"401"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>活动营销系统中的第一个字系统<strong>通用抽奖工具</strong>今天讲完了，希望对大家有一定的帮助或启示。</p><h1 id="秒杀服务"><a href="#秒杀服务" class="headerlink" title="秒杀服务"></a>秒杀服务</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>本文结构很简单：</p><blockquote><p>5张图送你5种秒杀系统，再加点骚操作，再顺带些点心里话🤷‍♀️。</p></blockquote><h2 id="一个简单的秒杀系统"><a href="#一个简单的秒杀系统" class="headerlink" title="一个简单的秒杀系统"></a>一个简单的秒杀系统</h2><p><strong>实现原理：</strong> 通过redis原子操作减库存</p><p><strong>图一</strong> </p><p><img src="/articles/电商设计手册/20200501175532.png" alt></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>简单好用</td><td>考验redis服务能力</td></tr></tbody></table><table><thead><tr><th>是否公平</th></tr></thead><tbody><tr><td>公平</td></tr><tr><td>先到先得</td></tr></tbody></table><p>我们称这类秒杀系统为：</p><blockquote><p>简单秒杀系统</p></blockquote><p>如果刚开始QPS并不高，redis完全抗的下来的情况，完全可以依赖这个「简单秒杀系统」。</p><h2 id="一个够用的秒杀系统"><a href="#一个够用的秒杀系统" class="headerlink" title="一个够用的秒杀系统"></a>一个够用的秒杀系统</h2><p><strong>实现原理：</strong> 服务内存限流算法 + redis原子操作减库存</p><p><strong>图二</strong> </p><p><img src="/articles/电商设计手册/20200501183037.png" alt></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>简单好用</td><td>-</td></tr></tbody></table><table><thead><tr><th>是否公平</th></tr></thead><tbody><tr><td>不是很公平</td></tr><tr><td>相对的先到先得</td></tr></tbody></table><p>我们称这类秒杀系统为：</p><blockquote><p>够用秒杀系统</p></blockquote><h2 id="性能再好点的秒杀系统"><a href="#性能再好点的秒杀系统" class="headerlink" title="性能再好点的秒杀系统"></a>性能再好点的秒杀系统</h2><p><strong>实现原理：</strong> 服务本地内存原子操作减库存</p><blockquote><p>服务本地内存的库存怎么来的？</p></blockquote><p>活动开始前分配好每台机器的库存，推送到机器上。</p><p><strong>图三</strong> </p><p><img src="/articles/电商设计手册/20200501200309.png" alt></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>高性能</td><td>不支持动态伸缩容(活动进行期间)，因为库存是活动开始前分配好的</td></tr><tr><td>释放redis压力</td><td>-</td></tr></tbody></table><table><thead><tr><th>是否公平</th></tr></thead><tbody><tr><td>不是很公平</td></tr><tr><td>不是绝对的先到先得</td></tr></tbody></table><p>我们称这类秒杀系统为：</p><blockquote><p>预备库存秒杀系统</p></blockquote><h2 id="支持动态伸缩容的秒杀系统"><a href="#支持动态伸缩容的秒杀系统" class="headerlink" title="支持动态伸缩容的秒杀系统"></a>支持动态伸缩容的秒杀系统</h2><p><strong>实现原理：</strong> 服务本地协程Coroutine<strong>定时redis原子操作减部分库存</strong>到本地内存 + 服务本地内存原子操作减库存</p><p><strong>图四</strong> </p><p><img src="/articles/电商设计手册/20200501200846.png" alt></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>高性能</td><td>支持动态伸缩容(活动进行期间)</td></tr><tr><td>释放redis压力</td><td>-</td></tr><tr><td><strong>具备通用性</strong></td><td>-</td></tr></tbody></table><table><thead><tr><th>是否公平</th></tr></thead><tbody><tr><td>不是很公平，但是好了点</td></tr><tr><td>几乎先到先得</td></tr></tbody></table><p>我们称这类秒杀系统为：</p><blockquote><p>实时预备库存秒杀系统</p></blockquote><h2 id="公平的秒杀系统"><a href="#公平的秒杀系统" class="headerlink" title="公平的秒杀系统"></a>公平的秒杀系统</h2><p><strong>实现原理：</strong> 服务本地Goroutine<strong>定时同步是否售罄</strong>到本地内存 + 队列 + 排队成功轮训(或主动Push)结果</p><p><strong>图五</strong> </p><p><img src="/articles/电商设计手册/20200502195413.png" alt></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>高性能</td><td>开发成本高(需主动通知或轮训排队结果)</td></tr><tr><td>真公平</td><td>-</td></tr><tr><td><strong>具备通用性</strong></td><td>-</td></tr></tbody></table><table><thead><tr><th>是否公平</th></tr></thead><tbody><tr><td>很公平</td></tr><tr><td>绝对的先到先得</td></tr></tbody></table><p>我们称这类秒杀系统为：</p><blockquote><p>公平排队秒杀系统</p></blockquote><h2 id="骚操作"><a href="#骚操作" class="headerlink" title="骚操作"></a>骚操作</h2><blockquote><p>上面的秒杀系统还不够完美吗？</p></blockquote><p>答案：是的。</p><blockquote><p>还有什么优化的空间？</p></blockquote><p>答案：静态化获取秒杀活动信息的接口。</p><blockquote><p>静态化是什么意思?</p></blockquote><p>答案：比如获取秒杀活动信息是通过接口 <code>https://seckill.skrshop.tech/v1/acticity/get</code> 获取的。现在呢，我们需要通过<code>https://static-api.skrshop.tech/seckill/v1/acticity/get</code> 这个接口获取。有什么区别呢？看下面：</p><table><thead><tr><th>服务名</th><th>接口</th><th>数据存储位置</th></tr></thead><tbody><tr><td>秒杀服务</td><td><a href="https://seckill.skrshop.tech/v1/acticity/get" target="_blank" rel="noopener">https://seckill.skrshop.tech/v1/acticity/get</a></td><td>秒杀服务内存或redis等</td></tr><tr><td>接口静态化服务</td><td><a href="https://static-api.skrshop.tech/seckill/v1/acticity/get" target="_blank" rel="noopener">https://static-api.skrshop.tech/seckill/v1/acticity/get</a></td><td>CDN、本地文件</td></tr></tbody></table><p><strong>以前是这样</strong> </p><p><img src="/articles/电商设计手册/20200502195950.png" alt></p><p><strong>变成了这样</strong></p><p><img src="/articles/电商设计手册/20200502200723.png" alt> </p><p>结果：可以通过接口<code>https://static-api.skrshop.tech/seckill/v1/acticity/get</code>就获取到了秒杀活动信息，流量都分摊到了cdn，秒杀服务自身没了这部分的负载。</p><blockquote><p>小声点说：“秒杀结果我也敢推CDN😏😏😏。”</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">备注：</span><br><span class="line">之后我们会分享`如何用Golang设计一个好用的「接口静态化服务」`。</span><br></pre></td></tr></table></figure><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>上面我们得到了如下几类<code>秒杀系统</code></p><table><thead><tr><th>秒杀系统</th></tr></thead><tbody><tr><td>简单秒杀系统</td></tr><tr><td>够用秒杀系统</td></tr><tr><td>预备库存秒杀系统</td></tr><tr><td>实时预备库存秒杀系统</td></tr><tr><td>公平排队秒杀系统</td></tr></tbody></table><p>我想说的是里面没有最好的方案，也没有最坏的方案，只有<strong>适合你</strong>的。</p><p>拿<code>先到先得</code>来说，一定要看你们的产品对外宣传，切勿上来就追逐绝对的先到先得。其实你看所有的方案，相对而言都是“先到先得”，比如，活动开始一个小时了你再来抢，那相对于准时的用户自然抢不过，对吧。</p><p>又如<code>预备库存秒杀系统</code>，虽然不支持动态伸缩容。但是如果你的环境满足如下任意条件，就完全够用了。</p><ul><li>秒杀场景结束时间之快，通常几秒就结束了，真实活动可能会发生如下情况：<ul><li>服务压力大还没挂：根本就来不及动态伸缩容</li><li>服务压力大已经挂了：可以先暂停活动，服务起来&amp;扩容结束，用剩余库存重新推送</li></ul></li><li>运维自身不具备动态伸缩容的能力</li></ul><p>所以:</p><blockquote><p>合适好用就行，切勿过度设计。</p></blockquote><h1 id="交易中心"><a href="#交易中心" class="headerlink" title="交易中心"></a>交易中心</h1><h2 id="常见第三方支付流程"><a href="#常见第三方支付流程" class="headerlink" title="常见第三方支付流程"></a>常见第三方支付流程</h2><p>这几年的工作中一直与支付打交到，借着 <a href="https://github.com/skr-shop/manuals" target="_blank" rel="noopener">skr-shop</a> 这个项目来与大家一起分享探索一下支付系统该怎么设计、怎么做。我们先从支付的一些常见流程出发分析，找出这些支付的共性，抽象后再去探讨具体的数据库设计、代码结构设计。</p><p>相关项目：</p><ul><li><a href="https://github.com/helei112g/payment" target="_blank" rel="noopener">PHP 版本的支付SDK</a></li><li><a href="https://github.com/skr-shop/fool-pay" target="_blank" rel="noopener">Go 版本的支付SDK-开发中</a></li></ul><blockquote><p>支付整体而言的一个流程是：给第三方发起了一笔交易，用户通过第三方完成支付，第三方告诉我支付成功，我把用户购买的产品给用户。</p></blockquote><p><img src="/articles/电商设计手册/pay-1.jpg" alt="pay-1"></p><p>看似简单的流程，这里边不同的支付机构却有不同的处理。下面以我接触过的一些支付来总结一下</p><h3 id="国内支付"><a href="#国内支付" class="headerlink" title="国内支付"></a>国内支付</h3><p>国内的典型支付代表是：<strong>支付宝</strong>、<strong>微信</strong>、<strong>银行</strong>(以招商银行为例)，由于国内的支付都支持多种渠道的支付方式，为了描述简单，我们均以pc上的支付为例进行讲解。</p><h4 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h4><p>支付宝的接入是我觉得最简单的一种支付。对于在PC上的支付能力，支付宝提供了【电脑支付】。当用户下单后，商户系统根据支付宝的规则构建好一个url，用户跳转到这个url后进入到支付宝的支付页面，然后完成支付流程。</p><p>在支付成功后，支付宝会通过 <strong>同步通知</strong>、<strong>异步通知</strong> 两种方式告诉商户系统支付成功，并且两种通知方式的结果都是可信的，而且异步通知的消息延迟也非常短暂。</p><p>对于退款流程，支付宝支持全额、部分退款。并且能够根据商户的退款单号区分是否是同一笔退款进而避免了重复退款的可能。支付的退款是调用后同步返回结果，不会异步通知。</p><h4 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h4><p>微信并没有提供真的PC支付能力，但是我们可以利用【扫码支付】来达成电脑支付的目的。扫码支付有两种模式，这里以模式二为例。</p><p>微信调用下单接口获取到这个二维码链接，然后用户扫码后，进入支付流程。完成支付后微信会 <strong>异步通知</strong>，但是这里并没有 <strong>同步通知</strong>，因此前端页面只能通过定时轮训的方式检查这笔交易是否支付，直到查询到成功、或者用户主动关闭页面。</p><p>退款流程与支付宝最大的不同是，有一个 <strong>异步通知</strong> 需要商户系统进行处理。</p><blockquote><p>第一个不同点： 异步通知的接口需要处理多种不同类型的异步消息</p></blockquote><h4 id="招商银行"><a href="#招商银行" class="headerlink" title="招商银行"></a>招商银行</h4><p>随着在线支付在国内的蓬勃发展，各家银行也是不断推出自己的在线支付能力。其中的佼佼者当属 <strong>招商银行</strong>。大家经常用的滴滴上面就有该支付方式，可以体验一下。</p><p>招商支付使用的是银行卡，因此首次用户必须进行绑卡。因此这里可能就多了一个流程，首先得记录用户是否绑过卡，然后用于签名的公钥会发生变化，需要定期更新。</p><p>招商所有平台的支付体验都是一致的，会跳转到招行的H5页面完成逻辑，支付成功后并不会自动跳回商户，也就是没有 <strong>同步通知</strong>，它的支付结果只会走异步通知流程，延迟非常短暂。</p><p>退款流程与支付宝一样，也是同步返回退款结果，没有异步通知。</p><blockquote><p>第二个不同点： 支付前需要检查用户是否签约过，有签约流程</p></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>国内在线支付流程相对都比较完善，接入起来也非常容易。需要注意的一点是：退款后之前支付的单子依然是支付成功状态，并不会变成退款状态。因为退款与支付属于不同的交易。</p><p>这一点基本上是国内在线支付的通用做法。</p><h3 id="国际支付"><a href="#国际支付" class="headerlink" title="国际支付"></a>国际支付</h3><p>国际支付的平台非常多，包括像支付宝、微信也在扩展这一块市场。我以我接触的几家支付做一个简单的总结。</p><h4 id="WorldPay"><a href="#WorldPay" class="headerlink" title="WorldPay"></a>WorldPay</h4><p>这是比较出名的一家国际支付公司，它主要做的是银行卡支付，公司在英国</p><p>支付流程上，也是根据规则构建好请求的url后，直接跳转到 <strong>WorldPay</strong> 的页面，通过信用卡完成支付。这里比较麻烦的处理机制是：支付成功后，他首次给你的异步/同步消息通知并不能作为支付成功的依据。真的从银行确认划款成功后，才会给出真的支付成功通知。这中间还可能会异步通知告诉你支付请求被拒绝。最头痛的是不同状态的异步消息时间间隔都是按照分钟以上级别的延迟来计算</p><p>退款流程上，状态跟微信一样，需要通过异步消息来确认退款状态。其次它的不同点在于无法根据商户退款单号来确认是否已经发起过退款，因此对于它来说只要请求一次退款接口，那它就默认发起了一次退款。</p><blockquote><p>第三不同点： 支付成功后的通知状态有多种，涉及到商户系统业务流程的特殊处理</p><p>第四不同点： 退款不支持商户退款单号，无法支持防重复退款需要商户自己处理</p></blockquote><h4 id="Assist"><a href="#Assist" class="headerlink" title="Assist"></a>Assist</h4><p>这是俄罗斯的一家支付公司，这也是一家搞死人不偿命的公司，看下面介绍</p><p>它的支付发起是需要构建一个form表单，向它post支付相关的数据。成功后会跳转到它的支付页，用户完成支付即可。对于 <strong>同步通知</strong>，它需要用户手动触发跳回商户，与招商的逻辑很像，同步也仅仅是做返回并不会真的告知支付结果。<strong>异步通知</strong> 才是真的告知支付状态。比较恶心的是，支付时必须传入指定格式的商品信息，这会在部分退款时用到。</p><p>现在来说退款，退款也是与 <strong>WorldPay</strong> 一样，不支持商户的退款单号，因此防重方面也许自己的系统进行设计。并且如果是部分退款，需要传入指定的退款商品，这就会出现一个非常尴尬的局面：部分退款的金额与任何一个商品金额都对应不上，退款则会失败。</p><blockquote><p>第五个不同点： 部分退款时需要传入部分退款的商品信息，并且金额要一致</p></blockquote><h4 id="Doku"><a href="#Doku" class="headerlink" title="Doku"></a>Doku</h4><p>接下来再来聊聊印尼的这家支付机构 <strong>doku</strong>。由于印尼这个国家信用卡的普及程度并不高，它的在线支付提供一种超商支付方式。</p><p>什么是超商支付呢？也就是用户在网络上完成下单后，会获取到一个二维码或者条形码。用户拿着这个条形码到超商（711、全家这种）通过收银员扫码，付现金给超商，完成支付流程。</p><p>这种方式带来的问题是，用户长时间不去支付，导致订单超时关单后才去付款。对整个业务流程以及用户体验带来很多伤害。</p><p>再来说退款，由于存在超商这种支付方式，导致这种支付无法支持在线自动退款，需要人工收集用户银行卡信息，然后完成转账操作。非常痛苦不堪。</p><blockquote><p>第六个不同点： 线上没有付款，只有获取付款码，退款需要通过人工操作</p></blockquote><h4 id="AmazonPay"><a href="#AmazonPay" class="headerlink" title="AmazonPay"></a>AmazonPay</h4><p>亚马逊出品，与支付宝非常类似。提供的是集成式的钱包流程。</p><p>支付时直接构建一个url，然后跳转到亚马逊即可完成支付。它还提供一种授权模式，能够不用跳转amazon，再商户端即完成支付。</p><p>支付成功后也会同步跳转，<strong>同步通知</strong> 的内容可以作为支付是否成功的判断依据。经过实际检查 <strong>异步通知</strong> 的到达会稍有延迟，大概10s以内。</p><p>退款方面也支持商户退款单号可以依赖此进行防重。但是退款的状态也是基于异步来的。</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>这其中还有一些国际支付，如：<strong>PayPal</strong>、<strong>GooglePay</strong>、<strong>PayTM</strong> 等知名支付机构没有进行介绍，是因为基本它们的流程也都在上面的模式之中。我们后续的代码结构设计、数据库设计都基于满足上面的各种支付模型来完成设计。</p><p>最后，赠送大家一副脑图，这是接入一家支付时必须弄清楚的问题清单</p><p><img src="/articles/电商设计手册/pay-2.png" alt="pay-2"></p><h2 id="支付系统设计"><a href="#支付系统设计" class="headerlink" title="支付系统设计"></a>支付系统设计</h2><p>文中我们从严谨的角度一步步聊到支付如何演变成独立的系统。内容包括：系统演进过程、接口设计、数据库设计以及代码如何组织的示例。若有不足之处，欢迎讨论共同学习。</p><h3 id="从模块到服务"><a href="#从模块到服务" class="headerlink" title="从模块到服务"></a>从模块到服务</h3><p>我记得最开始工作的时候，所有的功能：加购物车/下单/支付 等逻辑都是放在一个项目里。如果一个新的项目需要某个功能，就把这个部分的功能包拷贝到新的项目。数据库也原封不动的拷贝过来，稍微根据需求改改。</p><p>这就是所谓的 <strong>单体应用</strong> 时代，随着公司产品线开始多元，每条产品线都需要用到支付服务。如果支付模块调整了代码，那么就会处处改动、处处测试。另一方面公司的交易数据割裂在不同的系统中，无法有效汇总统一分析、管理。</p><p>这时就到了系统演进的时候，我们把每个产品线的支付模块抽离成统一的服务。对自己公司内部提供统一的API使用，可以对这些API进一步包装成对应的SDK，供内部业务线快速接入。这里服务使用HTTP或者是RPC协议都可以根据公司实际情况决定。不过如果考虑到未来给第三方使用，建议使用HTTP协议，</p><p><strong>系统的演变过程：</strong></p><p><img src="/articles/电商设计手册/image-20190309104541749.png" alt></p><p>总结下，将支付单独抽离成服务后，带来好处如下：</p><ol><li>避免重复开发，数据隔离的现象出现；</li><li>支付系统周边功能演进更容易，整个系统更完善丰满。如：对账系统、实时交易数据展示；</li><li>随时可对外开发，对外输出Paas能力，成为有收入的项目；</li><li>专门的团队进行维护，系统更有机会演进成顶级系统；</li><li>公司重要账号信息保存一处，风险更小。</li></ol><h3 id="系统能力"><a href="#系统能力" class="headerlink" title="系统能力"></a>系统能力</h3><p>如果我们接手该需求，需要为公司从零搭建支付系统。我们该从哪些方面入手？这样的系统到底需要具备什么样的能力呢？</p><p>首先支付系统我们可以理解成是一个适配器。他需要把很多第三方的接口进行统一的整合封装后，对内部提供统一的接口，减少内部接入的成本。做为一个最基本的支付系统。需要对内提供如下接口出来：</p><ol><li>发起支付，我们取名：<code>/gopay</code></li><li>发起退款，我们取名：<code>/refund</code></li><li>接口异步通知，我们取名：<code>/notify/支付渠道/商户交易号</code></li><li>接口同步通知，我们取名：<code>/return/支付渠道/商户交易号</code></li><li>交易查询，我们取名：<code>/query/trade</code></li><li>退款查询，我们取名：<code>/query/refund</code></li><li>账单获取，我们取名：<code>/query/bill</code></li><li>结算明细，我们取名：<code>/query/settle</code></li></ol><p>一个基础的支付系统，上面8个接口是肯定需要提供的（这里忽略某些支付中的转账、绑卡等接口）。现在我们来基于这些接口看看都有哪些系统会用到。</p><p><img src="/articles/电商设计手册/image-20190309111001880.png" alt></p><p>下面按照系统维度，介绍下这些接口如何使用，以及内部的一些逻辑。</p><h4 id="应用系统"><a href="#应用系统" class="headerlink" title="应用系统"></a>应用系统</h4><p>一般支付网关会提供两种方式让应用系统接入：</p><ol><li>网关模式，也就是应用系统自己需要开发一个收银台；（适合提供给第三方）</li><li>收银台模式，应用系统直接打开支付网关的统一收银台。（内部业务）</li></ol><p>下面为了讲清楚设计思路，我们按照 <strong>网关模式</strong> 进行讲解。</p><p>对于应用系统它需要能够请求支付，也就是调用 <code>gopay</code> 接口。这个接口会处理商户的数据，完成后会调用第三方网关接口，并将返回结果统一处理后返回给应用方。</p><p>这里需要注意，第三方针对支付接口根据我的经验大致有以下情况：</p><ol><li>支付时，不需要调用第三方，按照规则生成数据即可；</li><li>支付时，需要调用第三方多个接口完成逻辑（这可能比较慢，大型活动时需要考虑限流/降配）；</li><li>返回的数据是一个url，可直接跳转到第三方完成支付（wap/pc站）；</li><li>返回的数据是xml/json结构，需要拼装或作为参数传给她的sdk（app）。</li></ol><p>这里由于第三方返回结构的不统一，我们需要统一处理成统一格式，返回给商户端。我推荐使用json格式。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"errno"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"msg"</span>:<span class="string">"ok"</span>,</span><br><span class="line">    <span class="attr">"data"</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把所有的变化封装在 <strong>data</strong> 结构中。举个例子，如果返回的一个url。只需要应用程序发起 <strong>GET</strong> 请求。我们可以这样返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"errno"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"msg"</span>:<span class="string">"ok"</span>,</span><br><span class="line">    <span class="attr">"data"</span>:&#123;</span><br><span class="line">        <span class="attr">"url"</span>:<span class="string">"xxxxx"</span>,</span><br><span class="line">        <span class="attr">"method"</span>:<span class="string">"GET"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是返回的结构，需要应用程序直接发起 <strong>POST</strong> 请求。我们可以这样返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"errno"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">"msg"</span>:<span class="string">"ok"</span>,</span><br><span class="line">    <span class="attr">"data"</span>:&#123;</span><br><span class="line">        <span class="attr">"from"</span>:<span class="string">"&lt;form action="</span>xxx<span class="string">" method="</span>POST<span class="string">"&gt;xxxxx&lt;/form&gt;"</span>,</span><br><span class="line">        <span class="attr">"method"</span>:<span class="string">"POST"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <strong>form</strong> 字段，生成了一个form表单，应用程序拿到后可直接显示然后自动提交。当然封装成 from表单这一步也可以放在商户端进行。</p><p>上面的数据格式仅仅是一个参考。大家可根据自己的需求进行调整。</p><p>一般应用系统除了会调用发起支付的接口外，可能还需要调用 <strong>支付结果查询接口</strong>。当然大多数情况下不需要调用，应用系统对交易的状态只应该依赖自己的系统状态。</p><h4 id="对账系统"><a href="#对账系统" class="headerlink" title="对账系统"></a>对账系统</h4><p>对于对账，一般分为两个类型：<strong>交易对账</strong> 与 <strong>结算对账</strong></p><p><strong>交易对账</strong></p><p>交易对账的核心点是：<strong>检查每一笔交易是否正确</strong>。它主要目的是看我们系统中的每一笔交易与第三方的每一笔交易是否一致。</p><p>这个检查逻辑很简单，对两份账单数据进行比较。它主要是使用 <code>/query/bill</code> 接口，拿到在第三方那边完成的交易数据。然后跟我方的交易成功数据进行比较。检查是否存在误差。</p><p>这个逻辑非常简单，但是有几点需要大家注意：</p><ol><li>我方的数据需要正常支付数据+重复支付数据的总和；</li><li>对账检查不成功主要包括：<strong>金额不对</strong>、<strong>第三方没有找到对应的交易数据</strong>、<strong>我方不存在对应的交易数据</strong>。</li></ol><p>针对这些情况都需要有对应的处理手段进行处理。在我的经验中上面的情况都有过遇到。</p><p><strong>金额不对</strong>：主要是由于第三方的问题，可能是系统升级故障、可能是账单接口金额错误；</p><p><strong>第三方无交易数据：</strong> 可能是拉去的账单时间维度问题（比如存在时差），这种时区问题需要自己跟第三方确认找到对应的时间差。也可能是被攻击，有人冒充第三方异步通知（说明系统校验机制又问题或者密钥泄漏了）。</p><p><strong>自己系统无交易数据：</strong> 这种原因可能是第三方通知未发出或者未正确处理导致的。</p><p>上面这些问题的处理绝大部份都可以依赖 <code>query/trade</code>  <code>query/refund</code> 来完成自动化处理。</p><p><strong>结算对账</strong></p><p>那么有了上面的 <strong>交易对账</strong> 为什么还需要 <strong>结算对账</strong> 呢？这个系统又是干嘛的？先来看下结算的含义。</p><blockquote><p>结算，就是第三方网关在固定时间点，将T+x或其它约定时间的金额，汇款到公司账号。</p></blockquote><p>下面我们假设结算周期是： <strong>T+1</strong>。结算对账主要使用到的接口是 <code>/query/settle</code>，这个接口获取的主要内容是：每一笔结算的款项都是由哪些笔交易组成（交易成功与退款数据）。以及本次结算扣除多少手续费用。</p><p>它的逻辑其实也很简单。我们先从自己的系统按照 <strong>T+1</strong> 的结算周期，计算出对方应该汇款给我们多少金额。然后与刚刚接口获取到的数据金额比较：</p><blockquote><p>银行收款金额 + 手续费 = 我方系统计算的金额</p></blockquote><p>这一步检查通过后，说明金额没有问题。接下来需要检查本次结算下的每一笔订单是否一致。</p><p>结算系统是 <strong>强依赖</strong> 对账系统的。如果对账发现异常，那么结算金额肯定会出现异常。另外结算需要注意的一些问题是：</p><ul><li>银行可能会自行退款给用户，因为用户可直接向自己发卡行申请退款；</li><li>结算也存在时区差问题；</li><li>结算接口中的明细交易状态与我方并不完全一致。比如：银行结算时发现某笔退款完成，但我方系统在进行比较时按照未退款完成的逻辑在处理。</li></ul><p>针对上面的问题，大家根据自己的业务需求需要做一些方案来进行自动化处理。</p><h4 id="财务系统"><a href="#财务系统" class="headerlink" title="财务系统"></a>财务系统</h4><p>财务系统有很多内部业务，我这里只聊与支付系统相关的。（当然上面的对账系统也可以算是财务范畴）。</p><p>财务系统与支付主要的一个关系点在于校验交易、以及退款。这里校验交易可以使用 <code>query/trade</code>  <code>query/refund</code>这两个接口来完成。这个逻辑过程就不需要说了。下面重点说下退款。</p><p>我看到很多的系统退款是直接放在了应用里边，用户申请退款直接就调用退款接口进行退款。这样的风险非常高。支付系统的关于资金流向的接口一定要慎重，不能过多的直接暴露给外部，带来风险。</p><p>退款的功能应该是放到财务系统来做。这样可以走内部的审批流程（是否需要根据业务来），并且在财务系统中可以进行更多检查来觉得是否立即进行退款，或者进入等待、拒绝等流程。</p><h4 id="第三方网关"><a href="#第三方网关" class="headerlink" title="第三方网关"></a>第三方网关</h4><p>针对第三方主要使用到的其实就是异步通知与同步通知两个接口。这一部分的逻辑其实非常简单。就是根据第三方的通知完成交易状态的变更。以及通知到自己对应的应用系统。</p><p>这部分比较复杂的是，第三方的通知数据结构不统一、通知的类型不统一。比如：有的退款是同步返回结果、有的是异步返回结果。这里如何设计会在后面的 <strong>系统设计</strong> 中给出答案。</p><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>数据的设计是按照：交易、退款、日志 来设计的。对于上面说到的对账等功能并没有。这部分不难大家可以自行设计，按照上面讲到的思路。主要的表介绍如下：</p><ul><li><code>pay_transaction</code> 记录所有的交易数据。</li><li><code>pay_transaction_extension</code> 记录每次向第三方发起交易时，生成的交易号</li><li><code>pay_log_data</code> 所有的日志数据，如：支付请求、退款请求、异步通知等</li><li><code>pay_repeat_transaction</code> 重复支付的数据</li><li><code>pay_notify_app_log</code> 通知应用程序的日志</li><li><code>pay_refund</code> 记录所有的退款数据</li></ul><p><strong>具体的表结构：</strong></p><pre><code class="sql"><span class="comment">-- -----------------------------------------------------</span><span class="comment">-- Table 创建支付流水表</span><span class="comment">-- -----------------------------------------------------</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`pay_transaction`</span> (  <span class="string">`id`</span> <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,  <span class="string">`app_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'应用id'</span>,  <span class="string">`pay_method_id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'支付方式id，可以用来识别支付，如：支付宝、微信、Paypal等'</span>,  <span class="string">`app_order_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'应用方订单号'</span>,  <span class="string">`transaction_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'本次交易唯一id，整个支付系统唯一，生成他的原因主要是 order_id对于其它应用来说可能重复'</span>,  <span class="string">`total_fee`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'支付金额，整数方式保存'</span>,  <span class="string">`scale`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'金额对应的小数位数'</span>,  <span class="string">`currency_code`</span> <span class="built_in">CHAR</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'CNY'</span> <span class="keyword">COMMENT</span> <span class="string">'交易的币种'</span>,  <span class="string">`pay_channel`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'选择的支付渠道，比如：支付宝中的花呗、信用卡等'</span>,  <span class="string">`expire_time`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'订单过期时间'</span>,  <span class="string">`return_url`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付后跳转url'</span>,  <span class="string">`notify_url`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付后，异步通知url'</span>,  <span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户的邮箱'</span>,  <span class="string">`sing_type`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'RSA'</span> <span class="keyword">COMMENT</span> <span class="string">'采用的签方式：MD5 RSA RSA2 HASH-MAC等'</span>,  <span class="string">`intput_charset`</span> <span class="built_in">CHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'UTF-8'</span> <span class="keyword">COMMENT</span> <span class="string">'字符集编码方式'</span>,  <span class="string">`payment_time`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'第三方支付成功的时间'</span>,  <span class="string">`notify_time`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'收到异步通知的时间'</span>,  <span class="string">`finish_time`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'通知上游系统的时间'</span>,  <span class="string">`trade_no`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'第三方的流水号'</span>,  <span class="string">`transaction_code`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'真实给第三方的交易code，异步通知的时候更新'</span>,  <span class="string">`order_status`</span> <span class="built_in">TINYINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'0:等待支付，1:待付款完成， 2:完成支付，3:该笔交易已关闭，-1:支付失败'</span>,  <span class="string">`create_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,  <span class="string">`update_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,  <span class="string">`create_ip`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'创建的ip，这可能是自己服务的ip'</span>,  <span class="string">`update_ip`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'更新的ip'</span>,  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`uniq_tradid`</span> (<span class="string">`transaction_id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_trade_no`</span> (<span class="string">`trade_no`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_ctime`</span> (<span class="string">`create_at`</span>)),<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4<span class="keyword">COMMENT</span> = <span class="string">'发起支付的数据'</span>;<span class="comment">-- -----------------------------------------------------</span><span class="comment">-- Table 交易扩展表</span><span class="comment">-- -----------------------------------------------------</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`pay_transaction_extension`</span> (  <span class="string">`id`</span> <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,  <span class="string">`transaction_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'系统唯一交易id'</span>,  <span class="string">`pay_method_id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,  <span class="string">`transaction_code`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'生成传输给第三方的订单号'</span>,  <span class="string">`call_num`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'发起调用的次数'</span>,  <span class="string">`extension_data`</span> <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'扩展内容，需要保存：transaction_code 与 trade no 的映射关系，异步通知的时候填充'</span>,  <span class="string">`create_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,  <span class="string">`create_ip`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建ip'</span>,  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_trads`</span> (<span class="string">`transaction_id`</span>, <span class="string">`pay_status`</span>),  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`uniq_code`</span> (<span class="string">`transaction_code`</span>)),<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4<span class="keyword">COMMENT</span> = <span class="string">'交易扩展表'</span>;<span class="comment">-- -----------------------------------------------------</span><span class="comment">-- Table 交易系统全部日志</span><span class="comment">-- -----------------------------------------------------</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`pay_log_data`</span> (  <span class="string">`id`</span> <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,  <span class="string">`app_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'应用id'</span>,  <span class="string">`app_order_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'应用方订单号'</span>,  <span class="string">`transaction_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'本次交易唯一id，整个支付系统唯一，生成他的原因主要是 order_id对于其它应用来说可能重复'</span>,  <span class="string">`request_header`</span> <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'请求的header 头'</span>,  <span class="string">`request_params`</span> <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付的请求参数'</span>,  <span class="string">`log_type`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'日志类型，payment:支付; refund:退款; notify:异步通知; return:同步通知; query:查询'</span>,  <span class="string">`create_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,  <span class="string">`create_ip`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'创建ip'</span>,  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_tradt`</span> (<span class="string">`transaction_id`</span>, <span class="string">`log_type`</span>)),<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4<span class="keyword">COMMENT</span> = <span class="string">'交易日志表'</span>;<span class="comment">-- -----------------------------------------------------</span><span class="comment">-- Table 重复支付的交易</span><span class="comment">-- -----------------------------------------------------</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`pay_repeat_transaction`</span> (  <span class="string">`id`</span> <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,  <span class="string">`app_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'应用的id'</span>,  <span class="string">`transaction_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'系统唯一识别交易号'</span>,  <span class="string">`transaction_code`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付成功时，该笔交易的 code'</span>,  <span class="string">`trade_no`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'第三方对应的交易号'</span>,  <span class="string">`pay_method_id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'支付方式'</span>,  <span class="string">`total_fee`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'交易金额'</span>,  <span class="string">`scale`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'小数位数'</span>,  <span class="string">`currency_code`</span> <span class="built_in">CHAR</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'CNY'</span> <span class="keyword">COMMENT</span> <span class="string">'支付选择的币种，CNY、HKD、USD等'</span>,  <span class="string">`payment_time`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'第三方交易时间'</span>,  <span class="string">`repeat_type`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> <span class="keyword">COMMENT</span> <span class="string">'重复类型：1同渠道支付、2不同渠道支付'</span>,  <span class="string">`repeat_status`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'处理状态,0:未处理；1:已处理'</span>,  <span class="string">`create_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,  <span class="string">`update_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_trad`</span> ( <span class="string">`transaction_id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_method`</span> (<span class="string">`pay_method_id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_time`</span> (<span class="string">`create_at`</span>)),<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4<span class="keyword">COMMENT</span> = <span class="string">'记录重复支付'</span>;<span class="comment">-- -----------------------------------------------------</span><span class="comment">-- Table 通知上游应用日志</span><span class="comment">-- -----------------------------------------------------</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`pay_notify_app_log`</span> (  <span class="string">`id`</span> <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,  <span class="string">`app_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'应用id'</span>,  <span class="string">`pay_method_id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'支付方式'</span>,  <span class="string">`transaction_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'交易号'</span>,  <span class="string">`transaction_code`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付成功时，该笔交易的 code'</span>,  <span class="string">`sign_type`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'RSA'</span> <span class="keyword">COMMENT</span> <span class="string">'采用的签名方式：MD5 RSA RSA2 HASH-MAC等'</span>,  <span class="string">`input_charset`</span> <span class="built_in">CHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'UTF-8'</span>,  <span class="string">`total_fee`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'涉及的金额，无小数'</span>,  <span class="string">`scale`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'小数位数'</span>,  <span class="string">`pay_channel`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付渠道'</span>,  <span class="string">`trade_no`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'第三方交易号'</span>,  <span class="string">`payment_time`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'支付时间'</span>,  <span class="string">`notify_type`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'paid'</span> <span class="keyword">COMMENT</span> <span class="string">'通知类型，paid/refund/canceled'</span>,  <span class="string">`notify_status`</span> <span class="built_in">VARCHAR</span>(<span class="number">7</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'INIT'</span> <span class="keyword">COMMENT</span> <span class="string">'通知支付调用方结果；INIT:初始化，PENDING: 进行中；  SUCCESS：成功；  FAILED：失败'</span>,  <span class="string">`create_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,  <span class="string">`update_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_trad`</span> (<span class="string">`transaction_id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_app`</span> (<span class="string">`app_id`</span>, <span class="string">`notify_status`</span>)  <span class="keyword">INDEX</span> <span class="string">`idx_time`</span> (<span class="string">`create_at`</span>)),<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4<span class="keyword">COMMENT</span> = <span class="string">'支付调用方记录'</span>;<span class="comment">-- -----------------------------------------------------</span><span class="comment">-- Table 退款</span><span class="comment">-- -----------------------------------------------------</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`pay_refund`</span> (  <span class="string">`id`</span> <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,  <span class="string">`app_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'应用id'</span>,  <span class="string">`app_refund_no`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'上游的退款id'</span>,  <span class="string">`transaction_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'交易号'</span>,  <span class="string">`trade_no`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'第三方交易号'</span>,  <span class="string">`refund_no`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付平台生成的唯一退款单号'</span>,  <span class="string">`pay_method_id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'支付方式'</span>,  <span class="string">`pay_channel`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'选择的支付渠道，比如：支付宝中的花呗、信用卡等'</span>,  <span class="string">`refund_fee`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'退款金额'</span>,  <span class="string">`scale`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'小数位数'</span>,  <span class="string">`refund_reason`</span> <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'退款理由'</span>,  <span class="string">`currency_code`</span> <span class="built_in">CHAR</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'CNY'</span> <span class="keyword">COMMENT</span> <span class="string">'币种，CNY  USD HKD'</span>,  <span class="string">`refund_type`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'退款类型；0:业务退款; 1:重复退款'</span>,  <span class="string">`refund_method`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> <span class="keyword">COMMENT</span> <span class="string">'退款方式：1自动原路返回; 2人工打款'</span>,  <span class="string">`refund_status`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'0未退款; 1退款处理中; 2退款成功; 3退款不成功'</span>,  <span class="string">`create_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,  <span class="string">`update_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,  <span class="string">`create_ip`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'请求源ip'</span>,  <span class="string">`update_ip`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'请求源ip'</span>,  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`uniq_refno`</span> (<span class="string">`refund_no`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_trad`</span> (<span class="string">`transaction_id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_status`</span> (<span class="string">`refund_status`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_ctime`</span> (<span class="string">`create_at`</span>)),<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4<span class="keyword">COMMENT</span> = <span class="string">'退款记录'</span>;</code></pre><p>表的使用逻辑进行下方简单描述：</p><p><strong>支付</strong>，首先需要记录请求日志到 <code>pay_log_data</code>中，然后生成交易数据记录到 <code>pay_transaction</code>与<code>pay_transaction_extension</code> 中。</p><p><strong>收到通知</strong>，记录数据到 <code>pay_log_data</code> 中，然后根据时支付的通知还是退款的通知，更新 <code>pay_transaction</code> 与 <code>pay_refund</code> 的状态。如果是重复支付需要记录数据到 <code>pay_repeat_transaction</code> 中。并且将需要通知应用的数据记录到 <code>pay_notify_app_log</code>，这张表相当于一个消息表，会有消费者会去消费其中的内容。</p><p><strong>退款</strong> 记录日志日志到 <code>pay_log_data</code> 中，然后记录数据到退款表中 <code>pay_refund</code>。</p><p>当然这其中还有些细节，需要大家自己看了表结构，实际去思考一下该如何使用。如果有任何疑问欢迎到我们GitHub的项目（点击阅读原文）中留言，我们都会一一解答。</p><blockquote><p>这些表能够满足最基本的需求，其它内容可根据自己的需求进行扩张，比如：支持用户卡列表、退款走银行卡等。</p></blockquote><h3 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h3><p>这部分主要说下系统该如何搭建，以及代码组织方式的建议。</p><h4 id="系统架构-1"><a href="#系统架构-1" class="headerlink" title="系统架构"></a>系统架构</h4><p>由于支付系统的安全性非常高，因此不建议将对应的入口直接暴露给用户可见。应该是在自己的应用系统中调用支付系统的接口来完成业务。另外系统对数据要求是：强一致性的。因此也没有缓存介入（当如缓存可以用来做报警，这不在本文范畴）。</p><p><img src="/articles/电商设计手册/image-20190309135800643.png" alt></p><p>具体的实现，系统会使用两个域名，一个为内部使用，只有指定来源的ip能够访问固定功能（访问除通知外的其它功能）。另一个域名只能访问 <code>notify</code> <code>return</code> 两个路由。通过这种方式可以保证系统的安全。</p><p>在数据库的使用上无论什么请求直接走 <strong>Master</strong> 库。这样保证数据的强一致。当然从库也是需要的。比如：账单、对账相关逻辑我们可以利用从库完成。</p><h4 id="代码设计"><a href="#代码设计" class="headerlink" title="代码设计"></a>代码设计</h4><p>不管想做什么最终都要用代码来实现。我们都知道需要可维护、可扩展的代码。那么具体到支付系统你会怎么做呢？我已支付为例说下我的代码结构设计思路。仅供参考。比如我要介入：微信、支付宝、招行 三家支付。我的代码结构图如下：</p><p><img src="/articles/电商设计手册/image-20190309142925499.png" alt></p><p>用文字简单介绍下。我会将每一个第三方封装成： <code>XXXGateway</code> 类，内部是单纯的封装第三方接口，不管对方是 HTTP 请求还是 SOAP 请求，都在内部进行统一处理。</p><p>另外有一层<code>XXXProxy</code> 来封装这些第三方提供的能力。这一层主要干两件事情：对传过来请求支付的数据进行个性化处理。对返回的结构进行统一处理返回上层统一的结构。当然根据特殊情况这里可以进行一切业务处理；</p><p>通过上面的操作变化已经基本上被完全封装了。如果新增一个支付渠道。只需要增加：<code>XXXGateway</code> 与 <code>XXXProxy</code>。</p><p>那么 <code>Context</code> 与 <code>Server</code> 有什么用呢？<code>Server</code> 内部封装了所有的业务逻辑，它提供接口给 action 或者其它 server 进行调用。而 <code>Context</code> 这一层存在的价值是处理 <code>Proxy</code> 层返回的错误。以及在这里进行报警相关的处理。</p><p>上面的结构只是我的一个实践，欢迎大家讨论。</p><p>本文描述的系统只是满足了最基本的支付需求。缺少相关的监控、报警。如果你按照上文设计自己的系统，风险自担与我无关。</p><h1 id="订单中心"><a href="#订单中心" class="headerlink" title="订单中心"></a>订单中心</h1><p>请您耐心等待…</p><h1 id="仓储系统"><a href="#仓储系统" class="headerlink" title="仓储系统"></a>仓储系统</h1><p>请您耐心等待…</p><h1 id="物流系统"><a href="#物流系统" class="headerlink" title="物流系统"></a>物流系统</h1><p>请您耐心等待…</p><h1 id="售后服务"><a href="#售后服务" class="headerlink" title="售后服务"></a>售后服务</h1><p>请您耐心等待…</p><h1 id="基础服务"><a href="#基础服务" class="headerlink" title="基础服务"></a>基础服务</h1><p>请您耐心等待…</p><style>.posts-expand .post-body img{margin:0 auto; max-height:100vh;}</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一直从事互联网电商开发三年多的时间了，回头想想却对整个业务流程不是很了解，说出去很是惭愧。但是身处互联网电商的环境中，或多或少接触了其中的各
      
    
    </summary>
    
      <category term="架构设计" scheme="https://ya2.top/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
</feed>
